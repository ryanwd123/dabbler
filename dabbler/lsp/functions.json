{
    "!": {
        "documentation": {
            "documentation": "**Math function**: factorial of x. Computes the product of the current integer and all integers below it\n\n**Example**\n\n```sql\n4!\n```\n\n**Returns**\n\n24\n",
            "detail": "!(x)"
        },
        "docstring": {
            "documentation": "**Math function**: factorial of x. Computes the product of the current integer and all integers below it\n\n**Example**\n\n```sql\n4!\n```\n\n**Returns**\n\n24\n",
            "detail": "!(x)"
        }
    },
    "&": {
        "documentation": {
            "documentation": "**Operators function**: Bitwise AND\n\n**Example**\n\n```sql\n91 & 15\n```\n\n**Returns**\n\n11\n",
            "detail": "&(left, right)"
        },
        "docstring": {
            "documentation": "**Operators function**: Bitwise AND\n\n**Example**\n\n```sql\n91 & 15\n```\n\n**Returns**\n\n11\n",
            "detail": "&(left, right)"
        }
    },
    "**": {
        "documentation": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "**(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "**(x, y)"
        }
    },
    "<<": {
        "documentation": {
            "documentation": "**Operators function**: bitwise shift left\n\n**Example**\n\n```sql\n1 << 4\n```\n\n**Returns**\n\n16\n",
            "detail": "<<(input)"
        },
        "docstring": {
            "documentation": "**Operators function**: bitwise shift left\n\n**Example**\n\n```sql\n1 << 4\n```\n\n**Returns**\n\n16\n",
            "detail": "<<(input)"
        }
    },
    ">>": {
        "documentation": {
            "documentation": "**Operators function**: bitwise shift right\n\n**Example**\n\n```sql\n8 >> 2\n```\n\n**Returns**\n\n2\n",
            "detail": ">>(input)"
        },
        "docstring": {
            "documentation": "**Operators function**: bitwise shift right\n\n**Example**\n\n```sql\n8 >> 2\n```\n\n**Returns**\n\n2\n",
            "detail": ">>(input)"
        }
    },
    "@": {
        "documentation": {
            "documentation": "**Math function**: absolute value\n\n**Example**\n\n```sql\nabs(-17.4)\n```\n\n**Returns**\n\n17.4\n",
            "detail": "@(x)"
        },
        "docstring": {
            "documentation": "**Math function**: absolute value\n\n**Example**\n\n```sql\nabs(-17.4)\n```\n\n**Returns**\n\n17.4\n",
            "detail": "@(x)"
        }
    },
    "^@": {
        "documentation": {
            "documentation": "**String function**: Return true if string begins with search_string\n\n**Example**\n\n```sql\nstarts_with('abc','a')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "^@(string, search_string)"
        },
        "docstring": {
            "documentation": "**String function**: Return true if string begins with search_string\n\n**Example**\n\n```sql\nstarts_with('abc','a')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "^@(string, search_string)"
        }
    },
    "acos": {
        "documentation": {
            "documentation": "**Math function**: computes the arccosine of x\n\n**Example**\n\n```sql\nacos(0.5)\n```\n\n**Returns**\n\n1.0471975511965979\n",
            "detail": "acos(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the arccosine of x\n\n**Example**\n\n```sql\nacos(0.5)\n```\n\n**Returns**\n\n1.0471975511965979\n",
            "detail": "acos(x)"
        }
    },
    "age": {
        "documentation": {
            "documentation": "**Date function**: Subtract arguments, resulting in the time difference between the two timestamps\n\n**Example**\n\n```sql\nage(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')\n```\n\n**Returns**\n\n8 years 6 months 20 days\n",
            "detail": "age(timestamp, timestamp)"
        },
        "docstring": {
            "documentation": "**Date function**: Subtract arguments, resulting in the time difference between the two timestamps\n\n**Example**\n\n```sql\nage(TIMESTAMP '2001-04-10', TIMESTAMP '1992-09-20')\n```\n\n**Returns**\n\n8 years 6 months 20 days\n",
            "detail": "age(timestamp, timestamp)"
        }
    },
    "alias": {
        "documentation": {
            "documentation": "**Generic function**: Returns the name of a given expression\n\n**Example**\n\n```sql\nalias(42 + 1)\n```\n\n**Returns**\n\nresult\n",
            "detail": "alias(expr)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the name of a given expression\n\n**Example**\n\n```sql\nalias(42 + 1)\n```\n\n**Returns**\n\nresult\n",
            "detail": "alias(expr)"
        }
    },
    "approx_count_distinct": {
        "documentation": {
            "documentation": "**Distributive function**: Computes the approximate count of distinct elements using HyperLogLog.\n\n**Example**\n\n```sql\napprox_count_distinct(A)\n```\n\n",
            "detail": "approx_count_distinct(x)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Computes the approximate count of distinct elements using HyperLogLog.\n\n**Example**\n\n```sql\napprox_count_distinct(A)\n```\n\n",
            "detail": "approx_count_distinct(x)"
        }
    },
    "approx_quantile": {
        "documentation": {
            "documentation": "**Holistic function**: Computes the approximate quantile using T-Digest.\n\n**Example**\n\n```sql\napprox_quantile(A,0.5)\n```\n\n",
            "detail": "approx_quantile(x, pos)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Computes the approximate quantile using T-Digest.\n\n**Example**\n\n```sql\napprox_quantile(A,0.5)\n```\n\n",
            "detail": "approx_quantile(x, pos)"
        }
    },
    "arg_max": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\narg_max(A,B)\n```\n\n",
            "detail": "arg_max(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\narg_max(A,B)\n```\n\n",
            "detail": "arg_max(arg, val)"
        }
    },
    "arg_min": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\narg_min(A,B)\n```\n\n",
            "detail": "arg_min(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\narg_min(A,B)\n```\n\n",
            "detail": "arg_min(arg, val)"
        }
    },
    "ascii": {
        "documentation": {
            "documentation": "**String function**: Returns an integer that represents the Unicode code point of the first character of the string.\n\n**Example**\n\n```sql\nascii('\u03a9')\n```\n\n**Returns**\n\n937\n",
            "detail": "ascii(string)"
        },
        "docstring": {
            "documentation": "**String function**: Returns an integer that represents the Unicode code point of the first character of the string.\n\n**Example**\n\n```sql\nascii('\u03a9')\n```\n\n**Returns**\n\n937\n",
            "detail": "ascii(string)"
        }
    },
    "asin": {
        "documentation": {
            "documentation": "**Math function**: computes the arcsine of x\n\n**Example**\n\n```sql\nasin(0.5)\n```\n\n**Returns**\n\n0.5235987755982989\n",
            "detail": "asin(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the arcsine of x\n\n**Example**\n\n```sql\nasin(0.5)\n```\n\n**Returns**\n\n0.5235987755982989\n",
            "detail": "asin(x)"
        }
    },
    "atan": {
        "documentation": {
            "documentation": "**Math function**: computes the arctangent of x\n\n**Example**\n\n```sql\natan(0.5)\n```\n\n**Returns**\n\n0.4636476090008061\n",
            "detail": "atan(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the arctangent of x\n\n**Example**\n\n```sql\natan(0.5)\n```\n\n**Returns**\n\n0.4636476090008061\n",
            "detail": "atan(x)"
        }
    },
    "atan2": {
        "documentation": {
            "documentation": "**Math function**: computes the arctangent (y, x)\n\n**Example**\n\n```sql\natan2(1.0, 0.0)\n```\n\n**Returns**\n\n1.5707963267948966\n",
            "detail": "atan2(y, x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the arctangent (y, x)\n\n**Example**\n\n```sql\natan2(1.0, 0.0)\n```\n\n**Returns**\n\n1.5707963267948966\n",
            "detail": "atan2(y, x)"
        }
    },
    "avg": {
        "documentation": {
            "documentation": "**Algebraic function**: Calculates the average value for all tuples in x.\n\n**Example**\n\n```sql\nSUM(x) / COUNT(*)\n```\n\n",
            "detail": "avg(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Calculates the average value for all tuples in x.\n\n**Example**\n\n```sql\nSUM(x) / COUNT(*)\n```\n\n",
            "detail": "avg(x)"
        }
    },
    "bar": {
        "documentation": {
            "documentation": "**String function**: Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\n\n**Example**\n\n```sql\nbar(5, 0, 20, 10)\n```\n\n**Returns**\n\n\u2588\u2588\u258c\n",
            "detail": "bar(x, min, max, width)"
        },
        "docstring": {
            "documentation": "**String function**: Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\n\n**Example**\n\n```sql\nbar(5, 0, 20, 10)\n```\n\n**Returns**\n\n\u2588\u2588\u258c\n",
            "detail": "bar(x, min, max, width)"
        }
    },
    "bin": {
        "documentation": {
            "documentation": "**String function**: Converts the value to binary representation\n\n**Example**\n\n```sql\nbin(42)\n```\n\n**Returns**\n\n101010\n",
            "detail": "bin(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts the value to binary representation\n\n**Example**\n\n```sql\nbin(42)\n```\n\n**Returns**\n\n101010\n",
            "detail": "bin(value)"
        }
    },
    "bit_and": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the bitwise AND of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_and(A)\n```\n\n",
            "detail": "bit_and(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the bitwise AND of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_and(A)\n```\n\n",
            "detail": "bit_and(arg)"
        }
    },
    "bit_count": {
        "documentation": {
            "documentation": "**Math function**: returns the number of bits that are set\n\n**Example**\n\n```sql\nbit_count(31)\n```\n\n**Returns**\n\n5\n",
            "detail": "bit_count(x)"
        },
        "docstring": {
            "documentation": "**Math function**: returns the number of bits that are set\n\n**Example**\n\n```sql\nbit_count(31)\n```\n\n**Returns**\n\n5\n",
            "detail": "bit_count(x)"
        }
    },
    "bit_or": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the bitwise OR of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_or(A)\n```\n\n",
            "detail": "bit_or(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the bitwise OR of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_or(A)\n```\n\n",
            "detail": "bit_or(arg)"
        }
    },
    "bit_position": {
        "documentation": {
            "documentation": "**Bit function**: Returns first starting index of the specified substring within bits, or zero if it\u2019s not present. The first (leftmost) bit is indexed 1\n\n**Example**\n\n```sql\nbit_position('010'::BIT, '1110101'::BIT)\n```\n\n**Returns**\n\n4\n",
            "detail": "bit_position(substring, bitstring)"
        },
        "docstring": {
            "documentation": "**Bit function**: Returns first starting index of the specified substring within bits, or zero if it\u2019s not present. The first (leftmost) bit is indexed 1\n\n**Example**\n\n```sql\nbit_position('010'::BIT, '1110101'::BIT)\n```\n\n**Returns**\n\n4\n",
            "detail": "bit_position(substring, bitstring)"
        }
    },
    "bit_xor": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the bitwise XOR of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_xor(A)\n```\n\n",
            "detail": "bit_xor(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the bitwise XOR of all bits in a given expression.\n\n**Example**\n\n```sql\nbit_xor(A)\n```\n\n",
            "detail": "bit_xor(arg)"
        }
    },
    "bitstring": {
        "documentation": {
            "documentation": "**Bit function**: Pads the bitstring until the specified length.\n\n**Example**\n\n```sql\nbitstring('1010'::BIT, 7)\n```\n\n**Returns**\n\n0001010\n",
            "detail": "bitstring(bitstring, length)"
        },
        "docstring": {
            "documentation": "**Bit function**: Pads the bitstring until the specified length.\n\n**Example**\n\n```sql\nbitstring('1010'::BIT, 7)\n```\n\n**Returns**\n\n0001010\n",
            "detail": "bitstring(bitstring, length)"
        }
    },
    "bitstring_agg": {
        "documentation": {
            "documentation": "**Distributive function**: Returns a bitstring with bits set for each distinct value.\n\n**Example**\n\n```sql\nbitstring_agg(A)\n```\n\n",
            "detail": "bitstring_agg(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns a bitstring with bits set for each distinct value.\n\n**Example**\n\n```sql\nbitstring_agg(A)\n```\n\n",
            "detail": "bitstring_agg(arg)"
        }
    },
    "bool_and": {
        "documentation": {
            "documentation": "**Distributive function**: Returns TRUE if every input value is TRUE, otherwise FALSE.\n\n**Example**\n\n```sql\nbool_and(A)\n```\n\n",
            "detail": "bool_and(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns TRUE if every input value is TRUE, otherwise FALSE.\n\n**Example**\n\n```sql\nbool_and(A)\n```\n\n",
            "detail": "bool_and(arg)"
        }
    },
    "bool_or": {
        "documentation": {
            "documentation": "**Distributive function**: Returns TRUE if any input value is TRUE, otherwise FALSE.\n\n**Example**\n\n```sql\nbool_or(A)\n```\n\n",
            "detail": "bool_or(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns TRUE if any input value is TRUE, otherwise FALSE.\n\n**Example**\n\n```sql\nbool_or(A)\n```\n\n",
            "detail": "bool_or(arg)"
        }
    },
    "cardinality": {
        "documentation": {
            "documentation": "**Map function**: Return the size of the map (or the number of entries in the map).\n\n**Example**\n\n```sql\ncardinality( map([4, 2], ['a', 'b']) );\n```\n\n**Returns**\n\n2\n",
            "detail": "cardinality(map)"
        },
        "docstring": {
            "documentation": "**Map function**: Return the size of the map (or the number of entries in the map).\n\n**Example**\n\n```sql\ncardinality( map([4, 2], ['a', 'b']) );\n```\n\n**Returns**\n\n2\n",
            "detail": "cardinality(map)"
        }
    },
    "cbrt": {
        "documentation": {
            "documentation": "**Math function**: returns the cube root of x\n\n**Example**\n\n```sql\ncbrt(8)\n```\n\n**Returns**\n\n2.0\n",
            "detail": "cbrt(x)"
        },
        "docstring": {
            "documentation": "**Math function**: returns the cube root of x\n\n**Example**\n\n```sql\ncbrt(8)\n```\n\n**Returns**\n\n2.0\n",
            "detail": "cbrt(x)"
        }
    },
    "ceil": {
        "documentation": {
            "documentation": "**Math function**: rounds the number up\n\n**Example**\n\n```sql\nceil(17.4)\n```\n\n**Returns**\n\n18.0\n",
            "detail": "ceil(x)"
        },
        "docstring": {
            "documentation": "**Math function**: rounds the number up\n\n**Example**\n\n```sql\nceil(17.4)\n```\n\n**Returns**\n\n18.0\n",
            "detail": "ceil(x)"
        }
    },
    "century": {
        "documentation": {
            "documentation": "**Date function**: Extract the century component from a date or timestamp\n\n**Example**\n\n```sql\ncentury(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n21\n",
            "detail": "century(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the century component from a date or timestamp\n\n**Example**\n\n```sql\ncentury(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n21\n",
            "detail": "century(ts)"
        }
    },
    "chr": {
        "documentation": {
            "documentation": "**String function**: returns a character which is corresponding the ASCII code value or Unicode code point\n\n**Example**\n\n```sql\nchr(65)\n```\n\n**Returns**\n\nA\n",
            "detail": "chr(code_point)"
        },
        "docstring": {
            "documentation": "**String function**: returns a character which is corresponding the ASCII code value or Unicode code point\n\n**Example**\n\n```sql\nchr(65)\n```\n\n**Returns**\n\nA\n",
            "detail": "chr(code_point)"
        }
    },
    "corr": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the correlation coefficient for non-null pairs in a group.\n\n**Example**\n\n```sql\nCOVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))\n```\n\n",
            "detail": "corr(y, x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the correlation coefficient for non-null pairs in a group.\n\n**Example**\n\n```sql\nCOVAR_POP(y, x) / (STDDEV_POP(x) * STDDEV_POP(y))\n```\n\n",
            "detail": "corr(y, x)"
        }
    },
    "cos": {
        "documentation": {
            "documentation": "**Math function**: computes the cos of x\n\n**Example**\n\n```sql\ncos(90)\n```\n\n**Returns**\n\n-0.4480736161291701\n",
            "detail": "cos(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the cos of x\n\n**Example**\n\n```sql\ncos(90)\n```\n\n**Returns**\n\n-0.4480736161291701\n",
            "detail": "cos(x)"
        }
    },
    "cot": {
        "documentation": {
            "documentation": "**Math function**: computes the cotangent of x\n\n**Example**\n\n```sql\ncot(0.5)\n```\n\n**Returns**\n\n1.830487721712452\n",
            "detail": "cot(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the cotangent of x\n\n**Example**\n\n```sql\ncot(0.5)\n```\n\n**Returns**\n\n1.830487721712452\n",
            "detail": "cot(x)"
        }
    },
    "covar_pop": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the population covariance of input values.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)\n```\n\n",
            "detail": "covar_pop(y, x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the population covariance of input values.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)\n```\n\n",
            "detail": "covar_pop(y, x)"
        }
    },
    "covar_samp": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the sample covariance for non-null pairs in a group.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)\n```\n\n",
            "detail": "covar_samp(y, x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the sample covariance for non-null pairs in a group.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / (COUNT(*) - 1)\n```\n\n",
            "detail": "covar_samp(y, x)"
        }
    },
    "current_database": {
        "documentation": {
            "documentation": "**Generic function**: Return the name of the currently active database.\n\n**Example**\n\n```sql\ncurrent_database()\n```\n\n**Returns**\n\nmemory\n",
            "detail": "current_database()"
        },
        "docstring": {
            "documentation": "**Generic function**: Return the name of the currently active database.\n\n**Example**\n\n```sql\ncurrent_database()\n```\n\n**Returns**\n\nmemory\n",
            "detail": "current_database()"
        }
    },
    "current_date": {
        "documentation": {
            "documentation": "**Date function**: Returns the current date\n\n**Example**\n\n```sql\ncurrent_date()\n```\n\n**Returns**\n\n2023-07-23\n",
            "detail": "current_date()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current date\n\n**Example**\n\n```sql\ncurrent_date()\n```\n\n**Returns**\n\n2023-07-23\n",
            "detail": "current_date()"
        }
    },
    "current_query": {
        "documentation": {
            "documentation": "**Generic function**: Returns the current query as a string\n\n**Example**\n\n```sql\ncurrent_query()\n```\n\n**Returns**\n\nSELECT current_query() AS result\n",
            "detail": "current_query()"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the current query as a string\n\n**Example**\n\n```sql\ncurrent_query()\n```\n\n**Returns**\n\nSELECT current_query() AS result\n",
            "detail": "current_query()"
        }
    },
    "current_schema": {
        "documentation": {
            "documentation": "**Generic function**: Return the name of the currently active schema. Default is main.\n\n**Example**\n\n```sql\ncurrent_schema()\n```\n\n**Returns**\n\nmain\n",
            "detail": "current_schema()"
        },
        "docstring": {
            "documentation": "**Generic function**: Return the name of the currently active schema. Default is main.\n\n**Example**\n\n```sql\ncurrent_schema()\n```\n\n**Returns**\n\nmain\n",
            "detail": "current_schema()"
        }
    },
    "current_schemas": {
        "documentation": {
            "documentation": "**Generic function**: Return list of schemas. Pass a parameter of True to include implicit schemas.\n\n**Example**\n\n```sql\ncurrent_schemas(true)\n```\n\n**Returns**\n\n[main, main, main, pg_catalog]\n",
            "detail": "current_schemas(include_implicit)"
        },
        "docstring": {
            "documentation": "**Generic function**: Return list of schemas. Pass a parameter of True to include implicit schemas.\n\n**Example**\n\n```sql\ncurrent_schemas(true)\n```\n\n**Returns**\n\n[main, main, main, pg_catalog]\n",
            "detail": "current_schemas(include_implicit)"
        }
    },
    "current_setting": {
        "documentation": {
            "documentation": "**Generic function**: Return the current value of the configuration setting\n\n**Example**\n\n```sql\ncurrent_setting('access_mode')\n```\n\n**Returns**\n\nautomatic\n",
            "detail": "current_setting(setting_name)"
        },
        "docstring": {
            "documentation": "**Generic function**: Return the current value of the configuration setting\n\n**Example**\n\n```sql\ncurrent_setting('access_mode')\n```\n\n**Returns**\n\nautomatic\n",
            "detail": "current_setting(setting_name)"
        }
    },
    "damerau_levenshtein": {
        "documentation": {
            "documentation": "**String function**: Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Different case is considered different.\n\n**Example**\n\n```sql\ndamerau_levenshtein('hello', 'world')\n```\n\n**Returns**\n\n4\n",
            "detail": "damerau_levenshtein(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: Extension of Levenshtein distance to also include transposition of adjacent characters as an allowed edit operation. In other words, the minimum number of edit operations (insertions, deletions, substitutions or transpositions) required to change one string to another. Different case is considered different.\n\n**Example**\n\n```sql\ndamerau_levenshtein('hello', 'world')\n```\n\n**Returns**\n\n4\n",
            "detail": "damerau_levenshtein(str1, str2)"
        }
    },
    "date_diff": {
        "documentation": {
            "documentation": "**Date function**: The number of partition boundaries between the timestamps\n\n**Example**\n\n```sql\ndate_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n2\n",
            "detail": "date_diff(part, startdate, enddate)"
        },
        "docstring": {
            "documentation": "**Date function**: The number of partition boundaries between the timestamps\n\n**Example**\n\n```sql\ndate_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n2\n",
            "detail": "date_diff(part, startdate, enddate)"
        }
    },
    "date_part": {
        "documentation": {
            "documentation": "**Date function**: Get subfield (equivalent to extract)\n\n**Example**\n\n```sql\ndate_part('minute', TIMESTAMP '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n38\n",
            "detail": "date_part(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Get subfield (equivalent to extract)\n\n**Example**\n\n```sql\ndate_part('minute', TIMESTAMP '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n38\n",
            "detail": "date_part(ts)"
        }
    },
    "date_sub": {
        "documentation": {
            "documentation": "**Date function**: The number of complete partitions between the timestamps\n\n**Example**\n\n```sql\ndate_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n1\n",
            "detail": "date_sub(part, startdate, enddate)"
        },
        "docstring": {
            "documentation": "**Date function**: The number of complete partitions between the timestamps\n\n**Example**\n\n```sql\ndate_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n1\n",
            "detail": "date_sub(part, startdate, enddate)"
        }
    },
    "date_trunc": {
        "documentation": {
            "documentation": "**Date function**: Truncate to specified precision\n\n**Example**\n\n```sql\ndate_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n1992-09-20 20:00:00+00\n",
            "detail": "date_trunc(part, timestamp)"
        },
        "docstring": {
            "documentation": "**Date function**: Truncate to specified precision\n\n**Example**\n\n```sql\ndate_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n1992-09-20 20:00:00+00\n",
            "detail": "date_trunc(part, timestamp)"
        }
    },
    "day": {
        "documentation": {
            "documentation": "**Date function**: Extract the day component from a date or timestamp\n\n**Example**\n\n```sql\nday(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "day(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the day component from a date or timestamp\n\n**Example**\n\n```sql\nday(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "day(ts)"
        }
    },
    "dayname": {
        "documentation": {
            "documentation": "**Date function**: The (English) name of the weekday.\n\n**Example**\n\n```sql\ndayname(TIMESTAMP '1992-03-22')\n```\n\n**Returns**\n\nSunday\n",
            "detail": "dayname(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: The (English) name of the weekday.\n\n**Example**\n\n```sql\ndayname(TIMESTAMP '1992-03-22')\n```\n\n**Returns**\n\nSunday\n",
            "detail": "dayname(ts)"
        }
    },
    "dayofmonth": {
        "documentation": {
            "documentation": "**Date function**: Extract the dayofmonth component from a date or timestamp\n\n**Example**\n\n```sql\ndayofmonth(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "dayofmonth(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the dayofmonth component from a date or timestamp\n\n**Example**\n\n```sql\ndayofmonth(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "dayofmonth(ts)"
        }
    },
    "dayofweek": {
        "documentation": {
            "documentation": "**Date function**: Extract the dayofweek component from a date or timestamp\n\n**Example**\n\n```sql\ndayofweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "dayofweek(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the dayofweek component from a date or timestamp\n\n**Example**\n\n```sql\ndayofweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "dayofweek(ts)"
        }
    },
    "dayofyear": {
        "documentation": {
            "documentation": "**Date function**: Extract the dayofyear component from a date or timestamp\n\n**Example**\n\n```sql\ndayofyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n215\n",
            "detail": "dayofyear(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the dayofyear component from a date or timestamp\n\n**Example**\n\n```sql\ndayofyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n215\n",
            "detail": "dayofyear(ts)"
        }
    },
    "decade": {
        "documentation": {
            "documentation": "**Date function**: Extract the decade component from a date or timestamp\n\n**Example**\n\n```sql\ndecade(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n202\n",
            "detail": "decade(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the decade component from a date or timestamp\n\n**Example**\n\n```sql\ndecade(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n202\n",
            "detail": "decade(ts)"
        }
    },
    "decode": {
        "documentation": {
            "documentation": "**Blob function**: Convert blob to varchar. Fails if blob is not valid utf-8.\n\n**Example**\n\n```sql\ndecode('\\xC3\\xBC'::BLOB)\n```\n\n**Returns**\n\n\u00fc\n",
            "detail": "decode(blob)"
        },
        "docstring": {
            "documentation": "**Blob function**: Convert blob to varchar. Fails if blob is not valid utf-8.\n\n**Example**\n\n```sql\ndecode('\\xC3\\xBC'::BLOB)\n```\n\n**Returns**\n\n\u00fc\n",
            "detail": "decode(blob)"
        }
    },
    "degrees": {
        "documentation": {
            "documentation": "**Math function**: converts radians to degrees\n\n**Example**\n\n```sql\ndegrees(pi())\n```\n\n**Returns**\n\n180.0\n",
            "detail": "degrees(x)"
        },
        "docstring": {
            "documentation": "**Math function**: converts radians to degrees\n\n**Example**\n\n```sql\ndegrees(pi())\n```\n\n**Returns**\n\n180.0\n",
            "detail": "degrees(x)"
        }
    },
    "encode": {
        "documentation": {
            "documentation": "**Blob function**: Convert varchar to blob. Converts utf-8 characters into literal encoding.\n\n**Example**\n\n```sql\nencode('my_string_with_\u00fc')\n```\n\n**Returns**\n\nmy_string_with_\\xC3\\xBC\n",
            "detail": "encode(string)"
        },
        "docstring": {
            "documentation": "**Blob function**: Convert varchar to blob. Converts utf-8 characters into literal encoding.\n\n**Example**\n\n```sql\nencode('my_string_with_\u00fc')\n```\n\n**Returns**\n\nmy_string_with_\\xC3\\xBC\n",
            "detail": "encode(string)"
        }
    },
    "entropy": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the log-2 entropy of count input-values.\n\n",
            "detail": "entropy(x)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the log-2 entropy of count input-values.\n\n",
            "detail": "entropy(x)"
        }
    },
    "enum_code": {
        "documentation": {
            "documentation": "**Enum function**: Returns the numeric value backing the given enum value\n\n**Example**\n\n```sql\nenum_code('happy'::mood)\n```\n\n",
            "detail": "enum_code(enum)"
        },
        "docstring": {
            "documentation": "**Enum function**: Returns the numeric value backing the given enum value\n\n**Example**\n\n```sql\nenum_code('happy'::mood)\n```\n\n",
            "detail": "enum_code(enum)"
        }
    },
    "enum_first": {
        "documentation": {
            "documentation": "**Enum function**: Returns the first value of the input enum type.\n\n**Example**\n\n```sql\nenum_first(null::mood)\n```\n\n",
            "detail": "enum_first(enum)"
        },
        "docstring": {
            "documentation": "**Enum function**: Returns the first value of the input enum type.\n\n**Example**\n\n```sql\nenum_first(null::mood)\n```\n\n",
            "detail": "enum_first(enum)"
        }
    },
    "enum_last": {
        "documentation": {
            "documentation": "**Enum function**: Returns the last value of the input enum type.\n\n**Example**\n\n```sql\nenum_last(null::mood)\n```\n\n",
            "detail": "enum_last(enum)"
        },
        "docstring": {
            "documentation": "**Enum function**: Returns the last value of the input enum type.\n\n**Example**\n\n```sql\nenum_last(null::mood)\n```\n\n",
            "detail": "enum_last(enum)"
        }
    },
    "enum_range": {
        "documentation": {
            "documentation": "**Enum function**: Returns all values of the input enum type as an array.\n\n**Example**\n\n```sql\nenum_range(null::mood)\n```\n\n",
            "detail": "enum_range(enum)"
        },
        "docstring": {
            "documentation": "**Enum function**: Returns all values of the input enum type as an array.\n\n**Example**\n\n```sql\nenum_range(null::mood)\n```\n\n",
            "detail": "enum_range(enum)"
        }
    },
    "enum_range_boundary": {
        "documentation": {
            "documentation": "**Enum function**: Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type.\n\n**Example**\n\n```sql\nenum_range_boundary(NULL, 'happy'::mood)\n```\n\n",
            "detail": "enum_range_boundary(start, end)"
        },
        "docstring": {
            "documentation": "**Enum function**: Returns the range between the two given enum values as an array. The values must be of the same enum type. When the first parameter is NULL, the result starts with the first value of the enum type. When the second parameter is NULL, the result ends with the last value of the enum type.\n\n**Example**\n\n```sql\nenum_range_boundary(NULL, 'happy'::mood)\n```\n\n",
            "detail": "enum_range_boundary(start, end)"
        }
    },
    "epoch": {
        "documentation": {
            "documentation": "**Date function**: Extract the epoch component from a temporal type\n\n**Example**\n\n```sql\nepoch(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984\n",
            "detail": "epoch(temporal)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the epoch component from a temporal type\n\n**Example**\n\n```sql\nepoch(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984\n",
            "detail": "epoch(temporal)"
        }
    },
    "epoch_ms": {
        "documentation": {
            "documentation": "**Date function**: Extract the epoch component in milliseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_ms(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123\n",
            "detail": "epoch_ms(temporal)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the epoch component in milliseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_ms(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123\n",
            "detail": "epoch_ms(temporal)"
        }
    },
    "epoch_ns": {
        "documentation": {
            "documentation": "**Date function**: Extract the epoch component in nanoseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_ns(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123456000\n",
            "detail": "epoch_ns(temporal)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the epoch component in nanoseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_ns(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123456000\n",
            "detail": "epoch_ns(temporal)"
        }
    },
    "epoch_us": {
        "documentation": {
            "documentation": "**Date function**: Extract the epoch component in microseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_us(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123456\n",
            "detail": "epoch_us(temporal)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the epoch component in microseconds from a temporal type\n\n**Example**\n\n```sql\nepoch_us(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1627991984123456\n",
            "detail": "epoch_us(temporal)"
        }
    },
    "era": {
        "documentation": {
            "documentation": "**Date function**: Extract the era component from a date or timestamp\n\n**Example**\n\n```sql\nera(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1\n",
            "detail": "era(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the era component from a date or timestamp\n\n**Example**\n\n```sql\nera(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n1\n",
            "detail": "era(ts)"
        }
    },
    "error": {
        "documentation": {
            "documentation": "**Generic function**: Throws the given error message\n\n**Example**\n\n```sql\nerror('access_mode')\n```\n\n",
            "detail": "error(message)"
        },
        "docstring": {
            "documentation": "**Generic function**: Throws the given error message\n\n**Example**\n\n```sql\nerror('access_mode')\n```\n\n",
            "detail": "error(message)"
        }
    },
    "even": {
        "documentation": {
            "documentation": "**Math function**: round to next even number by rounding away from zero.\n\n**Example**\n\n```sql\neven(2.9)\n```\n\n**Returns**\n\n4.0\n",
            "detail": "even(x)"
        },
        "docstring": {
            "documentation": "**Math function**: round to next even number by rounding away from zero.\n\n**Example**\n\n```sql\neven(2.9)\n```\n\n**Returns**\n\n4.0\n",
            "detail": "even(x)"
        }
    },
    "exp": {
        "documentation": {
            "documentation": "**Math function**: computes e to the power of x\n\n**Example**\n\n```sql\nexp(1)\n```\n\n**Returns**\n\n2.718281828459045\n",
            "detail": "exp(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes e to the power of x\n\n**Example**\n\n```sql\nexp(1)\n```\n\n**Returns**\n\n2.718281828459045\n",
            "detail": "exp(x)"
        }
    },
    "favg": {
        "documentation": {
            "documentation": "**Algebraic function**: Calculates the average using a more accurate floating point summation (Kahan Sum)\n\n**Example**\n\n```sql\nfavg(A)\n```\n\n",
            "detail": "favg(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Calculates the average using a more accurate floating point summation (Kahan Sum)\n\n**Example**\n\n```sql\nfavg(A)\n```\n\n",
            "detail": "favg(x)"
        }
    },
    "flatten": {
        "documentation": {
            "documentation": "**List function**: Flatten a nested list by one level\n\n**Example**\n\n```sql\nflatten([[1, 2, 3], [4, 5]])\n```\n\n**Returns**\n\n[1, 2, 3, 4, 5]\n",
            "detail": "flatten(nested_list)"
        },
        "docstring": {
            "documentation": "**List function**: Flatten a nested list by one level\n\n**Example**\n\n```sql\nflatten([[1, 2, 3], [4, 5]])\n```\n\n**Returns**\n\n[1, 2, 3, 4, 5]\n",
            "detail": "flatten(nested_list)"
        }
    },
    "floor": {
        "documentation": {
            "documentation": "**Math function**: rounds the number down\n\n**Example**\n\n```sql\nfloor(17.4)\n```\n\n**Returns**\n\n17.0\n",
            "detail": "floor(x)"
        },
        "docstring": {
            "documentation": "**Math function**: rounds the number down\n\n**Example**\n\n```sql\nfloor(17.4)\n```\n\n**Returns**\n\n17.0\n",
            "detail": "floor(x)"
        }
    },
    "format": {
        "documentation": {
            "documentation": "**String function**: Formats a string using fmt syntax\n\n**Example**\n\n```sql\nformat('Benchmark \"{}\" took {} seconds', 'CSV', 42)\n```\n\n**Returns**\n\nBenchmark \"CSV\" took 42 seconds\n",
            "detail": "format(format, parameters...)"
        },
        "docstring": {
            "documentation": "**String function**: Formats a string using fmt syntax\n\n**Example**\n\n```sql\nformat('Benchmark \"{}\" took {} seconds', 'CSV', 42)\n```\n\n**Returns**\n\nBenchmark \"CSV\" took 42 seconds\n",
            "detail": "format(format, parameters...)"
        }
    },
    "format_bytes": {
        "documentation": {
            "documentation": "**String function**: Converts bytes to a human-readable presentation (e.g. 16000 -> 16KB)\n\n**Example**\n\n```sql\nformat_bytes(1000 * 16)\n```\n\n**Returns**\n\n16KB\n",
            "detail": "format_bytes(bytes)"
        },
        "docstring": {
            "documentation": "**String function**: Converts bytes to a human-readable presentation (e.g. 16000 -> 16KB)\n\n**Example**\n\n```sql\nformat_bytes(1000 * 16)\n```\n\n**Returns**\n\n16KB\n",
            "detail": "format_bytes(bytes)"
        }
    },
    "from_base64": {
        "documentation": {
            "documentation": "**Blob function**: Convert a base64 encoded string to a character string.\n\n**Example**\n\n```sql\nfrom_base64('QQ==')\n```\n\n**Returns**\n\nA\n",
            "detail": "from_base64(string)"
        },
        "docstring": {
            "documentation": "**Blob function**: Convert a base64 encoded string to a character string.\n\n**Example**\n\n```sql\nfrom_base64('QQ==')\n```\n\n**Returns**\n\nA\n",
            "detail": "from_base64(string)"
        }
    },
    "gamma": {
        "documentation": {
            "documentation": "**Math function**: interpolation of (x-1) factorial (so decimal inputs are allowed)\n\n**Example**\n\n```sql\ngamma(5.5)\n```\n\n**Returns**\n\n52.34277778455352\n",
            "detail": "gamma(x)"
        },
        "docstring": {
            "documentation": "**Math function**: interpolation of (x-1) factorial (so decimal inputs are allowed)\n\n**Example**\n\n```sql\ngamma(5.5)\n```\n\n**Returns**\n\n52.34277778455352\n",
            "detail": "gamma(x)"
        }
    },
    "generate_series": {
        "documentation": {
            "documentation": "**List function**: Create a list of values between start and stop - the stop parameter is inclusive\n\n**Example**\n\n```sql\ngenerate_series(2, 5, 3)\n```\n\n**Returns**\n\n[2, 5]\n",
            "detail": "generate_series(start, stop, step)"
        },
        "docstring": {
            "documentation": "**List function**: Create a list of values between start and stop - the stop parameter is inclusive\n\n**Example**\n\n```sql\ngenerate_series(2, 5, 3)\n```\n\n**Returns**\n\n[2, 5]\n",
            "detail": "generate_series(start, stop, step)"
        }
    },
    "get_bit": {
        "documentation": {
            "documentation": "**Bit function**: Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0.\n\n**Example**\n\n```sql\nget_bit('0110010'::BIT, 2)\n```\n\n**Returns**\n\n1\n",
            "detail": "get_bit(bitstring, index)"
        },
        "docstring": {
            "documentation": "**Bit function**: Extracts the nth bit from bitstring; the first (leftmost) bit is indexed 0.\n\n**Example**\n\n```sql\nget_bit('0110010'::BIT, 2)\n```\n\n**Returns**\n\n1\n",
            "detail": "get_bit(bitstring, index)"
        }
    },
    "get_current_time": {
        "documentation": {
            "documentation": "**Date function**: Returns the current time\n\n**Example**\n\n```sql\nget_current_time()\n```\n\n**Returns**\n\n14:04:22.524\n",
            "detail": "get_current_time()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current time\n\n**Example**\n\n```sql\nget_current_time()\n```\n\n**Returns**\n\n14:04:22.524\n",
            "detail": "get_current_time()"
        }
    },
    "get_current_timestamp": {
        "documentation": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\nget_current_timestamp()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "get_current_timestamp()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\nget_current_timestamp()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "get_current_timestamp()"
        }
    },
    "greatest": {
        "documentation": {
            "documentation": "**Generic function**: Returns the highest value of the set of input parameters.\n\n**Example**\n\n```sql\ngreatest(42, 84)\n```\n\n**Returns**\n\n84\n",
            "detail": "greatest(arg1, arg2, ...)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the highest value of the set of input parameters.\n\n**Example**\n\n```sql\ngreatest(42, 84)\n```\n\n**Returns**\n\n84\n",
            "detail": "greatest(arg1, arg2, ...)"
        }
    },
    "greatest_common_divisor": {
        "documentation": {
            "documentation": "**Math function**: computes the greatest common divisor of x and y\n\n**Example**\n\n```sql\ngreatest_common_divisor(42, 57)\n```\n\n**Returns**\n\n3\n",
            "detail": "greatest_common_divisor(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the greatest common divisor of x and y\n\n**Example**\n\n```sql\ngreatest_common_divisor(42, 57)\n```\n\n**Returns**\n\n3\n",
            "detail": "greatest_common_divisor(x, y)"
        }
    },
    "hamming": {
        "documentation": {
            "documentation": "**String function**: The number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n**Example**\n\n```sql\nhamming('duck','luck')\n```\n\n**Returns**\n\n1\n",
            "detail": "hamming(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n**Example**\n\n```sql\nhamming('duck','luck')\n```\n\n**Returns**\n\n1\n",
            "detail": "hamming(str1, str2)"
        }
    },
    "hash": {
        "documentation": {
            "documentation": "**Generic function**: Returns an integer with the hash of the value. Note that this is not a cryptographic hash.\n\n**Example**\n\n```sql\nhash('\ud83e\udd86')\n```\n\n**Returns**\n\n2595805878642663834\n",
            "detail": "hash(param)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns an integer with the hash of the value. Note that this is not a cryptographic hash.\n\n**Example**\n\n```sql\nhash('\ud83e\udd86')\n```\n\n**Returns**\n\n2595805878642663834\n",
            "detail": "hash(param)"
        }
    },
    "hex": {
        "documentation": {
            "documentation": "**String function**: Converts the value to hexadecimal representation\n\n**Example**\n\n```sql\nhex(42)\n```\n\n**Returns**\n\n2A\n",
            "detail": "hex(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts the value to hexadecimal representation\n\n**Example**\n\n```sql\nhex(42)\n```\n\n**Returns**\n\n2A\n",
            "detail": "hex(value)"
        }
    },
    "histogram": {
        "documentation": {
            "documentation": "**Nested function**: Returns a LIST of STRUCTs with the fields bucket and count.\n\n**Example**\n\n```sql\nhistogram(A)\n```\n\n",
            "detail": "histogram(arg)"
        },
        "docstring": {
            "documentation": "**Nested function**: Returns a LIST of STRUCTs with the fields bucket and count.\n\n**Example**\n\n```sql\nhistogram(A)\n```\n\n",
            "detail": "histogram(arg)"
        }
    },
    "hour": {
        "documentation": {
            "documentation": "**Date function**: Extract the hour component from a date or timestamp\n\n**Example**\n\n```sql\nhour(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n11\n",
            "detail": "hour(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the hour component from a date or timestamp\n\n**Example**\n\n```sql\nhour(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n11\n",
            "detail": "hour(ts)"
        }
    },
    "in_search_path": {
        "documentation": {
            "documentation": "**Generic function**: Returns whether or not the database/schema are in the search path.\n\n**Example**\n\n```sql\nin_search_path('memory', 'main')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "in_search_path(database_name, schema_name)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns whether or not the database/schema are in the search path.\n\n**Example**\n\n```sql\nin_search_path('memory', 'main')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "in_search_path(database_name, schema_name)"
        }
    },
    "instr": {
        "documentation": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\ninstr('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "instr(haystack, needle)"
        },
        "docstring": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\ninstr('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "instr(haystack, needle)"
        }
    },
    "isfinite": {
        "documentation": {
            "documentation": "**Math function**: Returns true if the floating point value is finite, false otherwise\n\n**Example**\n\n```sql\nisfinite(5.5)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isfinite(x)"
        },
        "docstring": {
            "documentation": "**Math function**: Returns true if the floating point value is finite, false otherwise\n\n**Example**\n\n```sql\nisfinite(5.5)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isfinite(x)"
        }
    },
    "isinf": {
        "documentation": {
            "documentation": "**Math function**: Returns true if the floating point value is infinite, false otherwise\n\n**Example**\n\n```sql\nisinf('Infinity'::float)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isinf(x)"
        },
        "docstring": {
            "documentation": "**Math function**: Returns true if the floating point value is infinite, false otherwise\n\n**Example**\n\n```sql\nisinf('Infinity'::float)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isinf(x)"
        }
    },
    "isnan": {
        "documentation": {
            "documentation": "**Math function**: Returns true if the floating point value is not a number, false otherwise\n\n**Example**\n\n```sql\nisnan('NaN'::FLOAT)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isnan(x)"
        },
        "docstring": {
            "documentation": "**Math function**: Returns true if the floating point value is not a number, false otherwise\n\n**Example**\n\n```sql\nisnan('NaN'::FLOAT)\n```\n\n**Returns**\n\nTrue\n",
            "detail": "isnan(x)"
        }
    },
    "isodow": {
        "documentation": {
            "documentation": "**Date function**: Extract the isodow component from a date or timestamp\n\n**Example**\n\n```sql\nisodow(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "isodow(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the isodow component from a date or timestamp\n\n**Example**\n\n```sql\nisodow(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "isodow(ts)"
        }
    },
    "isoyear": {
        "documentation": {
            "documentation": "**Date function**: Extract the isoyear component from a date or timestamp\n\n**Example**\n\n```sql\nisoyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2021\n",
            "detail": "isoyear(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the isoyear component from a date or timestamp\n\n**Example**\n\n```sql\nisoyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2021\n",
            "detail": "isoyear(ts)"
        }
    },
    "jaccard": {
        "documentation": {
            "documentation": "**String function**: The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaccard('duck','luck')\n```\n\n**Returns**\n\n0.6\n",
            "detail": "jaccard(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaccard('duck','luck')\n```\n\n**Returns**\n\n0.6\n",
            "detail": "jaccard(str1, str2)"
        }
    },
    "jaro_similarity": {
        "documentation": {
            "documentation": "**String function**: The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaro_similarity('duck','duckdb')\n```\n\n**Returns**\n\n0.8888888888888888\n",
            "detail": "jaro_similarity(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaro_similarity('duck','duckdb')\n```\n\n**Returns**\n\n0.8888888888888888\n",
            "detail": "jaro_similarity(str1, str2)"
        }
    },
    "jaro_winkler_similarity": {
        "documentation": {
            "documentation": "**String function**: The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaro_winkler_similarity('duck','duckdb')\n```\n\n**Returns**\n\n0.9333333333333333\n",
            "detail": "jaro_winkler_similarity(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n**Example**\n\n```sql\njaro_winkler_similarity('duck','duckdb')\n```\n\n**Returns**\n\n0.9333333333333333\n",
            "detail": "jaro_winkler_similarity(str1, str2)"
        }
    },
    "julian": {
        "documentation": {
            "documentation": "**Date function**: Extract the Julian Day number from a date or timestamp\n\n**Example**\n\n```sql\njulian(timestamp '2006-01-01 12:00')\n```\n\n",
            "detail": "julian(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the Julian Day number from a date or timestamp\n\n**Example**\n\n```sql\njulian(timestamp '2006-01-01 12:00')\n```\n\n",
            "detail": "julian(ts)"
        }
    },
    "kahan_sum": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nkahan_sum(A)\n```\n\n",
            "detail": "kahan_sum(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nkahan_sum(A)\n```\n\n",
            "detail": "kahan_sum(arg)"
        }
    },
    "kurtosis": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the excess kurtosis (Fisher\u2019s definition) of all input values, with a bias correction according to the sample size\n\n",
            "detail": "kurtosis(x)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the excess kurtosis (Fisher\u2019s definition) of all input values, with a bias correction according to the sample size\n\n",
            "detail": "kurtosis(x)"
        }
    },
    "last_day": {
        "documentation": {
            "documentation": "**Date function**: Returns the last day of the month\n\n**Example**\n\n```sql\nlast_day(TIMESTAMP '1992-03-22 01:02:03.1234')\n```\n\n**Returns**\n\n1992-03-31\n",
            "detail": "last_day(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the last day of the month\n\n**Example**\n\n```sql\nlast_day(TIMESTAMP '1992-03-22 01:02:03.1234')\n```\n\n**Returns**\n\n1992-03-31\n",
            "detail": "last_day(ts)"
        }
    },
    "least": {
        "documentation": {
            "documentation": "**Generic function**: Returns the lowest value of the set of input parameters.\n\n**Example**\n\n```sql\nleast(42, 84)\n```\n\n**Returns**\n\n42\n",
            "detail": "least(arg1, arg2, ...)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the lowest value of the set of input parameters.\n\n**Example**\n\n```sql\nleast(42, 84)\n```\n\n**Returns**\n\n42\n",
            "detail": "least(arg1, arg2, ...)"
        }
    },
    "least_common_multiple": {
        "documentation": {
            "documentation": "**Math function**: computes the least common multiple of x and y\n\n**Example**\n\n```sql\nleast_common_multiple(42, 57)\n```\n\n**Returns**\n\n798\n",
            "detail": "least_common_multiple(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the least common multiple of x and y\n\n**Example**\n\n```sql\nleast_common_multiple(42, 57)\n```\n\n**Returns**\n\n798\n",
            "detail": "least_common_multiple(x, y)"
        }
    },
    "left": {
        "documentation": {
            "documentation": "**String function**: Extract the left-most count characters\n\n**Example**\n\n```sql\nleft('Hello\ud83e\udd86', 2)\n```\n\n**Returns**\n\nHe\n",
            "detail": "left(string, count)"
        },
        "docstring": {
            "documentation": "**String function**: Extract the left-most count characters\n\n**Example**\n\n```sql\nleft('Hello\ud83e\udd86', 2)\n```\n\n**Returns**\n\nHe\n",
            "detail": "left(string, count)"
        }
    },
    "left_grapheme": {
        "documentation": {
            "documentation": "**String function**: Extract the left-most count grapheme clusters\n\n**Example**\n\n```sql\nleft_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)\n```\n\n**Returns**\n\n\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\n",
            "detail": "left_grapheme(string, count)"
        },
        "docstring": {
            "documentation": "**String function**: Extract the left-most count grapheme clusters\n\n**Example**\n\n```sql\nleft_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)\n```\n\n**Returns**\n\n\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\n",
            "detail": "left_grapheme(string, count)"
        }
    },
    "levenshtein": {
        "documentation": {
            "documentation": "**String function**: The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n**Example**\n\n```sql\nlevenshtein('duck','db')\n```\n\n**Returns**\n\n3\n",
            "detail": "levenshtein(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n**Example**\n\n```sql\nlevenshtein('duck','db')\n```\n\n**Returns**\n\n3\n",
            "detail": "levenshtein(str1, str2)"
        }
    },
    "lgamma": {
        "documentation": {
            "documentation": "**Math function**: computes the log of the gamma function.\n\n**Example**\n\n```sql\nlgamma(2)\n```\n\n",
            "detail": "lgamma(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the log of the gamma function.\n\n**Example**\n\n```sql\nlgamma(2)\n```\n\n",
            "detail": "lgamma(x)"
        }
    },
    "list": {
        "documentation": {
            "documentation": "**Nested function**: Returns a LIST containing all the values of a column.\n\n**Example**\n\n```sql\nlist(A)\n```\n\n",
            "detail": "list(arg)"
        },
        "docstring": {
            "documentation": "**Nested function**: Returns a LIST containing all the values of a column.\n\n**Example**\n\n```sql\nlist(A)\n```\n\n",
            "detail": "list(arg)"
        }
    },
    "list_aggregate": {
        "documentation": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\nlist_aggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "list_aggregate(list, name)"
        },
        "docstring": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\nlist_aggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "list_aggregate(list, name)"
        }
    },
    "list_cosine_similarity": {
        "documentation": {
            "documentation": "**List function**: Compute the cosine similarity between two lists.\n\n**Example**\n\n```sql\nlist_cosine_similarity([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n1.0\n",
            "detail": "list_cosine_similarity(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the cosine similarity between two lists.\n\n**Example**\n\n```sql\nlist_cosine_similarity([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n1.0\n",
            "detail": "list_cosine_similarity(list1, list2)"
        }
    },
    "list_distance": {
        "documentation": {
            "documentation": "**List function**: Compute the distance between two lists.\n\n**Example**\n\n```sql\nlist_distance([1, 2, 3], [1, 2, 3])\n```\n\n",
            "detail": "list_distance(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the distance between two lists.\n\n**Example**\n\n```sql\nlist_distance([1, 2, 3], [1, 2, 3])\n```\n\n",
            "detail": "list_distance(list1, list2)"
        }
    },
    "list_distinct": {
        "documentation": {
            "documentation": "**List function**: Removes all duplicates and NULLs from a list. Does not preserve the original order.\n\n**Example**\n\n```sql\nlist_distinct([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n[5, -3, 1]\n",
            "detail": "list_distinct(list)"
        },
        "docstring": {
            "documentation": "**List function**: Removes all duplicates and NULLs from a list. Does not preserve the original order.\n\n**Example**\n\n```sql\nlist_distinct([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n[5, -3, 1]\n",
            "detail": "list_distinct(list)"
        }
    },
    "list_filter": {
        "documentation": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\nlist_filter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "list_filter(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\nlist_filter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "list_filter(list, lambda)"
        }
    },
    "list_inner_product": {
        "documentation": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\nlist_inner_product([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "list_inner_product(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\nlist_inner_product([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "list_inner_product(list1, list2)"
        }
    },
    "list_reverse_sort": {
        "documentation": {
            "documentation": "**List function**: Sorts the elements of the list in reverse order.\n\n**Example**\n\n```sql\nlist_reverse_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[6, 3, 2, 1]\n",
            "detail": "list_reverse_sort(list)"
        },
        "docstring": {
            "documentation": "**List function**: Sorts the elements of the list in reverse order.\n\n**Example**\n\n```sql\nlist_reverse_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[6, 3, 2, 1]\n",
            "detail": "list_reverse_sort(list)"
        }
    },
    "list_slice": {
        "documentation": {
            "documentation": "**List function**: Extract a sublist using slice conventions. Negative values are accepted.\n\n**Example**\n\n```sql\nlist_slice(l, 2, 4)\n```\n\n",
            "detail": "list_slice(list, begin, end[, step])"
        },
        "docstring": {
            "documentation": "**List function**: Extract a sublist using slice conventions. Negative values are accepted.\n\n**Example**\n\n```sql\nlist_slice(l, 2, 4)\n```\n\n",
            "detail": "list_slice(list, begin, end[, step])"
        }
    },
    "list_sort": {
        "documentation": {
            "documentation": "**List function**: Sorts the elements of the list.\n\n**Example**\n\n```sql\nlist_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[1, 2, 3, 6]\n",
            "detail": "list_sort(list)"
        },
        "docstring": {
            "documentation": "**List function**: Sorts the elements of the list.\n\n**Example**\n\n```sql\nlist_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[1, 2, 3, 6]\n",
            "detail": "list_sort(list)"
        }
    },
    "list_transform": {
        "documentation": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\nlist_transform([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "list_transform(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\nlist_transform([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "list_transform(list, lambda)"
        }
    },
    "list_unique": {
        "documentation": {
            "documentation": "**List function**: Counts the unique elements of a list.\n\n**Example**\n\n```sql\nlist_unique([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n3\n",
            "detail": "list_unique(list)"
        },
        "docstring": {
            "documentation": "**List function**: Counts the unique elements of a list.\n\n**Example**\n\n```sql\nlist_unique([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n3\n",
            "detail": "list_unique(list)"
        }
    },
    "list_value": {
        "documentation": {
            "documentation": "**List function**: Create a LIST containing the argument values.\n\n**Example**\n\n```sql\nlist_value(4, 5, 6)\n```\n\n**Returns**\n\n[4, 5, 6]\n",
            "detail": "list_value(any, ...)"
        },
        "docstring": {
            "documentation": "**List function**: Create a LIST containing the argument values.\n\n**Example**\n\n```sql\nlist_value(4, 5, 6)\n```\n\n**Returns**\n\n[4, 5, 6]\n",
            "detail": "list_value(any, ...)"
        }
    },
    "ln": {
        "documentation": {
            "documentation": "**Math function**: computes the natural logarithm of x\n\n**Example**\n\n```sql\nln(2)\n```\n\n**Returns**\n\n0.6931471805599453\n",
            "detail": "ln(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the natural logarithm of x\n\n**Example**\n\n```sql\nln(2)\n```\n\n**Returns**\n\n0.6931471805599453\n",
            "detail": "ln(x)"
        }
    },
    "log10": {
        "documentation": {
            "documentation": "**Math function**: computes the 10-log of x\n\n**Example**\n\n```sql\nlog10(1000)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log10(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the 10-log of x\n\n**Example**\n\n```sql\nlog10(1000)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log10(x)"
        }
    },
    "log2": {
        "documentation": {
            "documentation": "**Math function**: computes the 2-log of x\n\n**Example**\n\n```sql\nlog2(8)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log2(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the 2-log of x\n\n**Example**\n\n```sql\nlog2(8)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log2(x)"
        }
    },
    "lpad": {
        "documentation": {
            "documentation": "**String function**: Pads the string with the character from the left until it has count characters\n\n**Example**\n\n```sql\nlpad('hello', 10, '>')\n```\n\n**Returns**\n\n>>>>>hello\n",
            "detail": "lpad(string, count, character)"
        },
        "docstring": {
            "documentation": "**String function**: Pads the string with the character from the left until it has count characters\n\n**Example**\n\n```sql\nlpad('hello', 10, '>')\n```\n\n**Returns**\n\n>>>>>hello\n",
            "detail": "lpad(string, count, character)"
        }
    },
    "ltrim": {
        "documentation": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from the left side of the string\n\n**Example**\n\n```sql\nltrim('>>>>test<<', '><')\n```\n\n**Returns**\n\ntest<<\n",
            "detail": "ltrim(string, characters)"
        },
        "docstring": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from the left side of the string\n\n**Example**\n\n```sql\nltrim('>>>>test<<', '><')\n```\n\n**Returns**\n\ntest<<\n",
            "detail": "ltrim(string, characters)"
        }
    },
    "mad": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t\n\n**Example**\n\n```sql\nMEDIAN(ABS(x-MEDIAN(x)))\n```\n\n",
            "detail": "mad(x)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\t\n\n**Example**\n\n```sql\nMEDIAN(ABS(x-MEDIAN(x)))\n```\n\n",
            "detail": "mad(x)"
        }
    },
    "make_date": {
        "documentation": {
            "documentation": "**Date function**: The date for the given parts\n\n**Example**\n\n```sql\nmake_date(1992, 9, 20)\n```\n\n**Returns**\n\n1992-09-20\n",
            "detail": "make_date(year, month, day)"
        },
        "docstring": {
            "documentation": "**Date function**: The date for the given parts\n\n**Example**\n\n```sql\nmake_date(1992, 9, 20)\n```\n\n**Returns**\n\n1992-09-20\n",
            "detail": "make_date(year, month, day)"
        }
    },
    "make_time": {
        "documentation": {
            "documentation": "**Date function**: The time for the given parts\n\n**Example**\n\n```sql\nmake_time(13, 34, 27.123456)\n```\n\n**Returns**\n\n13:34:27.123456\n",
            "detail": "make_time(hour, minute, seconds)"
        },
        "docstring": {
            "documentation": "**Date function**: The time for the given parts\n\n**Example**\n\n```sql\nmake_time(13, 34, 27.123456)\n```\n\n**Returns**\n\n13:34:27.123456\n",
            "detail": "make_time(hour, minute, seconds)"
        }
    },
    "make_timestamp": {
        "documentation": {
            "documentation": "**Date function**: The timestamp for the given parts\n\n**Example**\n\n```sql\nmake_timestamp(1992, 9, 20, 13, 34, 27.123456)\n```\n\n**Returns**\n\n1992-09-20 13:34:27.123456\n",
            "detail": "make_timestamp(year, month, day, hour, minute, seconds)"
        },
        "docstring": {
            "documentation": "**Date function**: The timestamp for the given parts\n\n**Example**\n\n```sql\nmake_timestamp(1992, 9, 20, 13, 34, 27.123456)\n```\n\n**Returns**\n\n1992-09-20 13:34:27.123456\n",
            "detail": "make_timestamp(year, month, day, hour, minute, seconds)"
        }
    },
    "map": {
        "documentation": {
            "documentation": "**Map function**: Creates a map from a set of keys and values.\n\n**Example**\n\n```sql\nmap(['key1', 'key2'], ['val1', 'val2'])\n```\n\n**Returns**\n\n{key1=val1, key2=val2}\n",
            "detail": "map(keys, values)"
        },
        "docstring": {
            "documentation": "**Map function**: Creates a map from a set of keys and values.\n\n**Example**\n\n```sql\nmap(['key1', 'key2'], ['val1', 'val2'])\n```\n\n**Returns**\n\n{key1=val1, key2=val2}\n",
            "detail": "map(keys, values)"
        }
    },
    "map_concat": {
        "documentation": {
            "documentation": "**Map function**: Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key\n\n**Example**\n\n```sql\nmap_concat(map([1,2], ['a', 'b']), map([2,3], ['c', 'd']));\n```\n\n**Returns**\n\n{1=a, 2=c, 3=d}\n",
            "detail": "map_concat(any, ...)"
        },
        "docstring": {
            "documentation": "**Map function**: Returns a map created from merging the input maps, on key collision the value is taken from the last map with that key\n\n**Example**\n\n```sql\nmap_concat(map([1,2], ['a', 'b']), map([2,3], ['c', 'd']));\n```\n\n**Returns**\n\n{1=a, 2=c, 3=d}\n",
            "detail": "map_concat(any, ...)"
        }
    },
    "map_entries": {
        "documentation": {
            "documentation": "**Map function**: Returns the map entries as a list of keys/values\n\n**Example**\n\n```sql\nmap_entries(map(['key'], ['val']))\n```\n\n**Returns**\n\n[{'key': key, 'value': val}]\n",
            "detail": "map_entries(map)"
        },
        "docstring": {
            "documentation": "**Map function**: Returns the map entries as a list of keys/values\n\n**Example**\n\n```sql\nmap_entries(map(['key'], ['val']))\n```\n\n**Returns**\n\n[{'key': key, 'value': val}]\n",
            "detail": "map_entries(map)"
        }
    },
    "map_extract": {
        "documentation": {
            "documentation": "**Map function**: Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is returned.\n\n**Example**\n\n```sql\nmap_extract(map(['key'], ['val']), 'key')\n```\n\n**Returns**\n\n[val]\n",
            "detail": "map_extract(map, key)"
        },
        "docstring": {
            "documentation": "**Map function**: Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is returned.\n\n**Example**\n\n```sql\nmap_extract(map(['key'], ['val']), 'key')\n```\n\n**Returns**\n\n[val]\n",
            "detail": "map_extract(map, key)"
        }
    },
    "map_from_entries": {
        "documentation": {
            "documentation": "**Map function**: Returns a map created from the entries of the array\n\n**Example**\n\n```sql\nmap_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}]);\n```\n\n**Returns**\n\n{5=val1, 3=val2}\n",
            "detail": "map_from_entries(map)"
        },
        "docstring": {
            "documentation": "**Map function**: Returns a map created from the entries of the array\n\n**Example**\n\n```sql\nmap_from_entries([{k: 5, v: 'val1'}, {k: 3, v: 'val2'}]);\n```\n\n**Returns**\n\n{5=val1, 3=val2}\n",
            "detail": "map_from_entries(map)"
        }
    },
    "map_keys": {
        "documentation": {
            "documentation": "**Map function**: Returns the keys of a map as a list\n\n**Example**\n\n```sql\nmap_keys(map(['key'], ['val']))\n```\n\n**Returns**\n\n[key]\n",
            "detail": "map_keys(map)"
        },
        "docstring": {
            "documentation": "**Map function**: Returns the keys of a map as a list\n\n**Example**\n\n```sql\nmap_keys(map(['key'], ['val']))\n```\n\n**Returns**\n\n[key]\n",
            "detail": "map_keys(map)"
        }
    },
    "map_values": {
        "documentation": {
            "documentation": "**Map function**: Returns the values of a map as a list\n\n**Example**\n\n```sql\nmap_values(map(['key'], ['val']))\n```\n\n**Returns**\n\n[val]\n",
            "detail": "map_values(map)"
        },
        "docstring": {
            "documentation": "**Map function**: Returns the values of a map as a list\n\n**Example**\n\n```sql\nmap_values(map(['key'], ['val']))\n```\n\n**Returns**\n\n[val]\n",
            "detail": "map_values(map)"
        }
    },
    "max": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the maximum value present in arg.\n\n**Example**\n\n```sql\nmax(A)\n```\n\n",
            "detail": "max(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the maximum value present in arg.\n\n**Example**\n\n```sql\nmax(A)\n```\n\n",
            "detail": "max(arg)"
        }
    },
    "md5": {
        "documentation": {
            "documentation": "**String function**: Returns the MD5 hash of the value as a string\n\n**Example**\n\n```sql\nmd5('123')\n```\n\n**Returns**\n\n202cb962ac59075b964b07152d234b70\n",
            "detail": "md5(value)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the MD5 hash of the value as a string\n\n**Example**\n\n```sql\nmd5('123')\n```\n\n**Returns**\n\n202cb962ac59075b964b07152d234b70\n",
            "detail": "md5(value)"
        }
    },
    "md5_number": {
        "documentation": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number('123')\n```\n\n**Returns**\n\n149263671248412135425768892945843956768\n",
            "detail": "md5_number(value)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number('123')\n```\n\n**Returns**\n\n149263671248412135425768892945843956768\n",
            "detail": "md5_number(value)"
        }
    },
    "md5_number_lower": {
        "documentation": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number_lower('123')\n```\n\n**Returns**\n\n8091599832034528150\n",
            "detail": "md5_number_lower(value)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number_lower('123')\n```\n\n**Returns**\n\n8091599832034528150\n",
            "detail": "md5_number_lower(value)"
        }
    },
    "md5_number_upper": {
        "documentation": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number_upper('123')\n```\n\n**Returns**\n\n6559309979213966368\n",
            "detail": "md5_number_upper(value)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the MD5 hash of the value as an INT128\n\n**Example**\n\n```sql\nmd5_number_upper('123')\n```\n\n**Returns**\n\n6559309979213966368\n",
            "detail": "md5_number_upper(value)"
        }
    },
    "median": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.\n\n**Example**\n\n```sql\nQUANTILE_CONT(x, 0.5)\n```\n\n",
            "detail": "median(x)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.\n\n**Example**\n\n```sql\nQUANTILE_CONT(x, 0.5)\n```\n\n",
            "detail": "median(x)"
        }
    },
    "microsecond": {
        "documentation": {
            "documentation": "**Date function**: Extract the microsecond component from a date or timestamp\n\n**Example**\n\n```sql\nmicrosecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44123456\n",
            "detail": "microsecond(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the microsecond component from a date or timestamp\n\n**Example**\n\n```sql\nmicrosecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44123456\n",
            "detail": "microsecond(ts)"
        }
    },
    "millennium": {
        "documentation": {
            "documentation": "**Date function**: Extract the millennium component from a date or timestamp\n\n**Example**\n\n```sql\nmillennium(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "millennium(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the millennium component from a date or timestamp\n\n**Example**\n\n```sql\nmillennium(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "millennium(ts)"
        }
    },
    "millisecond": {
        "documentation": {
            "documentation": "**Date function**: Extract the millisecond component from a date or timestamp\n\n**Example**\n\n```sql\nmillisecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44123\n",
            "detail": "millisecond(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the millisecond component from a date or timestamp\n\n**Example**\n\n```sql\nmillisecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44123\n",
            "detail": "millisecond(ts)"
        }
    },
    "min": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the minimum value present in arg.\n\n**Example**\n\n```sql\nmin(A)\n```\n\n",
            "detail": "min(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the minimum value present in arg.\n\n**Example**\n\n```sql\nmin(A)\n```\n\n",
            "detail": "min(arg)"
        }
    },
    "minute": {
        "documentation": {
            "documentation": "**Date function**: Extract the minute component from a date or timestamp\n\n**Example**\n\n```sql\nminute(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n59\n",
            "detail": "minute(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the minute component from a date or timestamp\n\n**Example**\n\n```sql\nminute(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n59\n",
            "detail": "minute(ts)"
        }
    },
    "mode": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the most frequent value for the values within x. NULL values are ignored.\n\n",
            "detail": "mode(x)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the most frequent value for the values within x. NULL values are ignored.\n\n",
            "detail": "mode(x)"
        }
    },
    "month": {
        "documentation": {
            "documentation": "**Date function**: Extract the month component from a date or timestamp\n\n**Example**\n\n```sql\nmonth(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n8\n",
            "detail": "month(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the month component from a date or timestamp\n\n**Example**\n\n```sql\nmonth(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n8\n",
            "detail": "month(ts)"
        }
    },
    "monthname": {
        "documentation": {
            "documentation": "**Date function**: The (English) name of the month.\n\n**Example**\n\n```sql\nmonthname(TIMESTAMP '1992-09-20')\n```\n\n**Returns**\n\nSeptember\n",
            "detail": "monthname(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: The (English) name of the month.\n\n**Example**\n\n```sql\nmonthname(TIMESTAMP '1992-09-20')\n```\n\n**Returns**\n\nSeptember\n",
            "detail": "monthname(ts)"
        }
    },
    "nextafter": {
        "documentation": {
            "documentation": "**Math function**: return the next floating point value after x in the direction of y\n\n**Example**\n\n```sql\nnextafter(1::float, 2::float)\n```\n\n**Returns**\n\n1.0000001192092896\n",
            "detail": "nextafter(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: return the next floating point value after x in the direction of y\n\n**Example**\n\n```sql\nnextafter(1::float, 2::float)\n```\n\n**Returns**\n\n1.0000001192092896\n",
            "detail": "nextafter(x, y)"
        }
    },
    "pi": {
        "documentation": {
            "documentation": "**Math function**: returns the value of pi\n\n**Example**\n\n```sql\npi()\n```\n\n**Returns**\n\n3.141592653589793\n",
            "detail": "pi()"
        },
        "docstring": {
            "documentation": "**Math function**: returns the value of pi\n\n**Example**\n\n```sql\npi()\n```\n\n**Returns**\n\n3.141592653589793\n",
            "detail": "pi()"
        }
    },
    "printf": {
        "documentation": {
            "documentation": "**String function**: Formats a string using printf syntax\n\n**Example**\n\n```sql\nprintf('Benchmark \"%s\" took %d seconds', 'CSV', 42)\n```\n\n**Returns**\n\nBenchmark \"CSV\" took 42 seconds\n",
            "detail": "printf(format, parameters...)"
        },
        "docstring": {
            "documentation": "**String function**: Formats a string using printf syntax\n\n**Example**\n\n```sql\nprintf('Benchmark \"%s\" took %d seconds', 'CSV', 42)\n```\n\n**Returns**\n\nBenchmark \"CSV\" took 42 seconds\n",
            "detail": "printf(format, parameters...)"
        }
    },
    "product": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the product of all tuples in arg.\n\n**Example**\n\n```sql\nproduct(A)\n```\n\n",
            "detail": "product(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the product of all tuples in arg.\n\n**Example**\n\n```sql\nproduct(A)\n```\n\n",
            "detail": "product(arg)"
        }
    },
    "quantile_cont": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t\n\n",
            "detail": "quantile_cont(x, pos)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\t\n\n",
            "detail": "quantile_cont(x, pos)"
        }
    },
    "quantile_disc": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n",
            "detail": "quantile_disc(x, pos)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n",
            "detail": "quantile_disc(x, pos)"
        }
    },
    "quarter": {
        "documentation": {
            "documentation": "**Date function**: Extract the quarter component from a date or timestamp\n\n**Example**\n\n```sql\nquarter(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "quarter(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the quarter component from a date or timestamp\n\n**Example**\n\n```sql\nquarter(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n3\n",
            "detail": "quarter(ts)"
        }
    },
    "radians": {
        "documentation": {
            "documentation": "**Math function**: converts degrees to radians\n\n**Example**\n\n```sql\nradians(90)\n```\n\n**Returns**\n\n1.5707963267948966\n",
            "detail": "radians(x)"
        },
        "docstring": {
            "documentation": "**Math function**: converts degrees to radians\n\n**Example**\n\n```sql\nradians(90)\n```\n\n**Returns**\n\n1.5707963267948966\n",
            "detail": "radians(x)"
        }
    },
    "random": {
        "documentation": {
            "documentation": "**Random function**: returns a random number between 0 and 1\n\n**Example**\n\n```sql\nrandom()\n```\n\n**Returns**\n\n0.4729174713138491\n",
            "detail": "random()"
        },
        "docstring": {
            "documentation": "**Random function**: returns a random number between 0 and 1\n\n**Example**\n\n```sql\nrandom()\n```\n\n**Returns**\n\n0.4729174713138491\n",
            "detail": "random()"
        }
    },
    "range": {
        "documentation": {
            "documentation": "**List function**: Create a list of values between start and stop - the stop parameter is exclusive\n\n**Example**\n\n```sql\nrange(2, 5, 3)\n```\n\n**Returns**\n\n[2]\n",
            "detail": "range(start, stop, step)"
        },
        "docstring": {
            "documentation": "**List function**: Create a list of values between start and stop - the stop parameter is exclusive\n\n**Example**\n\n```sql\nrange(2, 5, 3)\n```\n\n**Returns**\n\n[2]\n",
            "detail": "range(start, stop, step)"
        }
    },
    "regr_avgx": {
        "documentation": {
            "documentation": "**Regression function**: Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n",
            "detail": "regr_avgx(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n",
            "detail": "regr_avgx(y, x)"
        }
    },
    "regr_avgy": {
        "documentation": {
            "documentation": "**Regression function**: Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n",
            "detail": "regr_avgy(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n",
            "detail": "regr_avgy(y, x)"
        }
    },
    "regr_count": {
        "documentation": {
            "documentation": "**Regression function**: Returns the number of non-null number pairs in a group.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)\n```\n\n",
            "detail": "regr_count(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the number of non-null number pairs in a group.\n\n**Example**\n\n```sql\n(SUM(x*y) - SUM(x) * SUM(y) / COUNT(*)) / COUNT(*)\n```\n\n",
            "detail": "regr_count(y, x)"
        }
    },
    "regr_intercept": {
        "documentation": {
            "documentation": "**Regression function**: Returns the intercept of the univariate linear regression line for non-null pairs in a group.\n\n**Example**\n\n```sql\nAVG(y)-REGR_SLOPE(y,x)*AVG(x)\n```\n\n",
            "detail": "regr_intercept(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the intercept of the univariate linear regression line for non-null pairs in a group.\n\n**Example**\n\n```sql\nAVG(y)-REGR_SLOPE(y,x)*AVG(x)\n```\n\n",
            "detail": "regr_intercept(y, x)"
        }
    },
    "regr_r2": {
        "documentation": {
            "documentation": "**Regression function**: Returns the coefficient of determination for non-null pairs in a group.\n\n",
            "detail": "regr_r2(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the coefficient of determination for non-null pairs in a group.\n\n",
            "detail": "regr_r2(y, x)"
        }
    },
    "regr_slope": {
        "documentation": {
            "documentation": "**Regression function**: Returns the slope of the linear regression line for non-null pairs in a group.\n\n**Example**\n\n```sql\nCOVAR_POP(x,y) / VAR_POP(x)\n```\n\n",
            "detail": "regr_slope(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the slope of the linear regression line for non-null pairs in a group.\n\n**Example**\n\n```sql\nCOVAR_POP(x,y) / VAR_POP(x)\n```\n\n",
            "detail": "regr_slope(y, x)"
        }
    },
    "regr_sxx": {
        "documentation": {
            "documentation": "**Regression function**: **Example**\n\n```sql\nREGR_COUNT(y, x) * VAR_POP(x)\n```\n\n",
            "detail": "regr_sxx(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: **Example**\n\n```sql\nREGR_COUNT(y, x) * VAR_POP(x)\n```\n\n",
            "detail": "regr_sxx(y, x)"
        }
    },
    "regr_sxy": {
        "documentation": {
            "documentation": "**Regression function**: Returns the population covariance of input values\n\n**Example**\n\n```sql\nREGR_COUNT(y, x) * COVAR_POP(y, x)\n```\n\n",
            "detail": "regr_sxy(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: Returns the population covariance of input values\n\n**Example**\n\n```sql\nREGR_COUNT(y, x) * COVAR_POP(y, x)\n```\n\n",
            "detail": "regr_sxy(y, x)"
        }
    },
    "regr_syy": {
        "documentation": {
            "documentation": "**Regression function**: **Example**\n\n```sql\nREGR_COUNT(y, x) * VAR_POP(y)\n```\n\n",
            "detail": "regr_syy(y, x)"
        },
        "docstring": {
            "documentation": "**Regression function**: **Example**\n\n```sql\nREGR_COUNT(y, x) * VAR_POP(y)\n```\n\n",
            "detail": "regr_syy(y, x)"
        }
    },
    "repeat": {
        "documentation": {
            "documentation": "**String function**: Repeats the string count number of times\n\n**Example**\n\n```sql\nrepeat('A', 5)\n```\n\n**Returns**\n\nAAAAA\n",
            "detail": "repeat(string, count)"
        },
        "docstring": {
            "documentation": "**String function**: Repeats the string count number of times\n\n**Example**\n\n```sql\nrepeat('A', 5)\n```\n\n**Returns**\n\nAAAAA\n",
            "detail": "repeat(string, count)"
        }
    },
    "replace": {
        "documentation": {
            "documentation": "**String function**: Replaces any occurrences of the source with target in string\n\n**Example**\n\n```sql\nreplace('hello', 'l', '-')\n```\n\n**Returns**\n\nhe--o\n",
            "detail": "replace(string, source, target)"
        },
        "docstring": {
            "documentation": "**String function**: Replaces any occurrences of the source with target in string\n\n**Example**\n\n```sql\nreplace('hello', 'l', '-')\n```\n\n**Returns**\n\nhe--o\n",
            "detail": "replace(string, source, target)"
        }
    },
    "reservoir_quantile": {
        "documentation": {
            "documentation": "**Holistic function**: Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.\n\n**Example**\n\n```sql\nreservoir_quantile(A,0.5,1024)\n```\n\n",
            "detail": "reservoir_quantile(x, quantile, sample_size)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.\n\n**Example**\n\n```sql\nreservoir_quantile(A,0.5,1024)\n```\n\n",
            "detail": "reservoir_quantile(x, quantile, sample_size)"
        }
    },
    "reverse": {
        "documentation": {
            "documentation": "**String function**: Reverses the string\n\n**Example**\n\n```sql\nreverse('hello')\n```\n\n**Returns**\n\nolleh\n",
            "detail": "reverse(string)"
        },
        "docstring": {
            "documentation": "**String function**: Reverses the string\n\n**Example**\n\n```sql\nreverse('hello')\n```\n\n**Returns**\n\nolleh\n",
            "detail": "reverse(string)"
        }
    },
    "right": {
        "documentation": {
            "documentation": "**String function**: Extract the right-most count characters\n\n**Example**\n\n```sql\nright('Hello\ud83e\udd86', 3)\n```\n\n**Returns**\n\nlo\ud83e\udd86\n",
            "detail": "right(string, count)"
        },
        "docstring": {
            "documentation": "**String function**: Extract the right-most count characters\n\n**Example**\n\n```sql\nright('Hello\ud83e\udd86', 3)\n```\n\n**Returns**\n\nlo\ud83e\udd86\n",
            "detail": "right(string, count)"
        }
    },
    "right_grapheme": {
        "documentation": {
            "documentation": "**String function**: Extract the right-most count grapheme clusters\n\n**Example**\n\n```sql\nright_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)\n```\n\n**Returns**\n\n\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f\n",
            "detail": "right_grapheme(string, count)"
        },
        "docstring": {
            "documentation": "**String function**: Extract the right-most count grapheme clusters\n\n**Example**\n\n```sql\nright_grapheme('\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', 1)\n```\n\n**Returns**\n\n\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f\n",
            "detail": "right_grapheme(string, count)"
        }
    },
    "round": {
        "documentation": {
            "documentation": "**Math function**: round to s decimal places\n\n**Example**\n\n```sql\nround(42.4332, 2)\n```\n\n**Returns**\n\n42.43\n",
            "detail": "round(x, precision)"
        },
        "docstring": {
            "documentation": "**Math function**: round to s decimal places\n\n**Example**\n\n```sql\nround(42.4332, 2)\n```\n\n**Returns**\n\n42.43\n",
            "detail": "round(x, precision)"
        }
    },
    "rpad": {
        "documentation": {
            "documentation": "**String function**: Pads the string with the character from the right until it has count characters\n\n**Example**\n\n```sql\nrpad('hello', 10, '<')\n```\n\n**Returns**\n\nhello<<<<<\n",
            "detail": "rpad(string, count, character)"
        },
        "docstring": {
            "documentation": "**String function**: Pads the string with the character from the right until it has count characters\n\n**Example**\n\n```sql\nrpad('hello', 10, '<')\n```\n\n**Returns**\n\nhello<<<<<\n",
            "detail": "rpad(string, count, character)"
        }
    },
    "rtrim": {
        "documentation": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from the right side of the string\n\n**Example**\n\n```sql\nrtrim('>>>>test<<', '><')\n```\n\n**Returns**\n\n>>>>test\n",
            "detail": "rtrim(string, characters)"
        },
        "docstring": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from the right side of the string\n\n**Example**\n\n```sql\nrtrim('>>>>test<<', '><')\n```\n\n**Returns**\n\n>>>>test\n",
            "detail": "rtrim(string, characters)"
        }
    },
    "second": {
        "documentation": {
            "documentation": "**Date function**: Extract the second component from a date or timestamp\n\n**Example**\n\n```sql\nsecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44\n",
            "detail": "second(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the second component from a date or timestamp\n\n**Example**\n\n```sql\nsecond(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n44\n",
            "detail": "second(ts)"
        }
    },
    "sem": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the standard error of the mean\n\n",
            "detail": "sem(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the standard error of the mean\n\n",
            "detail": "sem(x)"
        }
    },
    "set_bit": {
        "documentation": {
            "documentation": "**Bit function**: Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring.\n\n**Example**\n\n```sql\nset_bit('0110010'::BIT, 2, 0)\n```\n\n**Returns**\n\n0100010\n",
            "detail": "set_bit(bitstring, index, new_value)"
        },
        "docstring": {
            "documentation": "**Bit function**: Sets the nth bit in bitstring to newvalue; the first (leftmost) bit is indexed 0. Returns a new bitstring.\n\n**Example**\n\n```sql\nset_bit('0110010'::BIT, 2, 0)\n```\n\n**Returns**\n\n0100010\n",
            "detail": "set_bit(bitstring, index, new_value)"
        }
    },
    "setseed": {
        "documentation": {
            "documentation": "**Random function**: sets the seed to be used for the random function\n\n**Example**\n\n```sql\nsetseed(0.42)\n```\n\n",
            "detail": "setseed()"
        },
        "docstring": {
            "documentation": "**Random function**: sets the seed to be used for the random function\n\n**Example**\n\n```sql\nsetseed(0.42)\n```\n\n",
            "detail": "setseed()"
        }
    },
    "sha256": {
        "documentation": {
            "documentation": "**String function**: Returns the SHA256 hash of the value\n\n**Example**\n\n```sql\nsha256('hello')\n```\n\n**Returns**\n\n2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\n",
            "detail": "sha256(value)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the SHA256 hash of the value\n\n**Example**\n\n```sql\nsha256('hello')\n```\n\n**Returns**\n\n2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\n",
            "detail": "sha256(value)"
        }
    },
    "sign": {
        "documentation": {
            "documentation": "**Math function**: returns the sign of x as -1, 0 or 1\n\n**Example**\n\n```sql\nsign(-349)\n```\n\n**Returns**\n\n-1\n",
            "detail": "sign(x)"
        },
        "docstring": {
            "documentation": "**Math function**: returns the sign of x as -1, 0 or 1\n\n**Example**\n\n```sql\nsign(-349)\n```\n\n**Returns**\n\n-1\n",
            "detail": "sign(x)"
        }
    },
    "signbit": {
        "documentation": {
            "documentation": "**Math function**: returns whether the signbit is set or not\n\n**Example**\n\n```sql\nsignbit(-0.0)\n```\n\n",
            "detail": "signbit(x)"
        },
        "docstring": {
            "documentation": "**Math function**: returns whether the signbit is set or not\n\n**Example**\n\n```sql\nsignbit(-0.0)\n```\n\n",
            "detail": "signbit(x)"
        }
    },
    "sin": {
        "documentation": {
            "documentation": "**Math function**: computes the sin of x\n\n**Example**\n\n```sql\nsin(90)\n```\n\n**Returns**\n\n0.8939966636005579\n",
            "detail": "sin(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the sin of x\n\n**Example**\n\n```sql\nsin(90)\n```\n\n**Returns**\n\n0.8939966636005579\n",
            "detail": "sin(x)"
        }
    },
    "skewness": {
        "documentation": {
            "documentation": "**Distributive function**: Returns the skewness of all input values.\n\n**Example**\n\n```sql\nskewness(A)\n```\n\n",
            "detail": "skewness(x)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Returns the skewness of all input values.\n\n**Example**\n\n```sql\nskewness(A)\n```\n\n",
            "detail": "skewness(x)"
        }
    },
    "sqrt": {
        "documentation": {
            "documentation": "**Math function**: returns the square root of x\n\n**Example**\n\n```sql\nsqrt(4)\n```\n\n**Returns**\n\n2.0\n",
            "detail": "sqrt(x)"
        },
        "docstring": {
            "documentation": "**Math function**: returns the square root of x\n\n**Example**\n\n```sql\nsqrt(4)\n```\n\n**Returns**\n\n2.0\n",
            "detail": "sqrt(x)"
        }
    },
    "stats": {
        "documentation": {
            "documentation": "**Generic function**: Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression.\n\n**Example**\n\n```sql\nstats(5)\n```\n\n**Returns**\n\n[Min: 5, Max: 5][Has Null: false, Has No Null: true][Approx Unique: 1]\n",
            "detail": "stats(expression)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns a string with statistics about the expression. Expression can be a column, constant, or SQL expression.\n\n**Example**\n\n```sql\nstats(5)\n```\n\n**Returns**\n\n[Min: 5, Max: 5][Has Null: false, Has No Null: true][Approx Unique: 1]\n",
            "detail": "stats(expression)"
        }
    },
    "stddev_pop": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the population standard deviation.\n\n**Example**\n\n```sql\nsqrt(var_pop(x))\n```\n\n",
            "detail": "stddev_pop(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the population standard deviation.\n\n**Example**\n\n```sql\nsqrt(var_pop(x))\n```\n\n",
            "detail": "stddev_pop(x)"
        }
    },
    "stddev_samp": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the sample standard deviation\n\n**Example**\n\n```sql\nsqrt(var_samp(x))\n```\n\n",
            "detail": "stddev_samp(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the sample standard deviation\n\n**Example**\n\n```sql\nsqrt(var_samp(x))\n```\n\n",
            "detail": "stddev_samp(x)"
        }
    },
    "strftime": {
        "documentation": {
            "documentation": "**Date function**: Converts timestamp to string according to the format string\n\n**Example**\n\n```sql\nstrftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')\n```\n\n**Returns**\n\nWed, 1 January 1992 - 08:38:40 PM\n",
            "detail": "strftime(text, format)"
        },
        "docstring": {
            "documentation": "**Date function**: Converts timestamp to string according to the format string\n\n**Example**\n\n```sql\nstrftime(timestamp '1992-01-01 20:38:40', '%a, %-d %B %Y - %I:%M:%S %p')\n```\n\n**Returns**\n\nWed, 1 January 1992 - 08:38:40 PM\n",
            "detail": "strftime(text, format)"
        }
    },
    "string_agg": {
        "documentation": {
            "documentation": "**Distributive function**: Concatenates the column string values with an optional separator.\n\n**Example**\n\n```sql\nstring_agg(A, '-')\n```\n\n",
            "detail": "string_agg(str, arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Concatenates the column string values with an optional separator.\n\n**Example**\n\n```sql\nstring_agg(A, '-')\n```\n\n",
            "detail": "string_agg(str, arg)"
        }
    },
    "string_split": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstring_split('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "string_split(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstring_split('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "string_split(string, separator)"
        }
    },
    "string_split_regex": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nstring_split_regex('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "string_split_regex(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nstring_split_regex('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "string_split_regex(string, separator)"
        }
    },
    "strptime": {
        "documentation": {
            "documentation": "**Date function**: Converts string to timestamp with time zone according to the format string if %Z is specified.\n\n**Example**\n\n```sql\nstrptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')\n```\n\n**Returns**\n\n1992-01-01 16:38:40+00\n",
            "detail": "strptime(text, format)"
        },
        "docstring": {
            "documentation": "**Date function**: Converts string to timestamp with time zone according to the format string if %Z is specified.\n\n**Example**\n\n```sql\nstrptime('Wed, 1 January 1992 - 08:38:40 PST', '%a, %-d %B %Y - %H:%M:%S %Z')\n```\n\n**Returns**\n\n1992-01-01 16:38:40+00\n",
            "detail": "strptime(text, format)"
        }
    },
    "struct_insert": {
        "documentation": {
            "documentation": "**Struct function**: Add field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s).\n\n**Example**\n\n```sql\nstruct_insert({'a': 1}, b := 2)\n```\n\n**Returns**\n\n{'a': 1, 'b': 2}\n",
            "detail": "struct_insert(struct, any)"
        },
        "docstring": {
            "documentation": "**Struct function**: Add field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s).\n\n**Example**\n\n```sql\nstruct_insert({'a': 1}, b := 2)\n```\n\n**Returns**\n\n{'a': 1, 'b': 2}\n",
            "detail": "struct_insert(struct, any)"
        }
    },
    "struct_pack": {
        "documentation": {
            "documentation": "**Struct function**: Create a STRUCT containing the argument values. The entry name will be the bound variable name\n\n**Example**\n\n```sql\nstruct_pack(i := 4, s := 'string')\n```\n\n**Returns**\n\n{'i': 4, 's': string}\n",
            "detail": "struct_pack(any)"
        },
        "docstring": {
            "documentation": "**Struct function**: Create a STRUCT containing the argument values. The entry name will be the bound variable name\n\n**Example**\n\n```sql\nstruct_pack(i := 4, s := 'string')\n```\n\n**Returns**\n\n{'i': 4, 's': string}\n",
            "detail": "struct_pack(any)"
        }
    },
    "sum": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the sum value for all tuples in arg.\n\n**Example**\n\n```sql\nsum(A)\n```\n\n",
            "detail": "sum(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the sum value for all tuples in arg.\n\n**Example**\n\n```sql\nsum(A)\n```\n\n",
            "detail": "sum(arg)"
        }
    },
    "sum_no_overflow": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the sum value for all tuples in arg without overflow checks.\n\n**Example**\n\n```sql\nsum_no_overflow(A)\n```\n\n",
            "detail": "sum_no_overflow(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the sum value for all tuples in arg without overflow checks.\n\n**Example**\n\n```sql\nsum_no_overflow(A)\n```\n\n",
            "detail": "sum_no_overflow(arg)"
        }
    },
    "tan": {
        "documentation": {
            "documentation": "**Math function**: computes the tan of x\n\n**Example**\n\n```sql\ntan(90)\n```\n\n**Returns**\n\n-1.995200412208242\n",
            "detail": "tan(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the tan of x\n\n**Example**\n\n```sql\ntan(90)\n```\n\n**Returns**\n\n-1.995200412208242\n",
            "detail": "tan(x)"
        }
    },
    "time_bucket": {
        "documentation": {
            "documentation": "**Date function**: Truncate timestamptz by the specified interval bucket_width. Buckets are aligned relative to origin timestamptz. origin defaults to 2000-01-03 00:00:00+00 for buckets that don\u2019t include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets.\n\n**Example**\n\n```sql\ntime_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')\n```\n\n**Returns**\n\n1992-04-15 07:00:00\n",
            "detail": "time_bucket(bucket_width, timestamp, origin)"
        },
        "docstring": {
            "documentation": "**Date function**: Truncate timestamptz by the specified interval bucket_width. Buckets are aligned relative to origin timestamptz. origin defaults to 2000-01-03 00:00:00+00 for buckets that don\u2019t include a month or year interval, and to 2000-01-01 00:00:00+00 for month and year buckets.\n\n**Example**\n\n```sql\ntime_bucket(INTERVAL '2 weeks', TIMESTAMP '1992-04-20 15:26:00-07', TIMESTAMP '1992-04-01 00:00:00-07')\n```\n\n**Returns**\n\n1992-04-15 07:00:00\n",
            "detail": "time_bucket(bucket_width, timestamp, origin)"
        }
    },
    "timezone": {
        "documentation": {
            "documentation": "**Date function**: Extract the timezone component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the timezone component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone(ts)"
        }
    },
    "timezone_hour": {
        "documentation": {
            "documentation": "**Date function**: Extract the timezone_hour component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone_hour(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone_hour(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the timezone_hour component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone_hour(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone_hour(ts)"
        }
    },
    "timezone_minute": {
        "documentation": {
            "documentation": "**Date function**: Extract the timezone_minute component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone_minute(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone_minute(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the timezone_minute component from a date or timestamp\n\n**Example**\n\n```sql\ntimezone_minute(timestamp '2021-08-03 11:59:44.123456')\n```\n\n",
            "detail": "timezone_minute(ts)"
        }
    },
    "to_base": {
        "documentation": {
            "documentation": "**String function**: Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length\n\n**Example**\n\n```sql\nto_base(42, 16)\n```\n\n**Returns**\n\n2A\n",
            "detail": "to_base(number, radix, min_length)"
        },
        "docstring": {
            "documentation": "**String function**: Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length\n\n**Example**\n\n```sql\nto_base(42, 16)\n```\n\n**Returns**\n\n2A\n",
            "detail": "to_base(number, radix, min_length)"
        }
    },
    "to_base64": {
        "documentation": {
            "documentation": "**Blob function**: Convert a blob to a base64 encoded string.\n\n**Example**\n\n```sql\nbase64('A'::blob)\n```\n\n**Returns**\n\nQQ==\n",
            "detail": "to_base64(blob)"
        },
        "docstring": {
            "documentation": "**Blob function**: Convert a blob to a base64 encoded string.\n\n**Example**\n\n```sql\nbase64('A'::blob)\n```\n\n**Returns**\n\nQQ==\n",
            "detail": "to_base64(blob)"
        }
    },
    "to_days": {
        "documentation": {
            "documentation": "**Date function**: Construct a day interval\n\n**Example**\n\n```sql\nto_days(5)\n```\n\n**Returns**\n\n5 days\n",
            "detail": "to_days(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a day interval\n\n**Example**\n\n```sql\nto_days(5)\n```\n\n**Returns**\n\n5 days\n",
            "detail": "to_days(integer)"
        }
    },
    "to_hours": {
        "documentation": {
            "documentation": "**Date function**: Construct a hour interval\n\n**Example**\n\n```sql\nto_hours(5)\n```\n\n**Returns**\n\n05:00:00\n",
            "detail": "to_hours(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a hour interval\n\n**Example**\n\n```sql\nto_hours(5)\n```\n\n**Returns**\n\n05:00:00\n",
            "detail": "to_hours(integer)"
        }
    },
    "to_microseconds": {
        "documentation": {
            "documentation": "**Date function**: Construct a microsecond interval\n\n**Example**\n\n```sql\nto_microseconds(5)\n```\n\n**Returns**\n\n00:00:00.000005\n",
            "detail": "to_microseconds(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a microsecond interval\n\n**Example**\n\n```sql\nto_microseconds(5)\n```\n\n**Returns**\n\n00:00:00.000005\n",
            "detail": "to_microseconds(integer)"
        }
    },
    "to_milliseconds": {
        "documentation": {
            "documentation": "**Date function**: Construct a millisecond interval\n\n**Example**\n\n```sql\nto_milliseconds(5)\n```\n\n**Returns**\n\n00:00:00.005\n",
            "detail": "to_milliseconds(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a millisecond interval\n\n**Example**\n\n```sql\nto_milliseconds(5)\n```\n\n**Returns**\n\n00:00:00.005\n",
            "detail": "to_milliseconds(integer)"
        }
    },
    "to_minutes": {
        "documentation": {
            "documentation": "**Date function**: Construct a minute interval\n\n**Example**\n\n```sql\nto_minutes(5)\n```\n\n**Returns**\n\n00:05:00\n",
            "detail": "to_minutes(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a minute interval\n\n**Example**\n\n```sql\nto_minutes(5)\n```\n\n**Returns**\n\n00:05:00\n",
            "detail": "to_minutes(integer)"
        }
    },
    "to_months": {
        "documentation": {
            "documentation": "**Date function**: Construct a month interval\n\n**Example**\n\n```sql\nto_months(5)\n```\n\n**Returns**\n\n5 months\n",
            "detail": "to_months(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a month interval\n\n**Example**\n\n```sql\nto_months(5)\n```\n\n**Returns**\n\n5 months\n",
            "detail": "to_months(integer)"
        }
    },
    "to_seconds": {
        "documentation": {
            "documentation": "**Date function**: Construct a second interval\n\n**Example**\n\n```sql\nto_seconds(5)\n```\n\n**Returns**\n\n00:00:05\n",
            "detail": "to_seconds(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a second interval\n\n**Example**\n\n```sql\nto_seconds(5)\n```\n\n**Returns**\n\n00:00:05\n",
            "detail": "to_seconds(integer)"
        }
    },
    "to_timestamp": {
        "documentation": {
            "documentation": "**Date function**: Converts secs since epoch to a timestamp with time zone\n\n**Example**\n\n```sql\nto_timestamp(1284352323.5)\n```\n\n**Returns**\n\n2010-09-13 04:32:03.5+00\n",
            "detail": "to_timestamp(sec)"
        },
        "docstring": {
            "documentation": "**Date function**: Converts secs since epoch to a timestamp with time zone\n\n**Example**\n\n```sql\nto_timestamp(1284352323.5)\n```\n\n**Returns**\n\n2010-09-13 04:32:03.5+00\n",
            "detail": "to_timestamp(sec)"
        }
    },
    "to_years": {
        "documentation": {
            "documentation": "**Date function**: Construct a year interval\n\n**Example**\n\n```sql\nto_years(5)\n```\n\n**Returns**\n\n5 years\n",
            "detail": "to_years(integer)"
        },
        "docstring": {
            "documentation": "**Date function**: Construct a year interval\n\n**Example**\n\n```sql\nto_years(5)\n```\n\n**Returns**\n\n5 years\n",
            "detail": "to_years(integer)"
        }
    },
    "translate": {
        "documentation": {
            "documentation": "**String function**: Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted.\n\n**Example**\n\n```sql\ntranslate('12345', '143', 'ax')\n```\n\n**Returns**\n\na2x5\n",
            "detail": "translate(string, from, to)"
        },
        "docstring": {
            "documentation": "**String function**: Replaces each character in string that matches a character in the from set with the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are deleted.\n\n**Example**\n\n```sql\ntranslate('12345', '143', 'ax')\n```\n\n**Returns**\n\na2x5\n",
            "detail": "translate(string, from, to)"
        }
    },
    "trim": {
        "documentation": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from either side of the string\n\n**Example**\n\n```sql\ntrim('>>>>test<<', '><')\n```\n\n**Returns**\n\ntest\n",
            "detail": "trim(string, characters)"
        },
        "docstring": {
            "documentation": "**String function**: Removes any occurrences of any of the characters from either side of the string\n\n**Example**\n\n```sql\ntrim('>>>>test<<', '><')\n```\n\n**Returns**\n\ntest\n",
            "detail": "trim(string, characters)"
        }
    },
    "trunc": {
        "documentation": {
            "documentation": "**Math function**: truncates the number\n\n**Example**\n\n```sql\ntrunc(17.4)\n```\n\n**Returns**\n\n17.0\n",
            "detail": "trunc(x)"
        },
        "docstring": {
            "documentation": "**Math function**: truncates the number\n\n**Example**\n\n```sql\ntrunc(17.4)\n```\n\n**Returns**\n\n17.0\n",
            "detail": "trunc(x)"
        }
    },
    "try_strptime": {
        "documentation": {
            "documentation": "**Date function**: Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure.\n\n**Example**\n\n```sql\ntry_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')\n```\n\n**Returns**\n\n1992-01-01 20:38:40\n",
            "detail": "try_strptime(text, format)"
        },
        "docstring": {
            "documentation": "**Date function**: Converts string to timestamp using the format string (timestamp with time zone if %Z is specified). Returns NULL on failure.\n\n**Example**\n\n```sql\ntry_strptime('Wed, 1 January 1992 - 08:38:40 PM', '%a, %-d %B %Y - %I:%M:%S %p')\n```\n\n**Returns**\n\n1992-01-01 20:38:40\n",
            "detail": "try_strptime(text, format)"
        }
    },
    "txid_current": {
        "documentation": {
            "documentation": "**Generic function**: Returns the current transaction\u2019s ID (a BIGINT). It will assign a new one if the current transaction does not have one already.\n\n**Example**\n\n```sql\ntxid_current()\n```\n\n**Returns**\n\n56\n",
            "detail": "txid_current()"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the current transaction\u2019s ID (a BIGINT). It will assign a new one if the current transaction does not have one already.\n\n**Example**\n\n```sql\ntxid_current()\n```\n\n**Returns**\n\n56\n",
            "detail": "txid_current()"
        }
    },
    "typeof": {
        "documentation": {
            "documentation": "**Generic function**: Returns the name of the data type of the result of the expression.\n\n**Example**\n\n```sql\ntypeof('abc')\n```\n\n**Returns**\n\nVARCHAR\n",
            "detail": "typeof(expression)"
        },
        "docstring": {
            "documentation": "**Generic function**: Returns the name of the data type of the result of the expression.\n\n**Example**\n\n```sql\ntypeof('abc')\n```\n\n**Returns**\n\nVARCHAR\n",
            "detail": "typeof(expression)"
        }
    },
    "unbin": {
        "documentation": {
            "documentation": "**String function**: Converts a value from binary representation to a blob\n\n**Example**\n\n```sql\nunbin('0110')\n```\n\n**Returns**\n\n\\x06\n",
            "detail": "unbin(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts a value from binary representation to a blob\n\n**Example**\n\n```sql\nunbin('0110')\n```\n\n**Returns**\n\n\\x06\n",
            "detail": "unbin(value)"
        }
    },
    "unhex": {
        "documentation": {
            "documentation": "**String function**: Converts a value from hexadecimal representation to a blob\n\n**Example**\n\n```sql\nunhex('2A')\n```\n\n**Returns**\n\n*\n",
            "detail": "unhex(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts a value from hexadecimal representation to a blob\n\n**Example**\n\n```sql\nunhex('2A')\n```\n\n**Returns**\n\n*\n",
            "detail": "unhex(value)"
        }
    },
    "unicode": {
        "documentation": {
            "documentation": "**String function**: Returns the unicode codepoint of the first character of the string\n\n**Example**\n\n```sql\nunicode('\u00fc')\n```\n\n**Returns**\n\n252\n",
            "detail": "unicode(str)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the unicode codepoint of the first character of the string\n\n**Example**\n\n```sql\nunicode('\u00fc')\n```\n\n**Returns**\n\n252\n",
            "detail": "unicode(str)"
        }
    },
    "union_extract": {
        "documentation": {
            "documentation": "**Union function**: Extract the value with the named tags from the union. NULL if the tag is not currently selected\n\n**Example**\n\n```sql\nunion_extract(s, 'k')\n```\n\n",
            "detail": "union_extract(union, tag)"
        },
        "docstring": {
            "documentation": "**Union function**: Extract the value with the named tags from the union. NULL if the tag is not currently selected\n\n**Example**\n\n```sql\nunion_extract(s, 'k')\n```\n\n",
            "detail": "union_extract(union, tag)"
        }
    },
    "union_tag": {
        "documentation": {
            "documentation": "**Union function**: Retrieve the currently selected tag of the union as an Enum.\n\n**Example**\n\n```sql\nunion_tag(union_value(k := 'foo'))\n```\n\n**Returns**\n\nk\n",
            "detail": "union_tag(union)"
        },
        "docstring": {
            "documentation": "**Union function**: Retrieve the currently selected tag of the union as an Enum.\n\n**Example**\n\n```sql\nunion_tag(union_value(k := 'foo'))\n```\n\n**Returns**\n\nk\n",
            "detail": "union_tag(union)"
        }
    },
    "union_value": {
        "documentation": {
            "documentation": "**Union function**: Create a single member UNION containing the argument value. The tag of the value will be the bound variable name.\n\n**Example**\n\n```sql\nunion_value(k := 'hello')\n```\n\n**Returns**\n\nhello\n",
            "detail": "union_value(tag)"
        },
        "docstring": {
            "documentation": "**Union function**: Create a single member UNION containing the argument value. The tag of the value will be the bound variable name.\n\n**Example**\n\n```sql\nunion_value(k := 'hello')\n```\n\n**Returns**\n\nhello\n",
            "detail": "union_value(tag)"
        }
    },
    "uuid": {
        "documentation": {
            "documentation": "**Random function**: Return a random uuid similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687\n\n**Example**\n\n```sql\nuuid()\n```\n\n**Returns**\n\n111e1179-01dd-4f7e-9a67-139fa9b2236c\n",
            "detail": "uuid()"
        },
        "docstring": {
            "documentation": "**Random function**: Return a random uuid similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687\n\n**Example**\n\n```sql\nuuid()\n```\n\n**Returns**\n\n111e1179-01dd-4f7e-9a67-139fa9b2236c\n",
            "detail": "uuid()"
        }
    },
    "var_pop": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the population variance.\n\n",
            "detail": "var_pop(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the population variance.\n\n",
            "detail": "var_pop(x)"
        }
    },
    "var_samp": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the sample variance of all input values.\n\n**Example**\n\n```sql\n(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)\n```\n\n",
            "detail": "var_samp(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the sample variance of all input values.\n\n**Example**\n\n```sql\n(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)\n```\n\n",
            "detail": "var_samp(x)"
        }
    },
    "vector_type": {
        "documentation": {
            "documentation": "**Debug function**: Returns the VectorType of a given column\n\n**Example**\n\n```sql\nvector_type(col)\n```\n\n",
            "detail": "vector_type(col)"
        },
        "docstring": {
            "documentation": "**Debug function**: Returns the VectorType of a given column\n\n**Example**\n\n```sql\nvector_type(col)\n```\n\n",
            "detail": "vector_type(col)"
        }
    },
    "version": {
        "documentation": {
            "documentation": "**Generic function**: Return the currently active version of DuckDB in this format: v0.3.2\t\n\n**Example**\n\n```sql\nversion()\n```\n\n**Returns**\n\nv0.8.2-dev4203\n",
            "detail": "version()"
        },
        "docstring": {
            "documentation": "**Generic function**: Return the currently active version of DuckDB in this format: v0.3.2\t\n\n**Example**\n\n```sql\nversion()\n```\n\n**Returns**\n\nv0.8.2-dev4203\n",
            "detail": "version()"
        }
    },
    "week": {
        "documentation": {
            "documentation": "**Date function**: Extract the week component from a date or timestamp\n\n**Example**\n\n```sql\nweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n31\n",
            "detail": "week(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the week component from a date or timestamp\n\n**Example**\n\n```sql\nweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n31\n",
            "detail": "week(ts)"
        }
    },
    "weekday": {
        "documentation": {
            "documentation": "**Date function**: Extract the weekday component from a date or timestamp\n\n**Example**\n\n```sql\nweekday(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "weekday(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the weekday component from a date or timestamp\n\n**Example**\n\n```sql\nweekday(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2\n",
            "detail": "weekday(ts)"
        }
    },
    "weekofyear": {
        "documentation": {
            "documentation": "**Date function**: Extract the weekofyear component from a date or timestamp\n\n**Example**\n\n```sql\nweekofyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n31\n",
            "detail": "weekofyear(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the weekofyear component from a date or timestamp\n\n**Example**\n\n```sql\nweekofyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n31\n",
            "detail": "weekofyear(ts)"
        }
    },
    "xor": {
        "documentation": {
            "documentation": "**Operators function**: Bitwise XOR\n\n**Example**\n\n```sql\nxor(17, 5)\n```\n\n**Returns**\n\n20\n",
            "detail": "xor(left, right)"
        },
        "docstring": {
            "documentation": "**Operators function**: Bitwise XOR\n\n**Example**\n\n```sql\nxor(17, 5)\n```\n\n**Returns**\n\n20\n",
            "detail": "xor(left, right)"
        }
    },
    "year": {
        "documentation": {
            "documentation": "**Date function**: Extract the year component from a date or timestamp\n\n**Example**\n\n```sql\nyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2021\n",
            "detail": "year(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the year component from a date or timestamp\n\n**Example**\n\n```sql\nyear(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n2021\n",
            "detail": "year(ts)"
        }
    },
    "yearweek": {
        "documentation": {
            "documentation": "**Date function**: Extract the yearweek component from a date or timestamp\n\n**Example**\n\n```sql\nyearweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n202131\n",
            "detail": "yearweek(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Extract the yearweek component from a date or timestamp\n\n**Example**\n\n```sql\nyearweek(timestamp '2021-08-03 11:59:44.123456')\n```\n\n**Returns**\n\n202131\n",
            "detail": "yearweek(ts)"
        }
    },
    "|": {
        "documentation": {
            "documentation": "**Operators function**: Bitwise OR\n\n**Example**\n\n```sql\n32 | 3\n```\n\n**Returns**\n\n35\n",
            "detail": "|(left, right)"
        },
        "docstring": {
            "documentation": "**Operators function**: Bitwise OR\n\n**Example**\n\n```sql\n32 | 3\n```\n\n**Returns**\n\n35\n",
            "detail": "|(left, right)"
        }
    },
    "~": {
        "documentation": {
            "documentation": "**Operators function**: Bitwise NOT\n\n**Example**\n\n```sql\n~15\n```\n\n**Returns**\n\n-16\n",
            "detail": "~(input)"
        },
        "docstring": {
            "documentation": "**Operators function**: Bitwise NOT\n\n**Example**\n\n```sql\n~15\n```\n\n**Returns**\n\n-16\n",
            "detail": "~(input)"
        }
    },
    "factorial": {
        "documentation": {
            "documentation": "**Math function**: factorial of x. Computes the product of the current integer and all integers below it\n\n**Example**\n\n```sql\n4factorial\n```\n\n**Returns**\n\n24\n",
            "detail": "factorial(x)"
        },
        "docstring": {
            "documentation": "**Math function**: factorial of x. Computes the product of the current integer and all integers below it\n\n**Example**\n\n```sql\n4factorial\n```\n\n**Returns**\n\n24\n",
            "detail": "factorial(x)"
        }
    },
    "pow": {
        "documentation": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "pow(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "pow(x, y)"
        }
    },
    "power": {
        "documentation": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "power(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "power(x, y)"
        }
    },
    "^": {
        "documentation": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "^(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes x to the power of y\n\n**Example**\n\n```sql\npow(2, 3)\n```\n\n**Returns**\n\n8.0\n",
            "detail": "^(x, y)"
        }
    },
    "abs": {
        "documentation": {
            "documentation": "**Math function**: absolute value\n\n**Example**\n\n```sql\nabs(-17.4)\n```\n\n**Returns**\n\n17.4\n",
            "detail": "abs(x)"
        },
        "docstring": {
            "documentation": "**Math function**: absolute value\n\n**Example**\n\n```sql\nabs(-17.4)\n```\n\n**Returns**\n\n17.4\n",
            "detail": "abs(x)"
        }
    },
    "starts_with": {
        "documentation": {
            "documentation": "**String function**: Return true if string begins with search_string\n\n**Example**\n\n```sql\nstarts_with('abc','a')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "starts_with(string, search_string)"
        },
        "docstring": {
            "documentation": "**String function**: Return true if string begins with search_string\n\n**Example**\n\n```sql\nstarts_with('abc','a')\n```\n\n**Returns**\n\nTrue\n",
            "detail": "starts_with(string, search_string)"
        }
    },
    "argmax": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nargmax(A,B)\n```\n\n",
            "detail": "argmax(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nargmax(A,B)\n```\n\n",
            "detail": "argmax(arg, val)"
        }
    },
    "max_by": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nmax_by(A,B)\n```\n\n",
            "detail": "max_by(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the maximum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nmax_by(A,B)\n```\n\n",
            "detail": "max_by(arg, val)"
        }
    },
    "argmin": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nargmin(A,B)\n```\n\n",
            "detail": "argmin(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nargmin(A,B)\n```\n\n",
            "detail": "argmin(arg, val)"
        }
    },
    "min_by": {
        "documentation": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nmin_by(A,B)\n```\n\n",
            "detail": "min_by(arg, val)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Finds the row with the minimum val. Calculates the arg expression at that row.\n\n**Example**\n\n```sql\nmin_by(A,B)\n```\n\n",
            "detail": "min_by(arg, val)"
        }
    },
    "mean": {
        "documentation": {
            "documentation": "**Algebraic function**: Calculates the average value for all tuples in x.\n\n**Example**\n\n```sql\nSUM(x) / COUNT(*)\n```\n\n",
            "detail": "mean(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Calculates the average value for all tuples in x.\n\n**Example**\n\n```sql\nSUM(x) / COUNT(*)\n```\n\n",
            "detail": "mean(x)"
        }
    },
    "to_binary": {
        "documentation": {
            "documentation": "**String function**: Converts the value to to_binaryary representation\n\n**Example**\n\n```sql\nto_binary(42)\n```\n\n**Returns**\n\n101010\n",
            "detail": "to_binary(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts the value to to_binaryary representation\n\n**Example**\n\n```sql\nto_binary(42)\n```\n\n**Returns**\n\n101010\n",
            "detail": "to_binary(value)"
        }
    },
    "ceiling": {
        "documentation": {
            "documentation": "**Math function**: rounds the number up\n\n**Example**\n\n```sql\nceiling(17.4)\n```\n\n**Returns**\n\n18.0\n",
            "detail": "ceiling(x)"
        },
        "docstring": {
            "documentation": "**Math function**: rounds the number up\n\n**Example**\n\n```sql\nceiling(17.4)\n```\n\n**Returns**\n\n18.0\n",
            "detail": "ceiling(x)"
        }
    },
    "today": {
        "documentation": {
            "documentation": "**Date function**: Returns the current date\n\n**Example**\n\n```sql\ntoday()\n```\n\n**Returns**\n\n2023-07-23\n",
            "detail": "today()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current date\n\n**Example**\n\n```sql\ntoday()\n```\n\n**Returns**\n\n2023-07-23\n",
            "detail": "today()"
        }
    },
    "datediff": {
        "documentation": {
            "documentation": "**Date function**: The number of partition boundaries between the timestamps\n\n**Example**\n\n```sql\ndatediff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n2\n",
            "detail": "datediff(part, startdate, enddate)"
        },
        "docstring": {
            "documentation": "**Date function**: The number of partition boundaries between the timestamps\n\n**Example**\n\n```sql\ndatediff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n2\n",
            "detail": "datediff(part, startdate, enddate)"
        }
    },
    "datepart": {
        "documentation": {
            "documentation": "**Date function**: Get subfield (equivalent to extract)\n\n**Example**\n\n```sql\ndatepart('minute', TIMESTAMP '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n38\n",
            "detail": "datepart(ts)"
        },
        "docstring": {
            "documentation": "**Date function**: Get subfield (equivalent to extract)\n\n**Example**\n\n```sql\ndatepart('minute', TIMESTAMP '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n38\n",
            "detail": "datepart(ts)"
        }
    },
    "datesub": {
        "documentation": {
            "documentation": "**Date function**: The number of complete partitions between the timestamps\n\n**Example**\n\n```sql\ndatesub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n1\n",
            "detail": "datesub(part, startdate, enddate)"
        },
        "docstring": {
            "documentation": "**Date function**: The number of complete partitions between the timestamps\n\n**Example**\n\n```sql\ndatesub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\n```\n\n**Returns**\n\n1\n",
            "detail": "datesub(part, startdate, enddate)"
        }
    },
    "datetrunc": {
        "documentation": {
            "documentation": "**Date function**: Truncate to specified precision\n\n**Example**\n\n```sql\ndatetrunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n1992-09-20 20:00:00+00\n",
            "detail": "datetrunc(part, timestamp)"
        },
        "docstring": {
            "documentation": "**Date function**: Truncate to specified precision\n\n**Example**\n\n```sql\ndatetrunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')\n```\n\n**Returns**\n\n1992-09-20 20:00:00+00\n",
            "detail": "datetrunc(part, timestamp)"
        }
    },
    "formatReadableDecimalSize": {
        "documentation": {
            "documentation": "**String function**: Converts bytes to a human-readable presentation (e.g. 16000 -> 16KB)\n\n**Example**\n\n```sql\nformatReadableDecimalSize(1000 * 16)\n```\n\n**Returns**\n\n16KB\n",
            "detail": "formatReadableDecimalSize(bytes)"
        },
        "docstring": {
            "documentation": "**String function**: Converts bytes to a human-readable presentation (e.g. 16000 -> 16KB)\n\n**Example**\n\n```sql\nformatReadableDecimalSize(1000 * 16)\n```\n\n**Returns**\n\n16KB\n",
            "detail": "formatReadableDecimalSize(bytes)"
        }
    },
    "now": {
        "documentation": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\nnow()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "now()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\nnow()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "now()"
        }
    },
    "transaction_timestamp": {
        "documentation": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\ntransaction_timestamp()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "transaction_timestamp()"
        },
        "docstring": {
            "documentation": "**Date function**: Returns the current timestamp\n\n**Example**\n\n```sql\ntransaction_timestamp()\n```\n\n**Returns**\n\n2023-07-23 14:04:22.538+00\n",
            "detail": "transaction_timestamp()"
        }
    },
    "gcd": {
        "documentation": {
            "documentation": "**Math function**: computes the greatest common divisor of x and y\n\n**Example**\n\n```sql\ngcd(42, 57)\n```\n\n**Returns**\n\n3\n",
            "detail": "gcd(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the greatest common divisor of x and y\n\n**Example**\n\n```sql\ngcd(42, 57)\n```\n\n**Returns**\n\n3\n",
            "detail": "gcd(x, y)"
        }
    },
    "mismatches": {
        "documentation": {
            "documentation": "**String function**: The number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n**Example**\n\n```sql\nmismatches('duck','luck')\n```\n\n**Returns**\n\n1\n",
            "detail": "mismatches(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n**Example**\n\n```sql\nmismatches('duck','luck')\n```\n\n**Returns**\n\n1\n",
            "detail": "mismatches(str1, str2)"
        }
    },
    "to_hex": {
        "documentation": {
            "documentation": "**String function**: Converts the value to to_hexadecimal representation\n\n**Example**\n\n```sql\nto_hex(42)\n```\n\n**Returns**\n\n2A\n",
            "detail": "to_hex(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts the value to to_hexadecimal representation\n\n**Example**\n\n```sql\nto_hex(42)\n```\n\n**Returns**\n\n2A\n",
            "detail": "to_hex(value)"
        }
    },
    "strpos": {
        "documentation": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\nstrpos('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "strpos(haystack, needle)"
        },
        "docstring": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\nstrpos('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "strpos(haystack, needle)"
        }
    },
    "position": {
        "documentation": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\nposition('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "position(haystack, needle)"
        },
        "docstring": {
            "documentation": "**String function**: Return location of first occurrence of needle in haystack, counting from 1. Returns 0 if no match found.\n\n**Example**\n\n```sql\nposition('test test','es')\n```\n\n**Returns**\n\n2\n",
            "detail": "position(haystack, needle)"
        }
    },
    "fsum": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nfsum(A)\n```\n\n",
            "detail": "fsum(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nfsum(A)\n```\n\n",
            "detail": "fsum(arg)"
        }
    },
    "sumkahan": {
        "documentation": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nsumkahan(A)\n```\n\n",
            "detail": "sumkahan(arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Calculates the sum using a more accurate floating point summation (Kahan Sum).\n\n**Example**\n\n```sql\nsumkahan(A)\n```\n\n",
            "detail": "sumkahan(arg)"
        }
    },
    "lcm": {
        "documentation": {
            "documentation": "**Math function**: computes the least common multiple of x and y\n\n**Example**\n\n```sql\nlcm(42, 57)\n```\n\n**Returns**\n\n798\n",
            "detail": "lcm(x, y)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the least common multiple of x and y\n\n**Example**\n\n```sql\nlcm(42, 57)\n```\n\n**Returns**\n\n798\n",
            "detail": "lcm(x, y)"
        }
    },
    "editdist3": {
        "documentation": {
            "documentation": "**String function**: The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n**Example**\n\n```sql\neditdist3('duck','db')\n```\n\n**Returns**\n\n3\n",
            "detail": "editdist3(str1, str2)"
        },
        "docstring": {
            "documentation": "**String function**: The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n**Example**\n\n```sql\neditdist3('duck','db')\n```\n\n**Returns**\n\n3\n",
            "detail": "editdist3(str1, str2)"
        }
    },
    "array_agg": {
        "documentation": {
            "documentation": "**Nested function**: Returns a LIST containing all the values of a column.\n\n**Example**\n\n```sql\narray_agg(A)\n```\n\n",
            "detail": "array_agg(arg)"
        },
        "docstring": {
            "documentation": "**Nested function**: Returns a LIST containing all the values of a column.\n\n**Example**\n\n```sql\narray_agg(A)\n```\n\n",
            "detail": "array_agg(arg)"
        }
    },
    "array_aggregate": {
        "documentation": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\narray_aggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "array_aggregate(list, name)"
        },
        "docstring": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\narray_aggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "array_aggregate(list, name)"
        }
    },
    "list_aggr": {
        "documentation": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\nlist_aggr([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "list_aggr(list, name)"
        },
        "docstring": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\nlist_aggr([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "list_aggr(list, name)"
        }
    },
    "array_aggr": {
        "documentation": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\narray_aggr([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "array_aggr(list, name)"
        },
        "docstring": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\narray_aggr([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "array_aggr(list, name)"
        }
    },
    "aggregate": {
        "documentation": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\naggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "aggregate(list, name)"
        },
        "docstring": {
            "documentation": "**List function**: Executes the aggregate function name on the elements of list.\n\n**Example**\n\n```sql\naggregate([1, 2, NULL], 'min')\n```\n\n**Returns**\n\n1\n",
            "detail": "aggregate(list, name)"
        }
    },
    "<=>": {
        "documentation": {
            "documentation": "**List function**: Compute the cosine similarity between two lists.\n\n**Example**\n\n```sql\n<=>([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n1.0\n",
            "detail": "<=>(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the cosine similarity between two lists.\n\n**Example**\n\n```sql\n<=>([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n1.0\n",
            "detail": "<=>(list1, list2)"
        }
    },
    "<->": {
        "documentation": {
            "documentation": "**List function**: Compute the distance between two lists.\n\n**Example**\n\n```sql\n<->([1, 2, 3], [1, 2, 3])\n```\n\n",
            "detail": "<->(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the distance between two lists.\n\n**Example**\n\n```sql\n<->([1, 2, 3], [1, 2, 3])\n```\n\n",
            "detail": "<->(list1, list2)"
        }
    },
    "array_distinct": {
        "documentation": {
            "documentation": "**List function**: Removes all duplicates and NULLs from a list. Does not preserve the original order.\n\n**Example**\n\n```sql\narray_distinct([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n[5, -3, 1]\n",
            "detail": "array_distinct(list)"
        },
        "docstring": {
            "documentation": "**List function**: Removes all duplicates and NULLs from a list. Does not preserve the original order.\n\n**Example**\n\n```sql\narray_distinct([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n[5, -3, 1]\n",
            "detail": "array_distinct(list)"
        }
    },
    "array_filter": {
        "documentation": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\narray_filter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "array_filter(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\narray_filter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "array_filter(list, lambda)"
        }
    },
    "filter": {
        "documentation": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\nfilter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "filter(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Constructs a list from those elements of the input list for which the lambda function returns true.\n\n**Example**\n\n```sql\nfilter([3, 4, 5], x -> x > 4)\n```\n\n**Returns**\n\n[5]\n",
            "detail": "filter(list, lambda)"
        }
    },
    "list_dot_product": {
        "documentation": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\nlist_dot_product([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "list_dot_product(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\nlist_dot_product([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "list_dot_product(list1, list2)"
        }
    },
    "<#>": {
        "documentation": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\n<#>([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "<#>(list1, list2)"
        },
        "docstring": {
            "documentation": "**List function**: Compute the inner product between two lists.\n\n**Example**\n\n```sql\n<#>([1, 2, 3], [1, 2, 3])\n```\n\n**Returns**\n\n14.0\n",
            "detail": "<#>(list1, list2)"
        }
    },
    "array_reverse_sort": {
        "documentation": {
            "documentation": "**List function**: Sorts the elements of the list in reverse order.\n\n**Example**\n\n```sql\narray_reverse_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[6, 3, 2, 1]\n",
            "detail": "array_reverse_sort(list)"
        },
        "docstring": {
            "documentation": "**List function**: Sorts the elements of the list in reverse order.\n\n**Example**\n\n```sql\narray_reverse_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[6, 3, 2, 1]\n",
            "detail": "array_reverse_sort(list)"
        }
    },
    "array_slice": {
        "documentation": {
            "documentation": "**List function**: Extract a sublist using slice conventions. Negative values are accepted.\n\n**Example**\n\n```sql\narray_slice(l, 2, 4)\n```\n\n",
            "detail": "array_slice(list, begin, end[, step])"
        },
        "docstring": {
            "documentation": "**List function**: Extract a sublist using slice conventions. Negative values are accepted.\n\n**Example**\n\n```sql\narray_slice(l, 2, 4)\n```\n\n",
            "detail": "array_slice(list, begin, end[, step])"
        }
    },
    "array_sort": {
        "documentation": {
            "documentation": "**List function**: Sorts the elements of the list.\n\n**Example**\n\n```sql\narray_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[1, 2, 3, 6]\n",
            "detail": "array_sort(list)"
        },
        "docstring": {
            "documentation": "**List function**: Sorts the elements of the list.\n\n**Example**\n\n```sql\narray_sort([3, 6, 1, 2])\n```\n\n**Returns**\n\n[1, 2, 3, 6]\n",
            "detail": "array_sort(list)"
        }
    },
    "array_transform": {
        "documentation": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\narray_transform([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "array_transform(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\narray_transform([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "array_transform(list, lambda)"
        }
    },
    "list_apply": {
        "documentation": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\nlist_apply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "list_apply(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\nlist_apply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "list_apply(list, lambda)"
        }
    },
    "array_apply": {
        "documentation": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\narray_apply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "array_apply(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\narray_apply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "array_apply(list, lambda)"
        }
    },
    "apply": {
        "documentation": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\napply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "apply(list, lambda)"
        },
        "docstring": {
            "documentation": "**List function**: Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n**Example**\n\n```sql\napply([1, 2, 3], x -> x + 1)\n```\n\n**Returns**\n\n[2, 3, 4]\n",
            "detail": "apply(list, lambda)"
        }
    },
    "array_unique": {
        "documentation": {
            "documentation": "**List function**: Counts the unique elements of a list.\n\n**Example**\n\n```sql\narray_unique([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n3\n",
            "detail": "array_unique(list)"
        },
        "docstring": {
            "documentation": "**List function**: Counts the unique elements of a list.\n\n**Example**\n\n```sql\narray_unique([1, 1, NULL, -3, 1, 5])\n```\n\n**Returns**\n\n3\n",
            "detail": "array_unique(list)"
        }
    },
    "list_pack": {
        "documentation": {
            "documentation": "**List function**: Create a LIST containing the argument values.\n\n**Example**\n\n```sql\nlist_pack(4, 5, 6)\n```\n\n**Returns**\n\n[4, 5, 6]\n",
            "detail": "list_pack(any, ...)"
        },
        "docstring": {
            "documentation": "**List function**: Create a LIST containing the argument values.\n\n**Example**\n\n```sql\nlist_pack(4, 5, 6)\n```\n\n**Returns**\n\n[4, 5, 6]\n",
            "detail": "list_pack(any, ...)"
        }
    },
    "log": {
        "documentation": {
            "documentation": "**Math function**: computes the 10-log of x\n\n**Example**\n\n```sql\nlog(1000)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log(x)"
        },
        "docstring": {
            "documentation": "**Math function**: computes the 10-log of x\n\n**Example**\n\n```sql\nlog(1000)\n```\n\n**Returns**\n\n3.0\n",
            "detail": "log(x)"
        }
    },
    "element_at": {
        "documentation": {
            "documentation": "**Map function**: Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is returned.\n\n**Example**\n\n```sql\nelement_at(map(['key'], ['val']), 'key')\n```\n\n**Returns**\n\n[val]\n",
            "detail": "element_at(map, key)"
        },
        "docstring": {
            "documentation": "**Map function**: Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map\u2019s keys else an error is returned.\n\n**Example**\n\n```sql\nelement_at(map(['key'], ['val']), 'key')\n```\n\n**Returns**\n\n[val]\n",
            "detail": "element_at(map, key)"
        }
    },
    "quantile": {
        "documentation": {
            "documentation": "**Holistic function**: Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n",
            "detail": "quantile(x, pos)"
        },
        "docstring": {
            "documentation": "**Holistic function**: Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n",
            "detail": "quantile(x, pos)"
        }
    },
    "stddev": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the sample standard deviation\n\n**Example**\n\n```sql\nsqrt(var_samp(x))\n```\n\n",
            "detail": "stddev(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the sample standard deviation\n\n**Example**\n\n```sql\nsqrt(var_samp(x))\n```\n\n",
            "detail": "stddev(x)"
        }
    },
    "group_concat": {
        "documentation": {
            "documentation": "**Distributive function**: Concatenates the column string values with an optional separator.\n\n**Example**\n\n```sql\ngroup_concat(A, '-')\n```\n\n",
            "detail": "group_concat(str, arg)"
        },
        "docstring": {
            "documentation": "**Distributive function**: Concatenates the column string values with an optional separator.\n\n**Example**\n\n```sql\ngroup_concat(A, '-')\n```\n\n",
            "detail": "group_concat(str, arg)"
        }
    },
    "str_split": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstr_split('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "str_split(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstr_split('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "str_split(string, separator)"
        }
    },
    "string_to_array": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstring_to_array('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "string_to_array(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nstring_to_array('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "string_to_array(string, separator)"
        }
    },
    "split": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nsplit('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "split(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the separator\n\n**Example**\n\n```sql\nsplit('hello-world', '-')\n```\n\n**Returns**\n\n[hello, world]\n",
            "detail": "split(string, separator)"
        }
    },
    "str_split_regex": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nstr_split_regex('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "str_split_regex(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nstr_split_regex('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "str_split_regex(string, separator)"
        }
    },
    "regexp_split_to_array": {
        "documentation": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nregexp_split_to_array('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "regexp_split_to_array(string, separator)"
        },
        "docstring": {
            "documentation": "**String function**: Splits the string along the regex\n\n**Example**\n\n```sql\nregexp_split_to_array('hello\u2423world; 42', ';?\u2423')\n```\n\n**Returns**\n\n[hello, world; 42]\n",
            "detail": "regexp_split_to_array(string, separator)"
        }
    },
    "row": {
        "documentation": {
            "documentation": "**Struct function**: Create a STRUCT containing the argument values. The entry name will be the bound variable name\n\n**Example**\n\n```sql\nrow(i := 4, s := 'string')\n```\n\n**Returns**\n\n{'i': 4, 's': string}\n",
            "detail": "row(any)"
        },
        "docstring": {
            "documentation": "**Struct function**: Create a STRUCT containing the argument values. The entry name will be the bound variable name\n\n**Example**\n\n```sql\nrow(i := 4, s := 'string')\n```\n\n**Returns**\n\n{'i': 4, 's': string}\n",
            "detail": "row(any)"
        }
    },
    "base64": {
        "documentation": {
            "documentation": "**Blob function**: Convert a blob to a base64 encoded string.\n\n**Example**\n\n```sql\nbase64('A'::blob)\n```\n\n**Returns**\n\nQQ==\n",
            "detail": "base64(blob)"
        },
        "docstring": {
            "documentation": "**Blob function**: Convert a blob to a base64 encoded string.\n\n**Example**\n\n```sql\nbase64('A'::blob)\n```\n\n**Returns**\n\nQQ==\n",
            "detail": "base64(blob)"
        }
    },
    "from_binary": {
        "documentation": {
            "documentation": "**String function**: Converts a value from binary representation to a blob\n\n**Example**\n\n```sql\nfrom_binary('0110')\n```\n\n**Returns**\n\n\\x06\n",
            "detail": "from_binary(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts a value from binary representation to a blob\n\n**Example**\n\n```sql\nfrom_binary('0110')\n```\n\n**Returns**\n\n\\x06\n",
            "detail": "from_binary(value)"
        }
    },
    "from_hex": {
        "documentation": {
            "documentation": "**String function**: Converts a value from hexadecimal representation to a blob\n\n**Example**\n\n```sql\nfrom_hex('2A')\n```\n\n**Returns**\n\n*\n",
            "detail": "from_hex(value)"
        },
        "docstring": {
            "documentation": "**String function**: Converts a value from hexadecimal representation to a blob\n\n**Example**\n\n```sql\nfrom_hex('2A')\n```\n\n**Returns**\n\n*\n",
            "detail": "from_hex(value)"
        }
    },
    "ord": {
        "documentation": {
            "documentation": "**String function**: Returns the ord codepoint of the first character of the string\n\n**Example**\n\n```sql\nord('\u00fc')\n```\n\n**Returns**\n\n252\n",
            "detail": "ord(str)"
        },
        "docstring": {
            "documentation": "**String function**: Returns the ord codepoint of the first character of the string\n\n**Example**\n\n```sql\nord('\u00fc')\n```\n\n**Returns**\n\n252\n",
            "detail": "ord(str)"
        }
    },
    "gen_random_uuid": {
        "documentation": {
            "documentation": "**Random function**: Return a random gen_random_uuid similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687\n\n**Example**\n\n```sql\ngen_random_uuid()\n```\n\n**Returns**\n\n111e1179-01dd-4f7e-9a67-139fa9b2236c\n",
            "detail": "gen_random_uuid()"
        },
        "docstring": {
            "documentation": "**Random function**: Return a random gen_random_uuid similar to this: eeccb8c5-9943-b2bb-bb5e-222f4e14b687\n\n**Example**\n\n```sql\ngen_random_uuid()\n```\n\n**Returns**\n\n111e1179-01dd-4f7e-9a67-139fa9b2236c\n",
            "detail": "gen_random_uuid()"
        }
    },
    "variance": {
        "documentation": {
            "documentation": "**Algebraic function**: Returns the sample variance of all input values.\n\n**Example**\n\n```sql\n(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)\n```\n\n",
            "detail": "variance(x)"
        },
        "docstring": {
            "documentation": "**Algebraic function**: Returns the sample variance of all input values.\n\n**Example**\n\n```sql\n(SUM(x^2) - SUM(x)^2 / COUNT(x)) / (COUNT(x) - 1)\n```\n\n",
            "detail": "variance(x)"
        }
    },
    "contains": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "contains(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "contains(col0, col1)"
        }
    },
    "enable_print_progress_bar": {
        "documentation": {
            "documentation": "",
            "detail": "enable_print_progress_bar()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_print_progress_bar()"
        }
    },
    "json_merge_patch": {
        "documentation": {
            "documentation": "",
            "detail": "json_merge_patch()"
        },
        "docstring": {
            "documentation": "",
            "detail": "json_merge_patch()"
        }
    },
    "generate_subscripts": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| dim | None |\n",
            "detail": "generate_subscripts(arr, dim)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| dim | None |\n",
            "detail": "generate_subscripts(arr, dim)"
        }
    },
    "duckdb_databases": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_databases()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_databases()"
        }
    },
    "has_sequence_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| sequence | None |\n| privilege | None |\n",
            "detail": "has_sequence_privilege(sequence, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| sequence | None |\n| privilege | None |\n",
            "detail": "has_sequence_privilege(sequence, privilege)"
        }
    },
    "disable_optimizer": {
        "documentation": {
            "documentation": "",
            "detail": "disable_optimizer()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_optimizer()"
        }
    },
    "disable_verify_serializer": {
        "documentation": {
            "documentation": "",
            "detail": "disable_verify_serializer()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_verify_serializer()"
        }
    },
    "array_contains": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_contains(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_contains(col0, col1)"
        }
    },
    "make_timestamptz": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BIGINT |\n| col1 | BIGINT |\n| col2 | BIGINT |\n| col3 | BIGINT |\n| col4 | BIGINT |\n| col5 | DOUBLE |\n",
            "detail": "make_timestamptz(col0, col1, col2, col3, col4, col5)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BIGINT |\n| col1 | BIGINT |\n| col2 | BIGINT |\n| col3 | BIGINT |\n| col4 | BIGINT |\n| col5 | DOUBLE |\n",
            "detail": "make_timestamptz(col0, col1, col2, col3, col4, col5)"
        }
    },
    "lcase": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "lcase(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "lcase(col0)"
        }
    },
    "json_group_array": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json_group_array(x)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json_group_array(x)"
        }
    },
    "pg_ts_template_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| template_oid | None |\n",
            "detail": "pg_ts_template_is_visible(template_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| template_oid | None |\n",
            "detail": "pg_ts_template_is_visible(template_oid)"
        }
    },
    "force_index_join": {
        "documentation": {
            "documentation": "",
            "detail": "force_index_join()"
        },
        "docstring": {
            "documentation": "",
            "detail": "force_index_join()"
        }
    },
    "array_to_json": {
        "documentation": {
            "documentation": "",
            "detail": "array_to_json()"
        },
        "docstring": {
            "documentation": "",
            "detail": "array_to_json()"
        }
    },
    "functions": {
        "documentation": {
            "documentation": "",
            "detail": "functions()"
        },
        "docstring": {
            "documentation": "",
            "detail": "functions()"
        }
    },
    "duckdb_indexes": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_indexes()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_indexes()"
        }
    },
    "prefix": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "prefix(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "prefix(col0, col1)"
        }
    },
    "has_server_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| server | None |\n| privilege | None |\n",
            "detail": "has_server_privilege(server, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| server | None |\n| privilege | None |\n",
            "detail": "has_server_privilege(server, privilege)"
        }
    },
    "array_append": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| el | None |\n",
            "detail": "array_append(arr, el)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| el | None |\n",
            "detail": "array_append(arr, el)"
        }
    },
    "dbgen": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| step | UINTEGER |\n| sf | DOUBLE |\n| overwrite | BOOLEAN |\n| suffix | VARCHAR |\n| catalog | VARCHAR |\n| schema | VARCHAR |\n| children | UINTEGER |\n",
            "detail": "dbgen(step, sf, overwrite, suffix, catalog, schema, children)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| step | UINTEGER |\n| sf | DOUBLE |\n| overwrite | BOOLEAN |\n| suffix | VARCHAR |\n| catalog | VARCHAR |\n| schema | VARCHAR |\n| children | UINTEGER |\n",
            "detail": "dbgen(step, sf, overwrite, suffix, catalog, schema, children)"
        }
    },
    "date_add": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| date | None |\n| interval | None |\n",
            "detail": "date_add(date, interval)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| date | None |\n| interval | None |\n",
            "detail": "date_add(date, interval)"
        }
    },
    "repeat_row": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| num_rows | BIGINT |\n",
            "detail": "repeat_row(num_rows)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| num_rows | BIGINT |\n",
            "detail": "repeat_row(num_rows)"
        }
    },
    "json_type": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_type(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_type(col0)"
        }
    },
    "icu_calendar_names": {
        "documentation": {
            "documentation": "",
            "detail": "icu_calendar_names()"
        },
        "docstring": {
            "documentation": "",
            "detail": "icu_calendar_names()"
        }
    },
    "read_json_objects": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_json_objects(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_json_objects(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        }
    },
    "list_extract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "list_extract(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "list_extract(col0, col1)"
        }
    },
    "has_column_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| column | None |\n| privilege | None |\n",
            "detail": "has_column_privilege(table, column, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| column | None |\n| privilege | None |\n",
            "detail": "has_column_privilege(table, column, privilege)"
        }
    },
    "verify_serializer": {
        "documentation": {
            "documentation": "",
            "detail": "verify_serializer()"
        },
        "docstring": {
            "documentation": "",
            "detail": "verify_serializer()"
        }
    },
    "json_group_structure": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json_group_structure(x)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json_group_structure(x)"
        }
    },
    "has_schema_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| schema | None |\n| privilege | None |\n",
            "detail": "has_schema_privilege(schema, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| schema | None |\n| privilege | None |\n",
            "detail": "has_schema_privilege(schema, privilege)"
        }
    },
    "checkpoint": {
        "documentation": {
            "documentation": "",
            "detail": "checkpoint()"
        },
        "docstring": {
            "documentation": "",
            "detail": "checkpoint()"
        }
    },
    "shobj_description": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| object_oid | None |\n| catalog_name | None |\n",
            "detail": "shobj_description(object_oid, catalog_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| object_oid | None |\n| catalog_name | None |\n",
            "detail": "shobj_description(object_oid, catalog_name)"
        }
    },
    "pg_has_role": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| user | None |\n| role | None |\n| privilege | None |\n",
            "detail": "pg_has_role(user, role, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| user | None |\n| role | None |\n| privilege | None |\n",
            "detail": "pg_has_role(user, role, privilege)"
        }
    },
    "list_position": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_position(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_position(col0, col1)"
        }
    },
    "pg_is_other_temp_schema": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| schema_id | None |\n",
            "detail": "pg_is_other_temp_schema(schema_id)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| schema_id | None |\n",
            "detail": "pg_is_other_temp_schema(schema_id)"
        }
    },
    "nfc_normalize": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "nfc_normalize(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "nfc_normalize(col0)"
        }
    },
    "enable_object_cache": {
        "documentation": {
            "documentation": "",
            "detail": "enable_object_cache()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_object_cache()"
        }
    },
    "json_group_object": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| name | None |\n| value | None |\n",
            "detail": "json_group_object(name, value)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| name | None |\n| value | None |\n",
            "detail": "json_group_object(name, value)"
        }
    },
    "nextval": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "nextval(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "nextval(col0)"
        }
    },
    "octet_length": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BLOB |\n",
            "detail": "octet_length(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BLOB |\n",
            "detail": "octet_length(col0)"
        }
    },
    "lower": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "lower(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "lower(col0)"
        }
    },
    "count": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n",
            "detail": "count(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n",
            "detail": "count(col0)"
        }
    },
    "json_extract_path_text": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_path_text(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_path_text(col0, col1)"
        }
    },
    "show_tables_expanded": {
        "documentation": {
            "documentation": "",
            "detail": "show_tables_expanded()"
        },
        "docstring": {
            "documentation": "",
            "detail": "show_tables_expanded()"
        }
    },
    "json_extract_string": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_string(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_string(col0, col1)"
        }
    },
    "pg_get_constraintdef": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| constraint_oid | None |\n| pretty_bool | None |\n",
            "detail": "pg_get_constraintdef(constraint_oid, pretty_bool)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| constraint_oid | None |\n| pretty_bool | None |\n",
            "detail": "pg_get_constraintdef(constraint_oid, pretty_bool)"
        }
    },
    "list_stddev_samp": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_stddev_samp(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_stddev_samp(l)"
        }
    },
    "list_contains": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_contains(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_contains(col0, col1)"
        }
    },
    "suffix": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "suffix(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "suffix(col0, col1)"
        }
    },
    "list_any_value": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_any_value(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_any_value(l)"
        }
    },
    "stem": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "stem(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "stem(col0, col1)"
        }
    },
    "add": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n",
            "detail": "add(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n",
            "detail": "add(col0)"
        }
    },
    "count_star": {
        "documentation": {
            "documentation": "",
            "detail": "count_star()"
        },
        "docstring": {
            "documentation": "",
            "detail": "count_star()"
        }
    },
    "array_concat": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "array_concat(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "array_concat(col0, col1)"
        }
    },
    "pg_collation_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| collation_oid | None |\n",
            "detail": "pg_collation_is_visible(collation_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| collation_oid | None |\n",
            "detail": "pg_collation_is_visible(collation_oid)"
        }
    },
    "pg_conversion_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| conversion_oid | None |\n",
            "detail": "pg_conversion_is_visible(conversion_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| conversion_oid | None |\n",
            "detail": "pg_conversion_is_visible(conversion_oid)"
        }
    },
    "arrow_scan_dumb": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "arrow_scan_dumb(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "arrow_scan_dumb(col0, col1, col2)"
        }
    },
    "verify_parallelism": {
        "documentation": {
            "documentation": "",
            "detail": "verify_parallelism()"
        },
        "docstring": {
            "documentation": "",
            "detail": "verify_parallelism()"
        }
    },
    "pg_type_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_oid | None |\n",
            "detail": "pg_type_is_visible(type_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_oid | None |\n",
            "detail": "pg_type_is_visible(type_oid)"
        }
    },
    "array_prepend": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| el | None |\n| arr | None |\n",
            "detail": "array_prepend(el, arr)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| el | None |\n| arr | None |\n",
            "detail": "array_prepend(el, arr)"
        }
    },
    "regexp_replace": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "regexp_replace(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "regexp_replace(col0, col1, col2)"
        }
    },
    "inet_client_addr": {
        "documentation": {
            "documentation": "",
            "detail": "inet_client_addr()"
        },
        "docstring": {
            "documentation": "",
            "detail": "inet_client_addr()"
        }
    },
    "fdiv": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| y | None |\n",
            "detail": "fdiv(x, y)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| y | None |\n",
            "detail": "fdiv(x, y)"
        }
    },
    "pg_get_viewdef": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| oid | None |\n",
            "detail": "pg_get_viewdef(oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| oid | None |\n",
            "detail": "pg_get_viewdef(oid)"
        }
    },
    "glob": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "glob(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "glob(col0)"
        }
    },
    "json_quote": {
        "documentation": {
            "documentation": "",
            "detail": "json_quote()"
        },
        "docstring": {
            "documentation": "",
            "detail": "json_quote()"
        }
    },
    "list_prepend": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| e | None |\n| l | None |\n",
            "detail": "list_prepend(e, l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| e | None |\n| l | None |\n",
            "detail": "list_prepend(e, l)"
        }
    },
    "test_all_types": {
        "documentation": {
            "documentation": "",
            "detail": "test_all_types()"
        },
        "docstring": {
            "documentation": "",
            "detail": "test_all_types()"
        }
    },
    "col_description": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table_oid | None |\n| column_number | None |\n",
            "detail": "col_description(table_oid, column_number)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table_oid | None |\n| column_number | None |\n",
            "detail": "col_description(table_oid, column_number)"
        }
    },
    "concat": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "concat(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "concat(col0)"
        }
    },
    "pg_ts_config_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| config_oid | None |\n",
            "detail": "pg_ts_config_is_visible(config_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| config_oid | None |\n",
            "detail": "pg_ts_config_is_visible(config_oid)"
        }
    },
    "current_localtime": {
        "documentation": {
            "documentation": "",
            "detail": "current_localtime()"
        },
        "docstring": {
            "documentation": "",
            "detail": "current_localtime()"
        }
    },
    "duckdb_temporary_files": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_temporary_files()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_temporary_files()"
        }
    },
    "array_position": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_position(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_position(col0, col1)"
        }
    },
    "disable_checkpoint_on_shutdown": {
        "documentation": {
            "documentation": "",
            "detail": "disable_checkpoint_on_shutdown()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_checkpoint_on_shutdown()"
        }
    },
    "duckdb_schemas": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_schemas()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_schemas()"
        }
    },
    "storage_info": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "storage_info(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "storage_info(col0)"
        }
    },
    "duckdb_tables": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_tables()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_tables()"
        }
    },
    "pg_typeof": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| expression | None |\n",
            "detail": "pg_typeof(expression)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| expression | None |\n",
            "detail": "pg_typeof(expression)"
        }
    },
    "ilike_escape": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "ilike_escape(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "ilike_escape(col0, col1, col2)"
        }
    },
    "len": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "len(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "len(col0)"
        }
    },
    "json_array": {
        "documentation": {
            "documentation": "",
            "detail": "json_array()"
        },
        "docstring": {
            "documentation": "",
            "detail": "json_array()"
        }
    },
    "python_map_function": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "python_map_function(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "python_map_function(col0, col1, col2)"
        }
    },
    "current_catalog": {
        "documentation": {
            "documentation": "",
            "detail": "current_catalog()"
        },
        "docstring": {
            "documentation": "",
            "detail": "current_catalog()"
        }
    },
    "substring_grapheme": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substring_grapheme(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substring_grapheme(col0, col1, col2)"
        }
    },
    "read_csv": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| sep | VARCHAR |\n| delim | VARCHAR |\n| parallel | BOOLEAN |\n| nullstr | VARCHAR |\n| quote | VARCHAR |\n| normalize_names | BOOLEAN |\n| new_line | VARCHAR |\n| escape | VARCHAR |\n| maximum_line_size | VARCHAR |\n| columns | ANY |\n| column_names | VARCHAR[] |\n| auto_type_candidates | ANY |\n| header | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| sample_chunk_size | BIGINT |\n| null_padding | BOOLEAN |\n| sample_chunks | BIGINT |\n| all_varchar | BOOLEAN |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| skip | BIGINT |\n| max_line_size | VARCHAR |\n| ignore_errors | BOOLEAN |\n| buffer_size | UBIGINT |\n| decimal_separator | VARCHAR |\n| allow_quoted_nulls | BOOLEAN |\n| column_types | ANY |\n| dtypes | ANY |\n| types | ANY |\n| names | VARCHAR[] |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_csv(col0, sep, delim, parallel, nullstr, quote, normalize_names, new_line, escape, maximum_line_size, columns, column_names, auto_type_candidates, header, auto_detect, sample_size, sample_chunk_size, null_padding, sample_chunks, all_varchar, dateformat, timestampformat, compression, filename, skip, max_line_size, ignore_errors, buffer_size, decimal_separator, allow_quoted_nulls, column_types, dtypes, types, names, hive_partitioning, union_by_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| sep | VARCHAR |\n| delim | VARCHAR |\n| parallel | BOOLEAN |\n| nullstr | VARCHAR |\n| quote | VARCHAR |\n| normalize_names | BOOLEAN |\n| new_line | VARCHAR |\n| escape | VARCHAR |\n| maximum_line_size | VARCHAR |\n| columns | ANY |\n| column_names | VARCHAR[] |\n| auto_type_candidates | ANY |\n| header | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| sample_chunk_size | BIGINT |\n| null_padding | BOOLEAN |\n| sample_chunks | BIGINT |\n| all_varchar | BOOLEAN |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| skip | BIGINT |\n| max_line_size | VARCHAR |\n| ignore_errors | BOOLEAN |\n| buffer_size | UBIGINT |\n| decimal_separator | VARCHAR |\n| allow_quoted_nulls | BOOLEAN |\n| column_types | ANY |\n| dtypes | ANY |\n| types | ANY |\n| names | VARCHAR[] |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_csv(col0, sep, delim, parallel, nullstr, quote, normalize_names, new_line, escape, maximum_line_size, columns, column_names, auto_type_candidates, header, auto_detect, sample_size, sample_chunk_size, null_padding, sample_chunks, all_varchar, dateformat, timestampformat, compression, filename, skip, max_line_size, ignore_errors, buffer_size, decimal_separator, allow_quoted_nulls, column_types, dtypes, types, names, hive_partitioning, union_by_name)"
        }
    },
    "json_transform": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_transform(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_transform(col0, col1)"
        }
    },
    "duckdb_dependencies": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_dependencies()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_dependencies()"
        }
    },
    "array_indexof": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_indexof(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_indexof(col0, col1)"
        }
    },
    "json_extract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract(col0, col1)"
        }
    },
    "all_profiling_output": {
        "documentation": {
            "documentation": "",
            "detail": "all_profiling_output()"
        },
        "docstring": {
            "documentation": "",
            "detail": "all_profiling_output()"
        }
    },
    "read_csv_auto": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| sep | VARCHAR |\n| delim | VARCHAR |\n| parallel | BOOLEAN |\n| nullstr | VARCHAR |\n| quote | VARCHAR |\n| normalize_names | BOOLEAN |\n| new_line | VARCHAR |\n| escape | VARCHAR |\n| maximum_line_size | VARCHAR |\n| columns | ANY |\n| column_names | VARCHAR[] |\n| auto_type_candidates | ANY |\n| header | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| sample_chunk_size | BIGINT |\n| null_padding | BOOLEAN |\n| sample_chunks | BIGINT |\n| all_varchar | BOOLEAN |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| skip | BIGINT |\n| max_line_size | VARCHAR |\n| ignore_errors | BOOLEAN |\n| buffer_size | UBIGINT |\n| decimal_separator | VARCHAR |\n| allow_quoted_nulls | BOOLEAN |\n| column_types | ANY |\n| dtypes | ANY |\n| types | ANY |\n| names | VARCHAR[] |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_csv_auto(col0, sep, delim, parallel, nullstr, quote, normalize_names, new_line, escape, maximum_line_size, columns, column_names, auto_type_candidates, header, auto_detect, sample_size, sample_chunk_size, null_padding, sample_chunks, all_varchar, dateformat, timestampformat, compression, filename, skip, max_line_size, ignore_errors, buffer_size, decimal_separator, allow_quoted_nulls, column_types, dtypes, types, names, hive_partitioning, union_by_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| sep | VARCHAR |\n| delim | VARCHAR |\n| parallel | BOOLEAN |\n| nullstr | VARCHAR |\n| quote | VARCHAR |\n| normalize_names | BOOLEAN |\n| new_line | VARCHAR |\n| escape | VARCHAR |\n| maximum_line_size | VARCHAR |\n| columns | ANY |\n| column_names | VARCHAR[] |\n| auto_type_candidates | ANY |\n| header | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| sample_chunk_size | BIGINT |\n| null_padding | BOOLEAN |\n| sample_chunks | BIGINT |\n| all_varchar | BOOLEAN |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| skip | BIGINT |\n| max_line_size | VARCHAR |\n| ignore_errors | BOOLEAN |\n| buffer_size | UBIGINT |\n| decimal_separator | VARCHAR |\n| allow_quoted_nulls | BOOLEAN |\n| column_types | ANY |\n| dtypes | ANY |\n| types | ANY |\n| names | VARCHAR[] |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_csv_auto(col0, sep, delim, parallel, nullstr, quote, normalize_names, new_line, escape, maximum_line_size, columns, column_names, auto_type_candidates, header, auto_detect, sample_size, sample_chunk_size, null_padding, sample_chunks, all_varchar, dateformat, timestampformat, compression, filename, skip, max_line_size, ignore_errors, buffer_size, decimal_separator, allow_quoted_nulls, column_types, dtypes, types, names, hive_partitioning, union_by_name)"
        }
    },
    "list_median": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_median(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_median(l)"
        }
    },
    "subtract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n",
            "detail": "subtract(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n",
            "detail": "subtract(col0)"
        }
    },
    "inet_server_port": {
        "documentation": {
            "documentation": "",
            "detail": "inet_server_port()"
        },
        "docstring": {
            "documentation": "",
            "detail": "inet_server_port()"
        }
    },
    "list_var_pop": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_var_pop(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_var_pop(l)"
        }
    },
    "session_user": {
        "documentation": {
            "documentation": "",
            "detail": "session_user()"
        },
        "docstring": {
            "documentation": "",
            "detail": "session_user()"
        }
    },
    "list_entropy": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_entropy(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_entropy(l)"
        }
    },
    "round_even": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| n | None |\n",
            "detail": "round_even(x, n)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| n | None |\n",
            "detail": "round_even(x, n)"
        }
    },
    "enable_optimizer": {
        "documentation": {
            "documentation": "",
            "detail": "enable_optimizer()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_optimizer()"
        }
    },
    "disable_profile": {
        "documentation": {
            "documentation": "",
            "detail": "disable_profile()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_profile()"
        }
    },
    "read_ndjson_objects": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_ndjson_objects(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_ndjson_objects(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        }
    },
    "enable_checkpoint_on_shutdown": {
        "documentation": {
            "documentation": "",
            "detail": "enable_checkpoint_on_shutdown()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_checkpoint_on_shutdown()"
        }
    },
    "list_element": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "list_element(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "list_element(col0, col1)"
        }
    },
    "array_extract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "array_extract(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | BIGINT |\n",
            "detail": "array_extract(col0, col1)"
        }
    },
    "disable_verify_external": {
        "documentation": {
            "documentation": "",
            "detail": "disable_verify_external()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_verify_external()"
        }
    },
    "first": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "first(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "first(col0)"
        }
    },
    "list_count": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_count(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_count(l)"
        }
    },
    "list_histogram": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_histogram(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_histogram(l)"
        }
    },
    "duckdb_sequences": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_sequences()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_sequences()"
        }
    },
    "show_tables": {
        "documentation": {
            "documentation": "",
            "detail": "show_tables()"
        },
        "docstring": {
            "documentation": "",
            "detail": "show_tables()"
        }
    },
    "strlen": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "strlen(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "strlen(col0)"
        }
    },
    "from_json_strict": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "from_json_strict(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "from_json_strict(col0, col1)"
        }
    },
    "has_function_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| function | None |\n| privilege | None |\n",
            "detail": "has_function_privilege(function, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| function | None |\n| privilege | None |\n",
            "detail": "has_function_privilege(function, privilege)"
        }
    },
    "summary": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n",
            "detail": "summary(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n",
            "detail": "summary(col0)"
        }
    },
    "read_ndjson": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_ndjson(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, timestampformat, timestamp_format, records)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_ndjson(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, timestampformat, timestamp_format, records)"
        }
    },
    "pg_opclass_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| opclass_oid | None |\n",
            "detail": "pg_opclass_is_visible(opclass_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| opclass_oid | None |\n",
            "detail": "pg_opclass_is_visible(opclass_oid)"
        }
    },
    "pg_function_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| function_oid | None |\n",
            "detail": "pg_function_is_visible(function_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| function_oid | None |\n",
            "detail": "pg_function_is_visible(function_oid)"
        }
    },
    "list_bool_or": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bool_or(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bool_or(l)"
        }
    },
    "duckdb_functions": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_functions()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_functions()"
        }
    },
    "user": {
        "documentation": {
            "documentation": "",
            "detail": "user()"
        },
        "docstring": {
            "documentation": "",
            "detail": "user()"
        }
    },
    "json_extract_path": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_path(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_extract_path(col0, col1)"
        }
    },
    "seq_scan": {
        "documentation": {
            "documentation": "",
            "detail": "seq_scan()"
        },
        "docstring": {
            "documentation": "",
            "detail": "seq_scan()"
        }
    },
    "show_databases": {
        "documentation": {
            "documentation": "",
            "detail": "show_databases()"
        },
        "docstring": {
            "documentation": "",
            "detail": "show_databases()"
        }
    },
    "split_part": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| string | None |\n| delimiter | None |\n| position | None |\n",
            "detail": "split_part(string, delimiter, position)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| string | None |\n| delimiter | None |\n| position | None |\n",
            "detail": "split_part(string, delimiter, position)"
        }
    },
    "regexp_extract_all": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_extract_all(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_extract_all(col0, col1)"
        }
    },
    "list_last": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_last(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_last(l)"
        }
    },
    "enable_verification": {
        "documentation": {
            "documentation": "",
            "detail": "enable_verification()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_verification()"
        }
    },
    "pg_ts_parser_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| parser_oid | None |\n",
            "detail": "pg_ts_parser_is_visible(parser_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| parser_oid | None |\n",
            "detail": "pg_ts_parser_is_visible(parser_oid)"
        }
    },
    "array_pop_back": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n",
            "detail": "array_pop_back(arr)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n",
            "detail": "array_pop_back(arr)"
        }
    },
    "pg_table_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table_oid | None |\n",
            "detail": "pg_table_is_visible(table_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table_oid | None |\n",
            "detail": "pg_table_is_visible(table_oid)"
        }
    },
    "substr": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substr(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substr(col0, col1, col2)"
        }
    },
    "tpch": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BIGINT |\n",
            "detail": "tpch(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | BIGINT |\n",
            "detail": "tpch(col0)"
        }
    },
    "array_has": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_has(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "array_has(col0, col1)"
        }
    },
    "read_parquet": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| binary_as_string | BOOLEAN |\n| file_row_number | BOOLEAN |\n| hive_partitioning | BOOLEAN |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_parquet(col0, binary_as_string, file_row_number, hive_partitioning, compression, filename, union_by_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| binary_as_string | BOOLEAN |\n| file_row_number | BOOLEAN |\n| hive_partitioning | BOOLEAN |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "read_parquet(col0, binary_as_string, file_row_number, hive_partitioning, compression, filename, union_by_name)"
        }
    },
    "substring": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substring(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | BIGINT |\n| col2 | BIGINT |\n",
            "detail": "substring(col0, col1, col2)"
        }
    },
    "pg_ts_dict_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| dict_oid | None |\n",
            "detail": "pg_ts_dict_is_visible(dict_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| dict_oid | None |\n",
            "detail": "pg_ts_dict_is_visible(dict_oid)"
        }
    },
    "list_mode": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_mode(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_mode(l)"
        }
    },
    "duckdb_settings": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_settings()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_settings()"
        }
    },
    "duckdb_types": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_types()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_types()"
        }
    },
    "list_bit_and": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_and(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_and(l)"
        }
    },
    "pg_postmaster_start_time": {
        "documentation": {
            "documentation": "",
            "detail": "pg_postmaster_start_time()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pg_postmaster_start_time()"
        }
    },
    "pragma_storage_info": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "pragma_storage_info(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "pragma_storage_info(col0)"
        }
    },
    "pragma_last_profiling_output": {
        "documentation": {
            "documentation": "",
            "detail": "pragma_last_profiling_output()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pragma_last_profiling_output()"
        }
    },
    "parquet_metadata": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "parquet_metadata(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "parquet_metadata(col0)"
        }
    },
    "disable_verification": {
        "documentation": {
            "documentation": "",
            "detail": "disable_verification()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_verification()"
        }
    },
    "bit_length": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "bit_length(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "bit_length(col0)"
        }
    },
    "current_localtimestamp": {
        "documentation": {
            "documentation": "",
            "detail": "current_localtimestamp()"
        },
        "docstring": {
            "documentation": "",
            "detail": "current_localtimestamp()"
        }
    },
    "tpch_answers": {
        "documentation": {
            "documentation": "",
            "detail": "tpch_answers()"
        },
        "docstring": {
            "documentation": "",
            "detail": "tpch_answers()"
        }
    },
    "json_execute_serialized_sql": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_execute_serialized_sql(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_execute_serialized_sql(col0)"
        }
    },
    "disable_verify_parallelism": {
        "documentation": {
            "documentation": "",
            "detail": "disable_verify_parallelism()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_verify_parallelism()"
        }
    },
    "pg_operator_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| operator_oid | None |\n",
            "detail": "pg_operator_is_visible(operator_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| operator_oid | None |\n",
            "detail": "pg_operator_is_visible(operator_oid)"
        }
    },
    "icu_sort_key": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "icu_sort_key(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "icu_sort_key(col0, col1)"
        }
    },
    "last": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "last(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "last(col0)"
        }
    },
    "table_info": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "table_info(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "table_info(col0)"
        }
    },
    "array_length": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n",
            "detail": "array_length(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n",
            "detail": "array_length(col0)"
        }
    },
    "array_to_string": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| sep | None |\n",
            "detail": "array_to_string(arr, sep)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| sep | None |\n",
            "detail": "array_to_string(arr, sep)"
        }
    },
    "arrow_scan": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "arrow_scan(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n| col1 | POINTER |\n| col2 | POINTER |\n",
            "detail": "arrow_scan(col0, col1, col2)"
        }
    },
    "json_structure": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_structure(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_structure(col0)"
        }
    },
    "json_object": {
        "documentation": {
            "documentation": "",
            "detail": "json_object()"
        },
        "docstring": {
            "documentation": "",
            "detail": "json_object()"
        }
    },
    "test_vector_types": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n| all_flat | BOOLEAN |\n",
            "detail": "test_vector_types(col0, all_flat)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n| all_flat | BOOLEAN |\n",
            "detail": "test_vector_types(col0, all_flat)"
        }
    },
    "list_bit_or": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_or(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_or(l)"
        }
    },
    "list_bit_xor": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_xor(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bit_xor(l)"
        }
    },
    "ucase": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "ucase(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "ucase(col0)"
        }
    },
    "duckdb_views": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_views()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_views()"
        }
    },
    "list_min": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_min(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_min(l)"
        }
    },
    "pragma_collations": {
        "documentation": {
            "documentation": "",
            "detail": "pragma_collations()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pragma_collations()"
        }
    },
    "list_cat": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "list_cat(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "list_cat(col0, col1)"
        }
    },
    "array_pop_front": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n",
            "detail": "array_pop_front(arr)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n",
            "detail": "array_pop_front(arr)"
        }
    },
    "format_pg_type": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_name | None |\n",
            "detail": "format_pg_type(type_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_name | None |\n",
            "detail": "format_pg_type(type_name)"
        }
    },
    "regexp_matches": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_matches(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_matches(col0, col1)"
        }
    },
    "read_json": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_json(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, timestampformat, timestamp_format, records)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_json(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, timestampformat, timestamp_format, records)"
        }
    },
    "json_array_length": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_array_length(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_array_length(col0)"
        }
    },
    "inet_client_port": {
        "documentation": {
            "documentation": "",
            "detail": "inet_client_port()"
        },
        "docstring": {
            "documentation": "",
            "detail": "inet_client_port()"
        }
    },
    "pg_get_expr": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| pg_node_tree | None |\n| relation_oid | None |\n",
            "detail": "pg_get_expr(pg_node_tree, relation_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| pg_node_tree | None |\n| relation_oid | None |\n",
            "detail": "pg_get_expr(pg_node_tree, relation_oid)"
        }
    },
    "combine": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | AGGREGATE_STATE<?> |\n| col1 | ANY |\n",
            "detail": "combine(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | AGGREGATE_STATE<?> |\n| col1 | ANY |\n",
            "detail": "combine(col0, col1)"
        }
    },
    "format_type": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_oid | None |\n| typemod | None |\n",
            "detail": "format_type(type_oid, typemod)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| type_oid | None |\n| typemod | None |\n",
            "detail": "format_type(type_oid, typemod)"
        }
    },
    "json_keys": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_keys(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_keys(col0)"
        }
    },
    "row_to_json": {
        "documentation": {
            "documentation": "",
            "detail": "row_to_json()"
        },
        "docstring": {
            "documentation": "",
            "detail": "row_to_json()"
        }
    },
    "enable_progress_bar": {
        "documentation": {
            "documentation": "",
            "detail": "enable_progress_bar()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_progress_bar()"
        }
    },
    "list_bool_and": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bool_and(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_bool_and(l)"
        }
    },
    "list_sem": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_sem(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_sem(l)"
        }
    },
    "has_database_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| database | None |\n| privilege | None |\n",
            "detail": "has_database_privilege(database, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| database | None |\n| privilege | None |\n",
            "detail": "has_database_privilege(database, privilege)"
        }
    },
    "json_transform_strict": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_transform_strict(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_transform_strict(col0, col1)"
        }
    },
    "list_mad": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_mad(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_mad(l)"
        }
    },
    "list_concat": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "list_concat(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "list_concat(col0, col1)"
        }
    },
    "parquet_schema": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "parquet_schema(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "parquet_schema(col0)"
        }
    },
    "list_var_samp": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_var_samp(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_var_samp(l)"
        }
    },
    "drop_fts_index": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "drop_fts_index(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "drop_fts_index(col0)"
        }
    },
    "collations": {
        "documentation": {
            "documentation": "",
            "detail": "collations()"
        },
        "docstring": {
            "documentation": "",
            "detail": "collations()"
        }
    },
    "arbitrary": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "arbitrary(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "arbitrary(col0)"
        }
    },
    "like_escape": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "like_escape(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "like_escape(col0, col1, col2)"
        }
    },
    "disable_print_progress_bar": {
        "documentation": {
            "documentation": "",
            "detail": "disable_print_progress_bar()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_print_progress_bar()"
        }
    },
    "parquet_scan": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| binary_as_string | BOOLEAN |\n| file_row_number | BOOLEAN |\n| hive_partitioning | BOOLEAN |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "parquet_scan(col0, binary_as_string, file_row_number, hive_partitioning, compression, filename, union_by_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| binary_as_string | BOOLEAN |\n| file_row_number | BOOLEAN |\n| hive_partitioning | BOOLEAN |\n| compression | VARCHAR |\n| filename | BOOLEAN |\n| union_by_name | BOOLEAN |\n",
            "detail": "parquet_scan(col0, binary_as_string, file_row_number, hive_partitioning, compression, filename, union_by_name)"
        }
    },
    "disable_profiling": {
        "documentation": {
            "documentation": "",
            "detail": "disable_profiling()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_profiling()"
        }
    },
    "array_push_back": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| e | None |\n",
            "detail": "array_push_back(arr, e)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| e | None |\n",
            "detail": "array_push_back(arr, e)"
        }
    },
    "list_kurtosis": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_kurtosis(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_kurtosis(l)"
        }
    },
    "duckdb_extensions": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_extensions()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_extensions()"
        }
    },
    "pragma_database_size": {
        "documentation": {
            "documentation": "",
            "detail": "pragma_database_size()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pragma_database_size()"
        }
    },
    "list_append": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n| e | None |\n",
            "detail": "list_append(l, e)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n| e | None |\n",
            "detail": "list_append(l, e)"
        }
    },
    "list_approx_count_distinct": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_approx_count_distinct(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_approx_count_distinct(l)"
        }
    },
    "has_tablespace_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| tablespace | None |\n| privilege | None |\n",
            "detail": "has_tablespace_privilege(tablespace, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| tablespace | None |\n| privilege | None |\n",
            "detail": "has_tablespace_privilege(tablespace, privilege)"
        }
    },
    "read_ndjson_auto": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| maximum_depth | BIGINT |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_ndjson_auto(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, maximum_depth, timestampformat, timestamp_format, records)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| maximum_depth | BIGINT |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_ndjson_auto(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, maximum_depth, timestampformat, timestamp_format, records)"
        }
    },
    "disable_object_cache": {
        "documentation": {
            "documentation": "",
            "detail": "disable_object_cache()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_object_cache()"
        }
    },
    "length": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "length(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "length(col0)"
        }
    },
    "show": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "show(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "show(col0)"
        }
    },
    "nullif": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| a | None |\n| b | None |\n",
            "detail": "nullif(a, b)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| a | None |\n| b | None |\n",
            "detail": "nullif(a, b)"
        }
    },
    "regexp_extract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_extract(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_extract(col0, col1)"
        }
    },
    "list_string_agg": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_string_agg(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_string_agg(l)"
        }
    },
    "fmod": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| y | None |\n",
            "detail": "fmod(x, y)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| y | None |\n",
            "detail": "fmod(x, y)"
        }
    },
    "import_database": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "import_database(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "import_database(col0)"
        }
    },
    "array_push_front": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| e | None |\n",
            "detail": "array_push_front(arr, e)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| arr | None |\n| e | None |\n",
            "detail": "array_push_front(arr, e)"
        }
    },
    "create_fts_index": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| stopwords | VARCHAR |\n| stemmer | VARCHAR |\n| ignore | VARCHAR |\n| lower | BOOLEAN |\n| strip_accents | BOOLEAN |\n| overwrite | BOOLEAN |\n",
            "detail": "create_fts_index(col0, col1, stopwords, stemmer, ignore, lower, strip_accents, overwrite)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| stopwords | VARCHAR |\n| stemmer | VARCHAR |\n| ignore | VARCHAR |\n| lower | BOOLEAN |\n| strip_accents | BOOLEAN |\n| overwrite | BOOLEAN |\n",
            "detail": "create_fts_index(col0, col1, stopwords, stemmer, ignore, lower, strip_accents, overwrite)"
        }
    },
    "json_contains": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_contains(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "json_contains(col0, col1)"
        }
    },
    "finalize": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | AGGREGATE_STATE<?> |\n",
            "detail": "finalize(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | AGGREGATE_STATE<?> |\n",
            "detail": "finalize(col0)"
        }
    },
    "pg_my_temp_schema": {
        "documentation": {
            "documentation": "",
            "detail": "pg_my_temp_schema()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pg_my_temp_schema()"
        }
    },
    "struct_extract": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | STRUCT |\n| col1 | VARCHAR |\n",
            "detail": "struct_extract(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | STRUCT |\n| col1 | VARCHAR |\n",
            "detail": "struct_extract(col0, col1)"
        }
    },
    "from_json": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "from_json(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "from_json(col0, col1)"
        }
    },
    "has_any_column_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| privilege | None |\n",
            "detail": "has_any_column_privilege(table, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| privilege | None |\n",
            "detail": "has_any_column_privilege(table, privilege)"
        }
    },
    "list_skewness": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_skewness(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_skewness(l)"
        }
    },
    "count_if": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "count_if(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "count_if(l)"
        }
    },
    "currval": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "currval(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "currval(col0)"
        }
    },
    "duckdb_keywords": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_keywords()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_keywords()"
        }
    },
    "length_grapheme": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "length_grapheme(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "length_grapheme(col0)"
        }
    },
    "list_product": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_product(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_product(l)"
        }
    },
    "list_first": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_first(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_first(l)"
        }
    },
    "current_user": {
        "documentation": {
            "documentation": "",
            "detail": "current_user()"
        },
        "docstring": {
            "documentation": "",
            "detail": "current_user()"
        }
    },
    "has_table_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| privilege | None |\n",
            "detail": "has_table_privilege(table, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| table | None |\n| privilege | None |\n",
            "detail": "has_table_privilege(table, privilege)"
        }
    },
    "list_sum": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_sum(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_sum(l)"
        }
    },
    "verify_external": {
        "documentation": {
            "documentation": "",
            "detail": "verify_external()"
        },
        "docstring": {
            "documentation": "",
            "detail": "verify_external()"
        }
    },
    "divide": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "divide(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "divide(col0, col1)"
        }
    },
    "constant_or_null": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n| col1 | ANY |\n",
            "detail": "constant_or_null(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY |\n| col1 | ANY |\n",
            "detail": "constant_or_null(col0, col1)"
        }
    },
    "pg_size_pretty": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| bytes | None |\n",
            "detail": "pg_size_pretty(bytes)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| bytes | None |\n",
            "detail": "pg_size_pretty(bytes)"
        }
    },
    "database_size": {
        "documentation": {
            "documentation": "",
            "detail": "database_size()"
        },
        "docstring": {
            "documentation": "",
            "detail": "database_size()"
        }
    },
    "json_valid": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_valid(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_valid(col0)"
        }
    },
    "mod": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "mod(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "mod(col0, col1)"
        }
    },
    "to_json": {
        "documentation": {
            "documentation": "",
            "detail": "to_json()"
        },
        "docstring": {
            "documentation": "",
            "detail": "to_json()"
        }
    },
    "list_avg": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_avg(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_avg(l)"
        }
    },
    "pragma_version": {
        "documentation": {
            "documentation": "",
            "detail": "pragma_version()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pragma_version()"
        }
    },
    "pragma_table_info": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "pragma_table_info(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "pragma_table_info(col0)"
        }
    },
    "not_like_escape": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "not_like_escape(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "not_like_escape(col0, col1, col2)"
        }
    },
    "has_language_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| language | None |\n| privilege | None |\n",
            "detail": "has_language_privilege(language, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| language | None |\n| privilege | None |\n",
            "detail": "has_language_privilege(language, privilege)"
        }
    },
    "multiply": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "multiply(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TINYINT |\n| col1 | TINYINT |\n",
            "detail": "multiply(col0, col1)"
        }
    },
    "pragma_detailed_profiling_output": {
        "documentation": {
            "documentation": "",
            "detail": "pragma_detailed_profiling_output()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pragma_detailed_profiling_output()"
        }
    },
    "index_scan": {
        "documentation": {
            "documentation": "",
            "detail": "index_scan()"
        },
        "docstring": {
            "documentation": "",
            "detail": "index_scan()"
        }
    },
    "obj_description": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| object_oid | None |\n| catalog_name | None |\n",
            "detail": "obj_description(object_oid, catalog_name)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| object_oid | None |\n| catalog_name | None |\n",
            "detail": "obj_description(object_oid, catalog_name)"
        }
    },
    "upper": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "upper(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "upper(col0)"
        }
    },
    "pg_timezone_names": {
        "documentation": {
            "documentation": "",
            "detail": "pg_timezone_names()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pg_timezone_names()"
        }
    },
    "pg_opfamily_is_visible": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| opclass_oid | None |\n",
            "detail": "pg_opfamily_is_visible(opclass_oid)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| opclass_oid | None |\n",
            "detail": "pg_opfamily_is_visible(opclass_oid)"
        }
    },
    "read_json_objects_auto": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_json_objects_auto(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| format | VARCHAR |\n| filename | BOOLEAN |\n| compression | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n",
            "detail": "read_json_objects_auto(col0, format, filename, compression, hive_partitioning, union_by_name, maximum_object_size, ignore_errors)"
        }
    },
    "list_indexof": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_indexof(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_indexof(col0, col1)"
        }
    },
    "tpch_queries": {
        "documentation": {
            "documentation": "",
            "detail": "tpch_queries()"
        },
        "docstring": {
            "documentation": "",
            "detail": "tpch_queries()"
        }
    },
    "duckdb_columns": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_columns()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_columns()"
        }
    },
    "json": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json(x)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n",
            "detail": "json(x)"
        }
    },
    "json_serialize_sql": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_serialize_sql(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "json_serialize_sql(col0)"
        }
    },
    "json_deserialize_sql": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | JSON |\n",
            "detail": "json_deserialize_sql(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | JSON |\n",
            "detail": "json_deserialize_sql(col0)"
        }
    },
    "strip_accents": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "strip_accents(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n",
            "detail": "strip_accents(col0)"
        }
    },
    "inet_server_addr": {
        "documentation": {
            "documentation": "",
            "detail": "inet_server_addr()"
        },
        "docstring": {
            "documentation": "",
            "detail": "inet_server_addr()"
        }
    },
    "regexp_full_match": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_full_match(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "regexp_full_match(col0, col1)"
        }
    },
    "enable_profile": {
        "documentation": {
            "documentation": "",
            "detail": "enable_profile()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_profile()"
        }
    },
    "roundbankers": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| n | None |\n",
            "detail": "roundbankers(x, n)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| x | None |\n| n | None |\n",
            "detail": "roundbankers(x, n)"
        }
    },
    "has_foreign_data_wrapper_privilege": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| fdw | None |\n| privilege | None |\n",
            "detail": "has_foreign_data_wrapper_privilege(fdw, privilege)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| fdw | None |\n| privilege | None |\n",
            "detail": "has_foreign_data_wrapper_privilege(fdw, privilege)"
        }
    },
    "pg_conf_load_time": {
        "documentation": {
            "documentation": "",
            "detail": "pg_conf_load_time()"
        },
        "docstring": {
            "documentation": "",
            "detail": "pg_conf_load_time()"
        }
    },
    "current_role": {
        "documentation": {
            "documentation": "",
            "detail": "current_role()"
        },
        "docstring": {
            "documentation": "",
            "detail": "current_role()"
        }
    },
    "any_value": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "any_value(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | DECIMAL |\n",
            "detail": "any_value(col0)"
        }
    },
    "concat_ws": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "concat_ws(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n",
            "detail": "concat_ws(col0, col1)"
        }
    },
    "array_cat": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "array_cat(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY[] |\n",
            "detail": "array_cat(col0, col1)"
        }
    },
    "duckdb_constraints": {
        "documentation": {
            "documentation": "",
            "detail": "duckdb_constraints()"
        },
        "docstring": {
            "documentation": "",
            "detail": "duckdb_constraints()"
        }
    },
    "force_checkpoint": {
        "documentation": {
            "documentation": "",
            "detail": "force_checkpoint()"
        },
        "docstring": {
            "documentation": "",
            "detail": "force_checkpoint()"
        }
    },
    "list_max": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_max(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_max(l)"
        }
    },
    "database_list": {
        "documentation": {
            "documentation": "",
            "detail": "database_list()"
        },
        "docstring": {
            "documentation": "",
            "detail": "database_list()"
        }
    },
    "not_ilike_escape": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "not_ilike_escape(col0, col1, col2)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| col1 | VARCHAR |\n| col2 | VARCHAR |\n",
            "detail": "not_ilike_escape(col0, col1, col2)"
        }
    },
    "pandas_scan": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n",
            "detail": "pandas_scan(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | POINTER |\n",
            "detail": "pandas_scan(col0)"
        }
    },
    "list_stddev_pop": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_stddev_pop(l)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| l | None |\n",
            "detail": "list_stddev_pop(l)"
        }
    },
    "disable_progress_bar": {
        "documentation": {
            "documentation": "",
            "detail": "disable_progress_bar()"
        },
        "docstring": {
            "documentation": "",
            "detail": "disable_progress_bar()"
        }
    },
    "enable_profiling": {
        "documentation": {
            "documentation": "",
            "detail": "enable_profiling()"
        },
        "docstring": {
            "documentation": "",
            "detail": "enable_profiling()"
        }
    },
    "unnest": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n",
            "detail": "unnest(col0)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | TABLE |\n",
            "detail": "unnest(col0)"
        }
    },
    "read_json_auto": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| maximum_depth | BIGINT |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_json_auto(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, maximum_depth, timestampformat, timestamp_format, records)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | VARCHAR |\n| filename | BOOLEAN |\n| format | VARCHAR |\n| compression | VARCHAR |\n| date_format | VARCHAR |\n| hive_partitioning | BOOLEAN |\n| union_by_name | BOOLEAN |\n| columns | ANY |\n| maximum_object_size | UINTEGER |\n| ignore_errors | BOOLEAN |\n| auto_detect | BOOLEAN |\n| sample_size | BIGINT |\n| dateformat | VARCHAR |\n| maximum_depth | BIGINT |\n| timestampformat | VARCHAR |\n| timestamp_format | VARCHAR |\n| records | VARCHAR |\n",
            "detail": "read_json_auto(col0, filename, format, compression, date_format, hive_partitioning, union_by_name, columns, maximum_object_size, ignore_errors, auto_detect, sample_size, dateformat, maximum_depth, timestampformat, timestamp_format, records)"
        }
    },
    "list_has": {
        "documentation": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_has(col0, col1)"
        },
        "docstring": {
            "documentation": "| Parameter | Type |\n| ------------- | ------------ |\n| col0 | ANY[] |\n| col1 | ANY |\n",
            "detail": "list_has(col0, col1)"
        }
    }
}