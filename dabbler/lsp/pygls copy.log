INFO:pygls.server:Starting IO server
DEBUG:pygls.server:Content length: 5869
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 5869\r\n\r\n{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":15624,"clientInfo":{"name":"Visual Studio Code","version":"1.88.0"},"locale":"en","rootPath":"c:\\\\Users\\\\ryanw\\\\python_projects\\\\dabbler\\\\dabbler","rootUri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"codeLens":{"refreshSupport":true},"executeCommand":{"dynamicRegistration":true},"didChangeConfiguration":{"dynamicRegistration":true},"workspaceFolders":true,"semanticTokens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"didRename":true,"didDelete":true,"willCreate":true,"willRename":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"diagnostics":{"refreshSupport":true}},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]},"codeDescriptionSupport":true,"dataSupport":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"insertTextMode":2,"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]},"labelSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"honorsChangeAnnotations":false},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"requests":{"range":true,"full":{"delta":true}},"multilineTokenSupport":false,"overlappingTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"linkedEditingRange":{"dynamicRegistration":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true},"workDoneProgress":true},"general":{"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"]},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}}},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler","name":"dabbler"}]}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
INFO:pygls.protocol.language_server:Language server initialized InitializeParams(capabilities=ClientCapabilities(workspace=WorkspaceClientCapabilities(apply_edit=True, workspace_edit=WorkspaceEditClientCapabilities(document_changes=True, resource_operations=[<ResourceOperationKind.Create: 'create'>, <ResourceOperationKind.Rename: 'rename'>, <ResourceOperationKind.Delete: 'delete'>], failure_handling=<FailureHandlingKind.TextOnlyTransactional: 'textOnlyTransactional'>, normalizes_line_endings=True, change_annotation_support=WorkspaceEditClientCapabilitiesChangeAnnotationSupportType(groups_on_label=True)), did_change_configuration=DidChangeConfigurationClientCapabilities(dynamic_registration=True), did_change_watched_files=DidChangeWatchedFilesClientCapabilities(dynamic_registration=True, relative_pattern_support=True), symbol=WorkspaceSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), tag_support=WorkspaceSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), resolve_support=WorkspaceSymbolClientCapabilitiesResolveSupportType(properties=['location.range'])), execute_command=ExecuteCommandClientCapabilities(dynamic_registration=True), workspace_folders=True, configuration=True, semantic_tokens=SemanticTokensWorkspaceClientCapabilities(refresh_support=True), code_lens=CodeLensWorkspaceClientCapabilities(refresh_support=True), file_operations=FileOperationClientCapabilities(dynamic_registration=True, did_create=True, will_create=True, did_rename=True, will_rename=True, did_delete=True, will_delete=True), inline_value=InlineValueWorkspaceClientCapabilities(refresh_support=True), inlay_hint=InlayHintWorkspaceClientCapabilities(refresh_support=True), diagnostics=DiagnosticWorkspaceClientCapabilities(refresh_support=True), folding_range=None), text_document=TextDocumentClientCapabilities(synchronization=TextDocumentSyncClientCapabilities(dynamic_registration=True, will_save=True, will_save_wait_until=True, did_save=True), completion=CompletionClientCapabilities(dynamic_registration=True, completion_item=CompletionClientCapabilitiesCompletionItemType(snippet_support=True, commit_characters_support=True, documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], deprecated_support=True, preselect_support=True, tag_support=CompletionClientCapabilitiesCompletionItemTypeTagSupportType(value_set=[<CompletionItemTag.Deprecated: 1>]), insert_replace_support=True, resolve_support=CompletionClientCapabilitiesCompletionItemTypeResolveSupportType(properties=['documentation', 'detail', 'additionalTextEdits']), insert_text_mode_support=CompletionClientCapabilitiesCompletionItemTypeInsertTextModeSupportType(value_set=[<InsertTextMode.AsIs: 1>, <InsertTextMode.AdjustIndentation: 2>]), label_details_support=True), completion_item_kind=CompletionClientCapabilitiesCompletionItemKindType(value_set=[<CompletionItemKind.Text: 1>, <CompletionItemKind.Method: 2>, <CompletionItemKind.Function: 3>, <CompletionItemKind.Constructor: 4>, <CompletionItemKind.Field: 5>, <CompletionItemKind.Variable: 6>, <CompletionItemKind.Class: 7>, <CompletionItemKind.Interface: 8>, <CompletionItemKind.Module: 9>, <CompletionItemKind.Property: 10>, <CompletionItemKind.Unit: 11>, <CompletionItemKind.Value: 12>, <CompletionItemKind.Enum: 13>, <CompletionItemKind.Keyword: 14>, <CompletionItemKind.Snippet: 15>, <CompletionItemKind.Color: 16>, <CompletionItemKind.File: 17>, <CompletionItemKind.Reference: 18>, <CompletionItemKind.Folder: 19>, <CompletionItemKind.EnumMember: 20>, <CompletionItemKind.Constant: 21>, <CompletionItemKind.Struct: 22>, <CompletionItemKind.Event: 23>, <CompletionItemKind.Operator: 24>, <CompletionItemKind.TypeParameter: 25>]), insert_text_mode=<InsertTextMode.AdjustIndentation: 2>, context_support=True, completion_list=CompletionClientCapabilitiesCompletionListType(item_defaults=['commitCharacters', 'editRange', 'insertTextFormat', 'insertTextMode'])), hover=HoverClientCapabilities(dynamic_registration=True, content_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>]), signature_help=SignatureHelpClientCapabilities(dynamic_registration=True, signature_information=SignatureHelpClientCapabilitiesSignatureInformationType(documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], parameter_information=SignatureHelpClientCapabilitiesSignatureInformationTypeParameterInformationType(label_offset_support=True), active_parameter_support=True), context_support=True), declaration=DeclarationClientCapabilities(dynamic_registration=True, link_support=True), definition=DefinitionClientCapabilities(dynamic_registration=True, link_support=True), type_definition=TypeDefinitionClientCapabilities(dynamic_registration=True, link_support=True), implementation=ImplementationClientCapabilities(dynamic_registration=True, link_support=True), references=ReferenceClientCapabilities(dynamic_registration=True), document_highlight=DocumentHighlightClientCapabilities(dynamic_registration=True), document_symbol=DocumentSymbolClientCapabilities(dynamic_registration=True, symbol_kind=DocumentSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), hierarchical_document_symbol_support=True, tag_support=DocumentSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), label_support=True), code_action=CodeActionClientCapabilities(dynamic_registration=True, code_action_literal_support=CodeActionClientCapabilitiesCodeActionLiteralSupportType(code_action_kind=CodeActionClientCapabilitiesCodeActionLiteralSupportTypeCodeActionKindType(value_set=['', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 'refactor.rewrite', 'source', 'source.organizeImports'])), is_preferred_support=True, disabled_support=True, data_support=True, resolve_support=CodeActionClientCapabilitiesResolveSupportType(properties=['edit']), honors_change_annotations=False), code_lens=CodeLensClientCapabilities(dynamic_registration=True), document_link=DocumentLinkClientCapabilities(dynamic_registration=True, tooltip_support=True), color_provider=DocumentColorClientCapabilities(dynamic_registration=True), formatting=DocumentFormattingClientCapabilities(dynamic_registration=True), range_formatting=DocumentRangeFormattingClientCapabilities(dynamic_registration=True, ranges_support=None), on_type_formatting=DocumentOnTypeFormattingClientCapabilities(dynamic_registration=True), rename=RenameClientCapabilities(dynamic_registration=True, prepare_support=True, prepare_support_default_behavior=<PrepareSupportDefaultBehavior.Identifier: 1>, honors_change_annotations=True), folding_range=FoldingRangeClientCapabilities(dynamic_registration=True, range_limit=5000, line_folding_only=True, folding_range_kind=FoldingRangeClientCapabilitiesFoldingRangeKindType(value_set=['comment', 'imports', 'region']), folding_range=FoldingRangeClientCapabilitiesFoldingRangeType(collapsed_text=False)), selection_range=SelectionRangeClientCapabilities(dynamic_registration=True), publish_diagnostics=PublishDiagnosticsClientCapabilities(related_information=True, tag_support=PublishDiagnosticsClientCapabilitiesTagSupportType(value_set=[<DiagnosticTag.Unnecessary: 1>, <DiagnosticTag.Deprecated: 2>]), version_support=False, code_description_support=True, data_support=True), call_hierarchy=CallHierarchyClientCapabilities(dynamic_registration=True), semantic_tokens=SemanticTokensClientCapabilities(requests=SemanticTokensClientCapabilitiesRequestsType(range=True, full=SemanticTokensClientCapabilitiesRequestsTypeFullType1(delta=True)), token_types=['namespace', 'type', 'class', 'enum', 'interface', 'struct', 'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 'number', 'regexp', 'operator', 'decorator'], token_modifiers=['declaration', 'definition', 'readonly', 'static', 'deprecated', 'abstract', 'async', 'modification', 'documentation', 'defaultLibrary'], formats=[<TokenFormat.Relative: 'relative'>], dynamic_registration=True, overlapping_token_support=False, multiline_token_support=False, server_cancel_support=True, augments_syntax_tokens=True), linked_editing_range=LinkedEditingRangeClientCapabilities(dynamic_registration=True), moniker=None, type_hierarchy=TypeHierarchyClientCapabilities(dynamic_registration=True), inline_value=InlineValueClientCapabilities(dynamic_registration=True), inlay_hint=InlayHintClientCapabilities(dynamic_registration=True, resolve_support=InlayHintClientCapabilitiesResolveSupportType(properties=['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command'])), diagnostic=DiagnosticClientCapabilities(dynamic_registration=True, related_document_support=False), inline_completion=None), notebook_document=NotebookDocumentClientCapabilities(synchronization=NotebookDocumentSyncClientCapabilities(dynamic_registration=True, execution_summary_support=True)), window=WindowClientCapabilities(work_done_progress=True, show_message=ShowMessageRequestClientCapabilities(message_action_item=ShowMessageRequestClientCapabilitiesMessageActionItemType(additional_properties_support=True)), show_document=ShowDocumentClientCapabilities(support=True)), general=GeneralClientCapabilities(stale_request_support=GeneralClientCapabilitiesStaleRequestSupportType(cancel=True, retry_on_content_modified=['textDocument/semanticTokens/full', 'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta']), regular_expressions=RegularExpressionsClientCapabilities(engine='ECMAScript', version='ES2020'), markdown=MarkdownClientCapabilities(parser='marked', version='1.1.0', allowed_tags=None), position_encodings=['utf-16']), experimental=None), process_id=15624, client_info=InitializeParamsClientInfoType(name='Visual Studio Code', version='1.88.0'), locale='en', root_path='c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler', root_uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler', initialization_options=None, trace=<TraceValues.Off: 'off'>, work_done_token=None, workspace_folders=[WorkspaceFolder(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler', name='dabbler')])
DEBUG:pygls.protocol.language_server:Server capabilities: {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": false}, "completionProvider": {"triggerCharacters": [":", ".", " ", "/"], "allCommitCharacters": []}, "executeCommandProvider": {"commands": ["sendSqlToDbDabbler", "dbDabblerFormatCurrentStatement"]}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": false}, "completionProvider": {"triggerCharacters": [":", ".", " ", "/"], "allCommitCharacters": []}, "executeCommandProvider": {"commands": ["sendSqlToDbDabbler", "dbDabblerFormatCurrentStatement"]}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}, "serverInfo": {"name": "pygls-json-example", "version": "v0.1"}}}
DEBUG:pygls.server:Content length: 52
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 52\r\n\r\n{"jsonrpc":"2.0","method":"initialized","params":{}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 20678
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 20678\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/lsp/server_classes.py","languageId":"python","version":8,"text":"import os\\r\\nimport sys\\r\\nimport logging\\r\\nfrom pathlib import Path\\r\\nimport pprint\\r\\nfrom logging.handlers import SocketHandler\\r\\nimport re as regex\\r\\nimport zmq\\r\\nfrom dataclasses import dataclass\\r\\nfrom zmq.asyncio import Context, Socket as AsyncSocket, Poller\\r\\nfrom pygls.server import LanguageServer\\r\\nimport pickle\\r\\nimport asyncio\\r\\nfrom dabbler.lsp.db_data import make_db, make_completion_map\\r\\nfrom dabbler.lsp.sql_utils import strip_sql_whitespace, SelectNode, CmpItem\\r\\nfrom dabbler.lsp.completion import (\\r\\n    PathCompleter,\\r\\n    duckdb_extensions,\\r\\n    duckdb_settings,\\r\\n    duckdb_pragmas,\\r\\n    duckdb_types,\\r\\n    file_path_completion_regex,\\r\\n)\\r\\nfrom dabbler.lsp.parser import SqlParserNew\\r\\nfrom dabbler.common import FromLangServer, ToLangServer, KeyFile, PprintSocketHandler, grammer_kw\\r\\n\\r\\n# from dabbler.lsp.completer import CmpItem\\r\\nfrom lsprotocol.types import (\\r\\n    CompletionItem,\\r\\n    CompletionList,\\r\\n    CompletionItemKind,\\r\\n)\\r\\n\\r\\n\\r\\n# %%\\r\\n\\r\\n\\r\\nclass InlineSqlLangServer(LanguageServer):\\r\\n    CMD_SEND_SQL_TO_GUI = \\"sendSqlToDbDabbler\\"\\r\\n    CMD_FORMAT_CURRENT_STATEMENT = \\"dbDabblerFormatCurrentStatement\\"\\r\\n    CONFIGURATION_SECTION = \\"pygls.jsonServer\\"\\r\\n\\r\\n    def __init__(self, *args):\\r\\n        super().__init__(*args)\\r\\n\\r\\n        self.log = logging.getLogger(\\"dabbler_lsp\\")\\r\\n        self.debug = False\\r\\n        self.create_sockets2()\\r\\n\\r\\n        self.completer: \\"SqlCompleter\\" = None\\r\\n        self.socket_connected = False\\r\\n        self.socket_created = False\\r\\n        self.key_file: KeyFile = None\\r\\n\\r\\n    def start_io(self, stdin = None, stdout = None):\\r\\n\\r\\n        self.loop.create_task(self.zmq_recv(self.poller))\\r\\n        # self.loop.run_until_complete(self.zmq_recv(self.poller))\\r\\n        super().start_io(stdin, stdout)\\r\\n        \\r\\n    def start_logging(self):\\r\\n        if self.debug:\\r\\n            return\\r\\n        self.debug = True\\r\\n        self.log.setLevel(1)  # to send all records to cutelog\\r\\n        socket_handler = PprintSocketHandler(\\r\\n            \\"127.0.0.1\\", 19996\\r\\n        )  # default listening address\\r\\n        self.log.addHandler(socket_handler)\\r\\n        self.log.info(\\"logging started\\")\\r\\n        self.log.debug(os.environ)\\r\\n\\r\\n    def log_workspace_info(self):\\r\\n        if self.debug is False:\\r\\n            return\\r\\n        if self.workspace is None:\\r\\n            self.log.debug(f\\"workspace is None\\")\\r\\n            return\\r\\n        workspace_info = {\\r\\n            \\"root_uri\\": self.workspace.root_uri,\\r\\n            \\"root_path\\": self.workspace.root_path,\\r\\n            \\"folders\\": self.workspace.folders,\\r\\n            \\"documents\\": self.workspace.documents,\\r\\n        }\\r\\n        self.log.debug([\\"workspace_info\\", workspace_info])\\r\\n        \\r\\n    def find_port(self):\\r\\n        ctx = zmq.Context()\\r\\n        socket = ctx.socket(zmq.PAIR)\\r\\n        port = socket.bind_to_random_port(\\"tcp://127.0.0.1\\")\\r\\n        socket.close()\\r\\n        return port\\r\\n    \\r\\n\\r\\n\\r\\n    def create_sockets2(self):\\r\\n        \\r\\n        ctx1 = Context().instance()\\r\\n        self.socket = ctx1.socket(zmq.PAIR)\\r\\n        self.main_port = self.find_port()\\r\\n        self.socket.connect(f\\"tcp://127.0.0.1:{self.main_port}\\")\\r\\n\\r\\n        # ctx2 = Context().instance()\\r\\n        self.handshake_socket = ctx1.socket(zmq.PAIR)\\r\\n        self.handshake_port = self.find_port()\\r\\n        self.handshake_socket.bind(f\\"tcp://127.0.0.1:{self.handshake_port}\\")\\r\\n\\r\\n        self.poller = Poller()\\r\\n        self.poller.register(self.socket, zmq.POLLIN)\\r\\n        self.poller.register(self.handshake_socket, zmq.POLLIN)\\r\\n        # self.loop.create_task(self.zmq_recv(self.poller))\\r\\n        \\r\\n        self.log.debug(f\\"main_port {self.main_port}, handshake_port {self.handshake_port}\\")\\r\\n\\r\\n    def save_key_file(self):\\r\\n        if self.key_file:\\r\\n            return\\r\\n        if self.workspace is None:\\r\\n            self.log.debug(f\\"workspace is None, keyfile not saved\\")\\r\\n            return\\r\\n        self.key_file = KeyFile()\\r\\n        \\r\\n        workpace_path = str(self.workspace.root_path)\\r\\n        \\r\\n        connection = self.key_file.add_connection(\\r\\n            workpace_path,\\r\\n            {\\r\\n                \\"workspace_path\\": workpace_path,\\r\\n                \\"main_port\\": self.main_port,\\r\\n                \\"handshake_port\\": self.handshake_port,\\r\\n            },\\r\\n        )\\r\\n        self.connection_info = connection\\r\\n        self.log.debug(f\\"key_file {self.key_file.connections}\\")\\r\\n        self.zmq_send({\\"cmd\\": \\"db_data_update\\",\\"con_id\\":self.connection_info[\'server_id\']})\\r\\n\\r\\n    async def zmq_recv(self, poller: Poller):\\r\\n        # self.show_message_log(\'zmq_recv started\')\\r\\n        while self._stop_event is None:\\r\\n            # self.show_message_log(\'waiting for stop event to be created\')\\r\\n            await asyncio.sleep(0.1)\\r\\n        stop = self._stop_event\\r\\n        # self.show_message_log(f\'{type(self._stop_event)}\')\\r\\n\\r\\n        while not stop.is_set():\\r\\n            # buff = await self.socket.recv()\\r\\n\\r\\n            # if not await socket.poll(100):\\r\\n            # continue\\r\\n\\r\\n            socks: dict[AsyncSocket, AsyncSocket] = dict(await poller.poll())\\r\\n\\r\\n            for socket in socks:\\r\\n                buff = await socket.recv()\\r\\n\\r\\n                if not self.socket_connected:\\r\\n                    self.socket_connected = True\\r\\n                    self.show_message_log(\\"connected to IPython\\")\\r\\n                msg: ToLangServer = pickle.loads(buff)\\r\\n                # self.show_message_log(f\\"zmq recv {msg}\\")\\r\\n                if msg[\\"cmd\\"] == \\"db_data\\":\\r\\n                    # self.db_data = read_db_data(msg[\'data\'])\\r\\n                    self.completer = SqlCompleter(msg[\\"data\\"], self)\\r\\n                    # self.comp_thread_put({\'cmd\':\'new_completer\',\'data\':SqlCompleter(msg[\'data\'],None)},0)\\r\\n                    self.show_message_log(\\"recieved db_data\\")\\r\\n\\r\\n                if msg[\\"cmd\\"] == \\"ip_python_started\\":\\r\\n                    self.show_message_log(f\\"ip_python_started = {msg[\'data\']}\\")\\r\\n                    self.zmq_send({\\"cmd\\": \\"db_data_update\\"})\\r\\n\\r\\n                if msg[\\"cmd\\"] == \\"ip\\":\\r\\n                    self.show_message_log(f\\"ipython event = {msg[\'data\']}\\")\\r\\n\\r\\n                if msg[\\"cmd\\"] == \\"no_update\\":\\r\\n                    self.show_message_log(\\"check update: no update\\")\\r\\n\\r\\n                if msg[\\"cmd\\"] == \\"debug\\":\\r\\n                    if msg[\\"data\\"]:\\r\\n                        self.start_logging()\\r\\n                        \\r\\n                if msg[\\"cmd\\"] == \\"heartbeat\\":\\r\\n                    self.handshake_socket.send(pickle.dumps({\\"cmd\\": \\"heartbeat\\"}))\\r\\n                \\r\\n                if msg[\\"cmd\\"] == \\"connection_id\\":\\r\\n                    con_id = msg[\\"data\\"]\\r\\n                    if con_id == self.connection_info[\\"client_id\\"]:\\r\\n                        self.handshake_socket.send(pickle.dumps({\\"cmd\\": \\"connection_id\\", \\"data\\": self.connection_info[\\"server_id\\"]}))\\r\\n                    else:\\r\\n                        self.log.debug(f\\"connection_id {con_id} != {self.connection_info[\'client_id\']}\\")\\r\\n                        self.show_message_log(f\\"connection_id {con_id} != {self.connection_info[\'client_id\']}\\")\\r\\n\\r\\n\\r\\n\\r\\n    def zmq_send(self, msg:FromLangServer, no_block=False):\\r\\n        if no_block:\\r\\n            try:\\r\\n                msg = pickle.dumps(msg)\\r\\n                self.socket.send(msg, zmq.NOBLOCK)\\r\\n            except:  # noqa: E722\\r\\n                self.show_message_log(\\"zmq send failed\\")\\r\\n            return\\r\\n        if self.socket_connected:\\r\\n            # self.show_message_log(f\\"zmq send {msg}\\")\\r\\n            msg = pickle.dumps(msg)\\r\\n            self.socket.send(msg)\\r\\n\\r\\n    def zmq_check_for_update(self):\\r\\n        if self.socket_connected:\\r\\n            self.zmq_send({\\"cmd\\": \\"check_for_update\\"})\\r\\n        else:\\r\\n            self.show_message_log(\\"zmq not connected\\")\\r\\n\\r\\n\\r\\ntable_types = set([\\"table\\", \\"database\\", \\"schema\\", \\"cte\\"])\\r\\n\\r\\n\\r\\n@dataclass\\r\\nclass PasredItemsCache:\\r\\n    age: int\\r\\n    last_line: int\\r\\n    rng_start: int\\r\\n    spaces_on_cur_line: int\\r\\n    items: dict[str, list[CmpItem]]\\r\\n\\r\\n\\r\\nclass SqlCompleter:\\r\\n    def __init__(self, db_data, ls: InlineSqlLangServer = None) -> None:\\r\\n        self.db = make_db(db_data)\\r\\n        self.completion_map = make_completion_map(self.db, db_data)\\r\\n        self.db_data = db_data\\r\\n        if Path(db_data[\\"cwd\\"]).is_dir():\\r\\n            os.chdir(db_data[\\"cwd\\"])\\r\\n        self.path_completer = PathCompleter(db_data[\\"cwd\\"], db_data[\\"file_search_path\\"],ls.log.getChild(\'path_completer\'))\\r\\n        self.ls = ls\\r\\n        self.file_search_path = db_data[\\"file_search_path\\"]\\r\\n        self.log = ls.log.getChild(\\"completer\\")\\r\\n        self.log_comp_map = self.log.getChild(\\"comp_map\\")\\r\\n        # self.parsed_times_cache = PasredItemsCache(99,0,0,0,{})\\r\\n        self.parser2 = SqlParserNew(self.db, self.ls, ls.log,self.file_search_path)\\r\\n\\r\\n    def show_message_log(self, msg):\\r\\n        if self.ls:\\r\\n            self.ls.show_message_log(msg)\\r\\n\\r\\n    def get_queries(self, pos, sql):\\r\\n        queries, choices_pos = self.parser2.parse_sql(sql, pos)\\r\\n        if not queries:\\r\\n            return None, None, choices_pos\\r\\n        queries.queries_list.sort(key=lambda x: x.end_pos - x.start_pos)\\r\\n        if len(queries.queries_list) == 0:\\r\\n            return None, None, choices_pos\\r\\n        filtered = [x for x in queries.queries_list if x.start_pos <= pos <= x.end_pos]\\r\\n        if len(filtered) == 0:\\r\\n            return queries.queries_list[-1], queries, choices_pos\\r\\n        q = filtered[0]\\r\\n        return q, queries, choices_pos\\r\\n\\r\\n    def parse_sql2(self, pos, sql: str):\\r\\n        comp_map = {}\\r\\n        comp_map[\\"root_namespace\\"] = []\\r\\n\\r\\n        q, queries, choices_pos = self.get_queries(pos, sql)\\r\\n        \\r\\n        if choices_pos:\\r\\n            kw_comps = []\\r\\n            for c in choices_pos:\\r\\n                if c in grammer_kw:\\r\\n                    kw_comps.append(\\r\\n                        CmpItem(c, CompletionItemKind.Keyword, None, \\"keyword\\", \\"3\\", \\"keyword\\")\\r\\n                    )\\r\\n            \\r\\n            comp_map[\\"root_namespace\\"].extend(kw_comps)\\r\\n        \\r\\n        \\r\\n        if q is None:\\r\\n            self.log_comp_map.debug(comp_map)\\r\\n            return comp_map\\r\\n        for k, v in q.from_refs.items():\\r\\n            if v.kind.name == \\"subquery\\":\\r\\n                projection = queries.queries[v.start_pos].projection\\r\\n                comp_map[k] = [\\r\\n                    CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                    for x in projection\\r\\n                ]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(k, CompletionItemKind.File, None, \\"sub query\\", \\"1\\", \\"table\\")\\r\\n                )\\r\\n                continue\\r\\n            \\r\\n            if v.kind.name == \\"table_function\\":\\r\\n                projection = v.projection\\r\\n                if not projection:\\r\\n                    continue\\r\\n                comp_map[k] = [\\r\\n                    CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                    for x in projection\\r\\n                ]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(k, CompletionItemKind.File, None, \\"table function\\", \\"1\\", \\"table\\")\\r\\n                )\\r\\n                continue\\r\\n            \\r\\n            # self.show_message_log(f\'{v}\')\\r\\n            if q.ctes and v.name in q.ctes.map:\\r\\n                comp_map[k] = [\\r\\n                    CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                    for x in q.ctes.map[v.name].projection\\r\\n                ]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(k, CompletionItemKind.File, None, \\"cte\\", \\"1\\", \\"cte\\")\\r\\n                )\\r\\n                continue\\r\\n            elif v.name in q.cte_sibblings:\\r\\n                comp_map[k] = [\\r\\n                    CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                    for x in q.cte_sibblings[v.name].projection\\r\\n                ]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(k, CompletionItemKind.File, None, \\"cte\\", \\"1\\", \\"cte\\")\\r\\n                )\\r\\n                continue\\r\\n            else:\\r\\n                if v.name not in self.completion_map:\\r\\n                    continue\\r\\n                comp_map[k] = self.completion_map[v.name]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(\\r\\n                        k, CompletionItemKind.File, None, \\"table_alias\\", \\"1\\", \\"table\\"\\r\\n                    )\\r\\n                )\\r\\n\\r\\n        if q.ctes:\\r\\n            for k, v in q.ctes.map.items():\\r\\n                comp_map[k] = [\\r\\n                    CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                    for x in v.projection\\r\\n                ]\\r\\n                comp_map[\\"root_namespace\\"].append(\\r\\n                    CmpItem(k, CompletionItemKind.File, None, \\"cte\\", \\"1\\", \\"cte\\")\\r\\n                )\\r\\n\\r\\n        for k, v in q.cte_sibblings.items():\\r\\n            comp_map[k] = [\\r\\n                CmpItem(x[0], CompletionItemKind.Field, None, x[1], \\"1\\", \\"column\\")\\r\\n                for x in v.projection\\r\\n            ]\\r\\n            comp_map[\\"root_namespace\\"].append(\\r\\n                CmpItem(k, CompletionItemKind.File, None, \\"cte\\", \\"1\\", \\"cte\\")\\r\\n            )\\r\\n\\r\\n        # self.show_message_log(f\'cte_sibblings {q.cte_sibblings}\')\\r\\n\\r\\n        col_to_add = []\\r\\n        labels_added = []\\r\\n\\r\\n        for k in comp_map[\\"root_namespace\\"]:\\r\\n            if k in q.from_refs and k in comp_map:\\r\\n                col_to_add.extend(\\r\\n                    [x for x in comp_map[k] if x.label not in labels_added]\\r\\n                )\\r\\n                labels_added.extend([x.label for x in comp_map[k]])\\r\\n\\r\\n        comp_map[\\"root_namespace\\"].extend(col_to_add)\\r\\n\\r\\n        self.log_comp_map.debug(comp_map)\\r\\n        \\r\\n\\r\\n        \\r\\n        return comp_map\\r\\n\\r\\n    # def get_comp_map(self, cursor_pos, sql_rng: SelectNode):\\r\\n    #     parsed_items = self.parse_sql2(cursor_pos, sql_rng.txt)\\r\\n    #     comp_map: dict[str, list[CmpItem]] = {}\\r\\n    #     comp_map.update(parsed_items)\\r\\n    #     comp_map.update(self.completion_map)\\r\\n    #     return comp_map\\r\\n\\r\\n    def route_completion2(\\r\\n        self,\\r\\n        cursor_pos: int,\\r\\n        sql_rng: SelectNode,\\r\\n        trigger: str,\\r\\n        current_line: int,\\r\\n        current_line_txt: str,\\r\\n    ):\\r\\n        # self.show_message_log(f\'route_completion pos:{cursor_pos}, trigger:{trigger}, line:{current_line}, line_txt{current_line_txt}\')\\r\\n        # self.parsed_times_cache.age += 1\\r\\n        sql_left_of_cur = strip_sql_whitespace(sql_rng.txt[:cursor_pos])\\r\\n        # self.show_message_log(f\'comp_map_size: {sys.getsizeof(self.completion_map)} parser: {sys.getsizeof(self.parser)}, trigger: {trigger}\')\\r\\n\\r\\n        if sql_left_of_cur[-2:] == \\"::\\":\\r\\n            return CompletionList(is_incomplete=False, items=duckdb_types)\\r\\n\\r\\n        if regex.match(\\r\\n            \\"(^| )(load |install )$\\", sql_left_of_cur, flags=regex.IGNORECASE\\r\\n        ):\\r\\n            return CompletionList(is_incomplete=False, items=duckdb_extensions)\\r\\n\\r\\n        if regex.match(\\"(^| )(pragma )$\\", sql_left_of_cur, flags=regex.IGNORECASE):\\r\\n            return CompletionList(is_incomplete=False, items=duckdb_pragmas)\\r\\n\\r\\n        if regex.match(\\"(^| )(set |reset )$\\", sql_left_of_cur, flags=regex.IGNORECASE):\\r\\n            return CompletionList(\\r\\n                is_incomplete=False,\\r\\n                items=duckdb_settings\\r\\n                + [CompletionItem(label=c) for c in [\\"LOCAL\\", \\"SESSION\\", \\"GLOBAL\\"]],\\r\\n            )\\r\\n\\r\\n        if regex.match(\\r\\n            \\"(^| )(set |reset )(local | session | global )$\\",\\r\\n            sql_left_of_cur,\\r\\n            flags=regex.IGNORECASE,\\r\\n        ):\\r\\n            return CompletionList(is_incomplete=False, items=duckdb_settings)\\r\\n\\r\\n        file_comp = file_path_completion_regex.match(sql_left_of_cur)\\r\\n        if file_comp:\\r\\n            items = self.path_completer.get_items(file_comp.group(2))\\r\\n            return CompletionList(is_incomplete=False, items=items)\\r\\n\\r\\n\\r\\n        try:\\r\\n            parsed_items: dict[str, list[CmpItem]] = self.parse_sql2(\\r\\n                cursor_pos, sql_rng.txt\\r\\n            )\\r\\n        except Exception as e:\\r\\n            self.log.info([\\"parsed_items_error\\", e,sys.exception().__traceback__])\\r\\n            # self.log.debug(\'parsed_items_error\')\\r\\n\\r\\n            parsed_items = {\\"root_namespace\\": []}\\r\\n        # self.show_message_log(f\'{parsed_items}\')\\r\\n        # comp_map:dict[str,list[CmpItem]] = {}\\r\\n        # comp_map.update(parsed_items)\\r\\n        # comp_map.update(self.completion_map.copy())\\r\\n        # comp_map[\'root_namespace\'].extend(parsed_items[\'root_namespace\'])\\r\\n        comp_map = self.completion_map\\r\\n\\r\\n        if regex.match(\\r\\n            \\".*(^| )(join |from |pivot |unpivot |alter table |insert into )(\\\\w+( \\\\w+)?, )*\\\\w?$\\",\\r\\n            sql_left_of_cur,\\r\\n            flags=regex.IGNORECASE,\\r\\n        ):\\r\\n            tbls = [\\r\\n                x.comp for x in comp_map[\\"root_namespace\\"] if x.obj_type in table_types\\r\\n            ]\\r\\n            tbls += [\\r\\n                x.comp\\r\\n                for x in parsed_items[\\"root_namespace\\"]\\r\\n                if x.obj_type in table_types\\r\\n            ]\\r\\n            # ls.show_message_log(f\'join {tbls}\')\\r\\n            return CompletionList(is_incomplete=False, items=tbls)\\r\\n\\r\\n        if trigger == \\" \\":\\r\\n            return\\r\\n\\r\\n        m = regex.match(\\r\\n            \\".*(^| )(join |from |pivot |unpivot |alter table |insert into )(\\\\w+( \\\\w+)?, )*(?P<dotitems>(\\\\w+\\\\.)+)$\\",\\r\\n            sql_left_of_cur,\\r\\n            flags=regex.IGNORECASE,\\r\\n        )\\r\\n        if m and trigger == \\".\\":\\r\\n            key = m.group(\\"dotitems\\").strip(\\".\\")\\r\\n            items = []\\r\\n            if key in comp_map:\\r\\n                items = [x.comp for x in comp_map[key] if x.obj_type in table_types]\\r\\n            if key in parsed_items:\\r\\n                items += [\\r\\n                    x.comp for x in parsed_items[key] if x.obj_type in table_types\\r\\n                ]\\r\\n            return CompletionList(is_incomplete=False, items=items)\\r\\n\\r\\n        m = regex.match(\\r\\n            \\".*(^| |\\\\()(?P<dotitems>(\\\\w+\\\\.)+)$\\", sql_left_of_cur, flags=regex.IGNORECASE\\r\\n        )\\r\\n        if m and trigger == \\".\\":\\r\\n            key = m.group(\\"dotitems\\").strip(\\".\\")\\r\\n            items = []\\r\\n            if key in comp_map:\\r\\n                items += [x.comp for x in comp_map[key]]\\r\\n            if key in parsed_items:\\r\\n                items += [x.comp for x in parsed_items[key]]\\r\\n            if len(items) > 0:\\r\\n                return CompletionList(is_incomplete=False, items=items)\\r\\n\\r\\n        m = regex.match(\\r\\n            \\".*(^| |\\\\()(?P<char>(\\\\w+))$\\", sql_left_of_cur, flags=regex.IGNORECASE\\r\\n        )\\r\\n        if m:\\r\\n            # comp_items = []\\r\\n            # comp_items.extend(self.completion_map[\'root_namespace\'])\\r\\n            # comp_items.extend(parsed_items[\'root_namespace\'])\\r\\n            chars = m.group(\\"char\\").lower()\\r\\n            comp_items = [x for x in comp_map[\\"root_namespace\\"]]\\r\\n            comp_items += parsed_items[\\"root_namespace\\"]\\r\\n            return CompletionList(\\r\\n                is_incomplete=True,\\r\\n                items=[x.comp for x in comp_items if x.label.lower().startswith(chars)],\\r\\n            )\\r\\n\\r\\n        return None\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:key_file {'c:\\Users\\ryanw\\python_projects\\sql_editor': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\sql_editor', 'main_port': 50415, 'handshake_port': 50429, 'server_id': 20841752743661003958279623757821163509, 'client_id': 289039153013225664027765632288045294448}, 'c:\\Users\\ryanw\\python_projects\\qt_plot_test': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\qt_plot_test', 'main_port': 51530, 'handshake_port': 51544, 'server_id': 146518401247648623216606185621065584985, 'client_id': 140988247832029580575691958158698820269}, 'c:\\Users\\ryanw\\python_projects\\qt_data_viz': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\qt_data_viz', 'main_port': 58332, 'handshake_port': 58346, 'server_id': 140587584459631244392314133660810534720, 'client_id': 285692505785895291964299363118935991531}, 'c:\\Users\\ryanw\\python_projects\\file_search': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\file_search', 'main_port': 52980, 'handshake_port': 52994, 'server_id': 335290134155232771256352042037172168343, 'client_id': 260587681759914210952717460315976447844}, 'c:\\Users\\ryanw\\python_projects\\pyside_charts': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\pyside_charts', 'main_port': 52634, 'handshake_port': 52648, 'server_id': 214501652212443245871954900245267983155, 'client_id': 221401047884938047671233825120543528544}, 'c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler', 'main_port': 57668, 'handshake_port': 57680, 'server_id': 1526987129242331686062439279862023414, 'client_id': 161873924468324626225424534681893560890}}
DEBUG:pygls.server:Content length: 11382
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 11382\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","languageId":"python","version":131,"text":"#%%\\r\\nimport sys\\r\\nfrom pathlib import Path\\r\\nimport pandas as pd\\r\\nsys.path.append(str(Path(__file__).parent.parent))\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n# db.execute(\\"set file_search_path to \'C:\\\\\\\\scripts\'\\")\\r\\n#!%load_ext dabbler.ext_debug\\r\\n\\r\\ndf1 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\nfiles =  list(Path(\'./../../sample_data/austin\').glob(\\"*.csv\\"))\\r\\nf = files[0]\\r\\nfor f in files:\\r\\n    t_name = f\'{f.name}\'.replace(\'.csv\',\'\').replace(\'-\',\'\')\\r\\n    db.sql(\\r\\n        f\\"\\"\\"--sql\\r\\n        create or replace table {t_name} as\\r\\n        select * from read_csv_auto(\'{f}\',header=true)\\r\\n        \\"\\"\\")\\r\\n\\r\\nfiles =  list(Path(\'./../../sample_data\').glob(\\"*.csv\\"))\\r\\nf = files[0]\\r\\nfor f in files:\\r\\n    t_name = f\'{f.name}\'.replace(\'.csv\',\'\').replace(\'-\',\'\')\\r\\n    db.sql(\\r\\n        f\\"\\"\\"--sql\\r\\n        create or replace table {t_name} as\\r\\n        select * from read_csv_auto(\'{f}\',header=true)\\r\\n        \\"\\"\\")\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    CREATE or REPLACE TABLE t1 as\\r\\n    from (VALUES\\r\\n        (\'a\',1),\\r\\n        (\'b\',2),\\r\\n        (\'c\',3),\\r\\n        (\'d\',4),\\r\\n        (\'e\',5),\\r\\n        (NULL,6),\\r\\n        ) as a(c1,c2);\\r\\n    \\r\\n    CREATE OR REPLACE TABLE t2 as\\r\\n    from (VALUES\\r\\n        (\'a\',1),\\r\\n        (\'b\',2),\\r\\n        (\'c\',3),\\r\\n        (\'j\',4),\\r\\n        ) as a(c1,c2);\\r\\n    \\r\\n    from t2 t\\r\\n    SELECT t.c1\\r\\n    WHERE t.c1 not in (SELECT DISTINCT c1 from t1)\\r\\n        \\r\\n    \\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from read_csv_auto(\'./../../../../Scripts/bases.csv\',header=true) b \\r\\n    select b.base_ce, b.oh_ce\\r\\n           \\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with aaa as (\\r\\n        SELECT\\r\\n            i.CROWN_REMOVAL,\\r\\n            i.ENCROACHMENT_OF_ROOT_ZONE,\\r\\n            i.JURISDICTION,\\r\\n            i.SPECIES\\r\\n        from Issued_Tree_Permits i\\r\\n        WHERE\\r\\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\\r\\n    ),\\r\\n    ggg as (SELECT\\r\\n        z.* EXCLUDE (CROWN_REMOVAL)\\r\\n    from aaa z\\r\\n    ),\\r\\n    xyz as (select \\r\\n        *\\r\\n    from Issued_Tree_Permits i\\r\\n        join ggg g on g.SPECIES = i.SPECIES\\r\\n    ), t123 as (\\r\\n    select \\r\\n        CASE \\r\\n            when j.PERMIT_ADDRESS ILIKE \'%grover%\' then \'grover\'\\r\\n            when j.PERMIT_ADDRESS ILIKE \'%gor%\' then \'grover\'\\r\\n            when j.PERMIT_ADDRESS ILIKE \'%oak%\' then \'grover\'\\r\\n            else \'not grover\'\\r\\n        END as j7,\\r\\n        j.*\\r\\n    from xyz j\\r\\n    WHERE j.ISSUED_DATE > \'2020-01-01\'\\r\\n    ),\\r\\n    t1234 as (\\r\\n    SELECT\\r\\n        t.j7,\\r\\n        t.JURISDICTION,\\r\\n        t.Combined_Geo,\\r\\n        t.TRUNK_DIAMETER,\\r\\n        t.PERMIT_STATUS,\\r\\n        t.APPENDIX_F_REMOVED,\\r\\n        t.PERMIT_CLASS,\\r\\n        t.APPENDIX_F_REMOVED,\\r\\n        t.PROJECT_ID,\\r\\n        t.PERMIT_NUMBER,\\r\\n    from t123 t\\r\\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\\r\\n    FROM t1234 t\\r\\n    SELECT \\r\\n        t.APPENDIX_F_REMOVED,\\r\\n        aa\\r\\n\\r\\n\\r\\n\\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nSELECT i.PROJECT_ID\\r\\nFROM Issued_Tree_Permits i\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\ncreate view aa as\\r\\nselect\\r\\n    *\\r\\nfrom autompg, autompg a\\r\\nlimit 10\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nselect\\r\\n    a.\\"model-year\\", a.mpg\\r\\nfrom aa a\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n#%%\\r\\nfrom dabbler.lsp.db_data import make_db, make_completion_map\\r\\nfrom dabbler.db_stuff import get_db_data_new\\r\\n\\r\\ndbd = get_db_data_new(db)\\r\\ndb2 = make_db(dbd)\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\nfor i in range(10):\\r\\n    exec(f\\"\\"\\"df7{i} = pd.DataFrame({{\'a\':[1,2+{i},3],\'b\':[4,5,6]}})\\"\\"\\")\\r\\n\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nselect\\r\\n    *\\r\\nfrom df70, df7, df71, df75, df78\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from Issued_Tree_Permits i\\r\\n    SELECT \\r\\n        CASE lower(i.PERMIT_STATUS) \\r\\n            WHEN \'approved\' THEN \'a\' \\r\\n            ELSE \\r\\n                CASE i.PERMIT_ADDRESS\\r\\n                    WHEN \'g\' THEN \'c\' \\r\\n                    ELSE i.PERMIT_STATUS \\r\\n                END \\r\\n        END as a,\\r\\n        i.COUNCIL_DISTRICT as b,\\r\\n        \\r\\n        \\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\nimport logging\\r\\nlog = logging.getLogger(\'test\')\\r\\ntxt = \\"\\"\\"--sql\\r\\n\\r\\n    \\r\\n    \\"\\"\\"\\r\\nfrom dabbler.lsp.parser import interactive_parse\\r\\nfind_txt = \'a as j w\'\\r\\npos = txt.find(find_txt)+len(find_txt)\\r\\ntxt.find(find_txt)\\r\\ntxt[:pos]\\r\\n\\r\\ninteractive_parse(txt,pos,log)\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\ndb.execute(\\"\\"\\"--sql\\r\\n    FORCE CHECKPOINT;\\r\\n    DROP VIEW if EXISTS my_view2;\\r\\n    DROP TABLE if EXISTS my_table2;\\r\\n    CREATE OR REPLACE TABLE my_table (\\r\\n        id INTEGER PRIMARY KEY,\\r\\n        wbs VARCHAR UNIQUE,\\r\\n        amt DOUBLE,\\r\\n        description VARCHAR,\\r\\n        gen GENERATED ALWAYS AS (1),\\r\\n        CHECK(amt > 0),\\r\\n    ) ;\\r\\n    INSERT INTO my_table VALUES (1, \'wbs1\', 1.9, \'abc\'), (2, \'wbs2\', 2.9, \'def\');\\r\\n    SELECT * FROM my_table;\\r\\n    CREATE or REPLACE VIEW my_view AS (SELECT * from my_table);\\r\\n    SELECT v.description, v.amt FROM my_view v;\\r\\n    ALTER VIEW my_view RENAME TO my_view2;\\r\\n    CREATE OR REPLACE SEQUENCE my_seq;\\r\\n    CREATE or REPLACE TABLE imdb.main.my_tb (\\r\\n        id INTEGER,\\r\\n        name VARCHAR,\\r\\n    );\\r\\n    CREATE SCHEMA IF NOT EXISTS my_schema;\\r\\n    ALTER TABLE my_table RENAME TO my_table2;\\r\\n    ALTER TABLE my_table2 RENAME id to id2;\\r\\n    ALTER TABLE imdb.main.my_tb ALTER COLUMN id TYPE VARCHAR;\\r\\n    CHECKPOINT;\\r\\n    CHECKPOINT imdb;\\r\\n    SELECT * from Issued_Tree_Permits;\\r\\n\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\ndb.sql(\\"\\"\\"--sql\\r\\n    select * from medicare USING SAMPLE 2\\r\\n    \\r\\n    \\"\\"\\")\\r\\n#%%\\r\\ndb.execute(\\"\\"\\"--sql\\r\\n    create table t_test as select * from \'txtb.csv\';\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ntxt = \\"\\"\\"--sql\\r\\n    \\r\\n\\r\\n    \\r\\n    \\"\\"\\"\\r\\ndb.sql(txt)\\r\\n\\r\\n#%%\\r\\nfrom dabbler.lsp.parser import interactive_parse\\r\\nfind_txt = \'abc s\'\\r\\npos = txt.find(find_txt)+len(find_txt)\\r\\ntxt.find(find_txt)\\r\\ntxt[:pos]\\r\\n\\r\\ninteractive_parse(txt,pos,log)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\n#%%\\r\\nglobals()[\'__vsc_ipynb_file__\']\\r\\n\\r\\n#%%\\r\\n\\r\\nimport os\\r\\nos.chdir(r\'C:\\\\scripts\')\\r\\n\\r\\ndf9 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\ndf10 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from read_csv_auto(\'./rates.csv\',header=true,normalize_names=true) z\\r\\n    select z.oh_ce\\r\\n    \\"\\"\\")\\r\\n#%%\\r\\nfrom urllib.parse import urlparse, unquote\\r\\nuri = \'file:///c%3A/Projects/db_dabbler/src/test_files/tst_load_ext2.py\'\\r\\n\\r\\nunquote(uri)\\r\\n\\r\\n\\r\\npath = Path(unquote(uri[8:]))\\r\\npath.is_file()\\r\\n\\r\\nimport pprint\\r\\npprint.pprint(globals())\\r\\n\\r\\n#%%\\r\\ndb.sql(\\"show tables\\")\\r\\nsql_txt = (\\r\\n     \\"\\"\\"--sql\\r\\n    with cine as (select distinct\\r\\n        c.person_id,\\r\\n        p.name,\\r\\n        c.category,\\r\\n        c.title_id,\\r\\n        t.primary_title,\\r\\n        r.averageRating,\\r\\n        r.numVotes\\r\\n    from imdb.main.crew c\\r\\n        join imdb.main.people p on p.person_id = c.person_id\\r\\n        join imdb.main.titles t on t.title_id = c.title_id\\r\\n        join imdb.main.akas a on a.title_id = t.title_id\\r\\n        join imdb.main.ratings r on r.tconst = t.title_id\\r\\n    where\\r\\n        t.type = \'movie\'\\r\\n        --and a.region = \'US\'\\r\\n        and c.category = \'cinematographer\'\\r\\n    --group by all\\r\\n    --order by title_count desc\\r\\n    ), cc as (\\r\\n    select \\r\\n        c.person_id,\\r\\n        c.name,\\r\\n        c.category,\\r\\n        c.person_id, c.numVotes,\\r\\n        c.person_id,\\r\\n        count() as title_count,\\r\\n        sum(c.numVotes) as total_votes,\\r\\n        avg(c.averageRating) as avg_rating\\r\\n        \\r\\n    from cine c\\r\\n    group by all\\r\\n    order by title_count desc)\\r\\n    select\\r\\n        k.numVotes,\\r\\n        sum(k.averageRating),\\r\\n        k.averageRating,\\r\\n    from cine k \\r\\n    \\"\\"\\")\\r\\n\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with qq as (from athlete_events select *),\\r\\n    qq2 as (from qq select *),\\r\\n    qq3 as (from qq2 select * exclude (Age, Sex, ID, Height))\\r\\n    from qq3 q select q.City, q.Medal, q.NOC\\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with crew_count as (\\r\\n        from imdb.main.crew c\\r\\n        select\\r\\n            c.title_id,\\r\\n            count() as crew_count\\r\\n        group by all\\r\\n    ),\\r\\n    prin_count as (\\r\\n        from imdb.main.principals p\\r\\n        select\\r\\n            p.tconst as title_id,\\r\\n            count() as prin_count\\r\\n        group by all\\r\\n    ),\\r\\n    t_count as (\\r\\n        select * from crew_count\\r\\n        union all\\r\\n        select * from prin_count\\r\\n    )\\r\\n    from imdb.main.titles t\\r\\n        join imdb.main.ratings r on r.tconst = t.title_id\\r\\n        join crew_count c on c.title_id = t.title_id\\r\\n        join prin_count p on p.title_id = t.title_id    \\r\\n    select\\r\\n        t.title_id,\\r\\n        t.primary_title,\\r\\n        r.averageRating,\\r\\n        r.numVotes,\\r\\n        c.crew_count,\\r\\n        c.crew_count,\\r\\n        p.prin_count,\\r\\n        c.crew_count + p.prin_count as total_count\\r\\n    order by r.numVotes desc\\r\\n    \\r\\n    \\"\\"\\")\\r\\n#%%\\r\\ndb.execute(\\"set file_search_path to \'C:\\\\\\\\scripts\'\\")\\r\\ndf7 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\ndb.sql(\\"select current_setting(\'file_search_path\')\\").fetchone()[0]\\r\\n#%%\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with exp as (from Issued_Tree_Permits i\\r\\n    select\\r\\n        i.PERMIT_NUMBER,\\r\\n        i.TRUNK_DIAMETER,\\r\\n        unnest(regexp_extract_all(i.TRUNK_DIAMETER,\'\\\\d+([.]\\\\d+)?\'))::DOUBLE as trunk,\\r\\n    ),\\r\\n    tree_info as (\\r\\n        from exp e\\r\\n        select \\r\\n            e.PERMIT_NUMBER,\\r\\n            sum(e.trunk) as total_trees_diameter,\\r\\n            count() as tree_count\\r\\n        group by all\\r\\n    )\\r\\n    from Issued_Tree_Permits i\\r\\n        join tree_info t on t.PERMIT_NUMBER = i.PERMIT_NUMBER\\r\\n    select \\r\\n        t.total_trees_diameter, \\r\\n        t.tree_count,\\r\\n        i.*\\r\\n    order by\\r\\n        t.total_trees_diameter desc\\r\\n        \\r\\n        --regexp_replace(q.trunk,\'(\\\\d+([.]\\\\d)*)\',\'\'),\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from (VALUES \\r\\n            (1,2,3),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n        ) a(a,b,c)\\r\\n    \\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\nfrom dabbler.common import KeyFile\\r\\n# %%\\r\\nk = KeyFile()\\r\\n# %%\\r\\nprint(k.file.read_text())\\r\\n#%%\\r\\nimport sys\\r\\nsys.executable == \'c:\\\\\\\\Projects\\\\\\\\db_dabbler\\\\\\\\db_dabbler_env\\\\\\\\Scripts\\\\\\\\python.exe\'"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 12379
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 12379\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/lsp/server.py","languageId":"python","version":35,"text":"############################################################################\\r\\n# Copyright(c) Open Law Library. All rights reserved.                      #\\r\\n# See ThirdPartyNotices.txt in the project root for additional notices.    #\\r\\n#                                                                          #\\r\\n# Licensed under the Apache License, Version 2.0 (the \\"License\\")           #\\r\\n# you may not use this file except in compliance with the License.         #\\r\\n# You may obtain a copy of the License at                                  #\\r\\n#                                                                          #\\r\\n#     http: // www.apache.org/licenses/LICENSE-2.0                         #\\r\\n#                                                                          #\\r\\n# Unless required by applicable law or agreed to in writing, software      #\\r\\n# distributed under the License is distributed on an \\"AS IS\\" BASIS,        #\\r\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #\\r\\n# See the License for the specific language governing permissions and      #\\r\\n# limitations under the License.                                           #\\r\\n############################################################################\\r\\nimport sys\\r\\nimport asyncio\\r\\nfrom typing import Optional\\r\\nimport sqlglot\\r\\nimport time\\r\\n\\r\\nfrom lsprotocol import types as lsp\\r\\nfrom lsprotocol.types import (\\r\\n    CompletionList,\\r\\n)\\r\\n\\r\\nfrom dabbler.lsp.parser import sql_parser\\r\\nfrom lark import UnexpectedToken\\r\\n\\r\\nfrom dabbler.lsp.server_classes import InlineSqlLangServer\\r\\nfrom dabbler.lsp.sql_utils import (\\r\\n    get_sql2,\\r\\n    line_col,\\r\\n    get_range,\\r\\n    get_statement,\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\nif sys.platform == \'win32\':\\r\\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\\r\\nsql_server = InlineSqlLangServer(\\"pygls-json-example\\", \\"v0.1\\")\\r\\n\\r\\n\\r\\n# list(\\"abcdefghijklmnopqrstuvwxyz\\")+\\r\\n\\r\\n\\r\\n# trigger_characters=[\\":\\",\'.\',\' \'],\\r\\n@sql_server.feature(\\r\\n    lsp.TEXT_DOCUMENT_COMPLETION,\\r\\n    lsp.CompletionOptions(\\r\\n        trigger_characters=[\\":\\", \\".\\",\\" \\",\'/\'], all_commit_characters=[]\\r\\n    ),  # all_commit_characters=[\\":\\"]\\r\\n)\\r\\ndef completions(\\r\\n    ls: InlineSqlLangServer, params: Optional[lsp.CompletionParams] = None\\r\\n) -> CompletionList:\\r\\n    \\"\\"\\"Returns completion items.\\"\\"\\"\\r\\n    # ls.zmq_check_for_update()\\r\\n    # ls.check_sockets()\\r\\n    document = ls.workspace.get_document(params.text_document.uri)\\r\\n    current_line_txt = document.lines[params.position.line]\\r\\n\\r\\n    trigger = params.context.trigger_character\\r\\n\\r\\n    # sql_rng = get_sql(document.source, params.position.line, params.position.character)\\r\\n    sql_rng = get_sql2(document.source, params.position.line, params.position.character)\\r\\n\\r\\n    # ls.show_message_log(f\'{params}\')\\r\\n    # self.ls.show_message_log(f\'\\\\nsql_rng: {sql_rng.start,sql_rng.end}\\\\nleft of idx{document.source[sql_rng.cur_idx-5:sql_rng.cur_idx]}\\\\n{sql_rng.txt}\\\\n{document.source[sql_rng.start:sql_rng.end]}\')\\r\\n\\r\\n    if not sql_rng:\\r\\n        return None\\r\\n\\r\\n    pos_in_range = sql_rng.cur_idx - sql_rng.start\\r\\n\\r\\n    if not ls.completer:\\r\\n        return None\\r\\n\\r\\n    # try:\\r\\n    comps = ls.completer.route_completion2(\\r\\n        pos_in_range, sql_rng, trigger, params.position.line, current_line_txt\\r\\n    )\\r\\n    # except:\\r\\n    # ls.show_message_log(\'problem with completion\')\\r\\n    # return None\\r\\n    return comps\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ndef publish_diagnostics(ls:InlineSqlLangServer, uri, line, char,  msg):\\r\\n    d = lsp.Diagnostic(\\r\\n            range=lsp.Range(\\r\\n                start=lsp.Position(line=line, character=char),\\r\\n                end=lsp.Position(line=line, character=char+1),\\r\\n            ),\\r\\n            message=msg,\\r\\n            source=\'inline_sql\',\\r\\n        )\\r\\n    ls.publish_diagnostics(uri,[d])\\r\\n\\r\\n\\r\\n\\r\\n@sql_server.feature(lsp.TEXT_DOCUMENT_DID_CHANGE)\\r\\ndef did_change(ls: InlineSqlLangServer, params: lsp.DidChangeTextDocumentParams):\\r\\n    \\"\\"\\"Text document did change notification.\\"\\"\\"\\r\\n    if not params.content_changes[0].range:\\r\\n        return\\r\\n    # ls.show_message_log(f\'did change: {params}\')\\r\\n    # ls.show_message_log(f\'did change: {params.content_changes[0].range.start}\')\\r\\n    start_line = params.content_changes[0].range.end.line\\r\\n    char = params.content_changes[0].range.end.character\\r\\n    document = ls.workspace.get_document(params.text_document.uri)\\r\\n    # current_line_txt = document.lines[start_line]\\r\\n    # ls.show_message_log(f\\"did change: {start_line,char}, line txt: {current_line_txt}\\")\\r\\n    sql_range = get_sql2(document.source, start_line, char)\\r\\n    if not sql_range:\\r\\n        # ls.show_message_log(f\\"did not find sql range at line:{start_line + 1}\\")\\r\\n        ls.publish_diagnostics(params.text_document.uri, [])\\r\\n        return\\r\\n\\r\\n    try:\\r\\n        sql_range.txt = sql_range.txt.replace(\'\\\\r\\\\n\',\'\\\\n\')\\r\\n        # ls.show_message_log(f\\"sql: {sql_range}\\")\\r\\n        start = time.time()\\r\\n        p = sql_parser.parse(sql_range.txt)\\r\\n        ls.log.debug([\'parse time\',time.time()-start])\\r\\n\\r\\n\\r\\n    except Exception as e:\\r\\n        ls.log.debug([\'parse time\',time.time()-start])\\r\\n        rng_start_line, rng_start_col = line_col(\\r\\n        ls.workspace.get_document(params.text_document.uri).source, sql_range.start\\r\\n        )\\r\\n        \\r\\n        if isinstance(e, UnexpectedToken):\\r\\n            msg = f\'Unexpected Token \\"{e.token}\\"\'\\r\\n            # ls.show_message_log(f\'line: {e.line}, col: {e.column} {msg}\')\\r\\n            publish_diagnostics(ls, params.text_document.uri, rng_start_line+e.line-2, e.column, msg)\\r\\n            \\r\\n    \\r\\n    else:\\r\\n        ls.publish_diagnostics(params.text_document.uri, [])\\r\\n\\r\\n@sql_server.feature(lsp.TEXT_DOCUMENT_DID_OPEN)\\r\\nasync def did_open(ls: InlineSqlLangServer, params: lsp.DidOpenTextDocumentParams):\\r\\n    ls.log_workspace_info()\\r\\n    ls.save_key_file()\\r\\n\\r\\n\\r\\n@sql_server.command(InlineSqlLangServer.CMD_SEND_SQL_TO_GUI)\\r\\ndef send_sql_to_gui(ls: InlineSqlLangServer, *args):\\r\\n    \\"\\"\\"Starts counting down and showing message asynchronously.\\r\\n    It won\'t `block` the main thread, which can be tested by trying to show\\r\\n    completion items.\\r\\n    \\"\\"\\"\\r\\n    q = None\\r\\n    try:\\r\\n        uri_data = args[0][0]\\r\\n        pos = args[0][1]\\r\\n    except:\\r\\n        ls.show_message_log(\\"send cmd gui: error getting uri and pos\\")\\r\\n        return\\r\\n\\r\\n    if \\"line\\" not in pos or \\"character\\" not in pos:\\r\\n        ls.show_message_log(\\"did not find line/charager in pos\\")\\r\\n        return\\r\\n\\r\\n    if \\"external\\" not in uri_data:\\r\\n        ls.show_message_log(\\"problem obtaining document uri\\")\\r\\n        return\\r\\n\\r\\n    uri = uri_data[\\"external\\"]\\r\\n    line = pos[\\"line\\"]\\r\\n    char = pos[\\"character\\"]\\r\\n\\r\\n    document = ls.workspace.get_document(uri)\\r\\n    sql_rng = get_sql2(document.source, line, char)\\r\\n\\r\\n    if not sql_rng:\\r\\n        ls.show_message_log(\\r\\n            f\\"did not find sql range at line:{line + 1} char: {char + 1}\\"\\r\\n        )\\r\\n\\r\\n    pos_in_range = sql_rng.cur_idx - sql_rng.start\\r\\n    try:\\r\\n        q, queries, choices_pos = ls.completer.get_queries(pos_in_range,sql_rng.txt)\\r\\n    except Exception as e:\\r\\n        ls.log.debug([\'error getting queries\',e])\\r\\n\\r\\n    if not q:\\r\\n        ls.show_message_log(\\"did not find query\\")\\r\\n        return\\r\\n    \\r\\n    cte_sql = \'\'\\r\\n    if q.cte_sibblings:\\r\\n        sibblings = \',\\\\n\'.join([f\'{k} as ({v.sql})\' for k,v in q.cte_sibblings.items()])\\r\\n        cte_sql = f\'with {sibblings}\'\\r\\n    sql = f\'{cte_sql}\\\\n{q.sql}\'\\r\\n    \\r\\n    msg = {\\"cmd\\": \\"run_sql\\", \\"sql\\": sql}\\r\\n\\r\\n    resp = ls.zmq_send(msg)\\r\\n\\r\\n    # ls.show_message_log(f\\"args: {args}\\\\n\\")\\r\\n    return\\r\\n\\r\\n\\r\\n# @sql_server.feature(lsp.TEXT_DOCUMENT_FORMATTING)\\r\\n@sql_server.command(InlineSqlLangServer.CMD_FORMAT_CURRENT_STATEMENT)\\r\\ndef format_range(ls: InlineSqlLangServer, *args):\\r\\n    \\"\\"\\"Starts counting down and showing message asynchronously.\\r\\n    It won\'t `block` the main thread, which can be tested by trying to show\\r\\n    completion items.\\r\\n    \\"\\"\\"\\r\\n    try:\\r\\n        uri_data = args[0][0]\\r\\n        pos = args[0][1]\\r\\n    except:\\r\\n        ls.show_message_log(\\"send cmd gui: error getting uri and pos\\")\\r\\n        return\\r\\n\\r\\n    if \\"line\\" not in pos or \\"character\\" not in pos:\\r\\n        ls.show_message_log(\\"did not find line/charager in pos\\")\\r\\n        return\\r\\n\\r\\n    if \\"external\\" not in uri_data:\\r\\n        ls.show_message_log(\\"problem obtaining document uri\\")\\r\\n        return\\r\\n\\r\\n    uri = uri_data[\\"external\\"]\\r\\n    line = pos[\\"line\\"]\\r\\n    char = pos[\\"character\\"]\\r\\n\\r\\n    document = ls.workspace.get_document(uri)\\r\\n    sql_rng = get_range(document.source, line, char)\\r\\n    if not sql_rng:\\r\\n        return\\r\\n\\r\\n    sql_rng = get_statement(sql_rng, document.source)\\r\\n    if not sql_rng:\\r\\n        return\\r\\n\\r\\n    try:\\r\\n        p = sqlglot.parse_one(sql_rng.txt)\\r\\n    except:\\r\\n        ls.show_message_log(\\"problem parsing sql\\")\\r\\n        return\\r\\n\\r\\n    sql = p.sql(pretty=True, dialect=\\"duckdb\\", pad=4, indent=4)\\r\\n    sql = \\"\\\\n\\".join([f\\"    {x}\\" for i, x in enumerate(sql.split(\\"\\\\n\\"))]) + \\"\\\\n\\"\\r\\n    s_line, s_char = line_col(document.source, sql_rng.start)\\r\\n    e_line, e_char = line_col(document.source, sql_rng.end)\\r\\n    rng = lsp.Range(lsp.Position(s_line - 1, 0), lsp.Position(e_line - 1, 0))\\r\\n\\r\\n    text_edit = lsp.TextEdit(rng, sql)\\r\\n\\r\\n    # ls.send_notification(\'textDocument/didChange\', {\\r\\n    # \'textDocument\': {\\r\\n    #     \'uri\': document.uri,\\r\\n    #     \'version\': document.version\\r\\n    # },\\r\\n    # \'contentChanges\': [{\\r\\n    #     \'range\': rng,\\r\\n    #     \'rangeLength\': len(text_edit.range),\\r\\n    #     \'text\': text_edit.new_text\\r\\n    # }]\\r\\n    # })\\r\\n    ls.apply_edit(lsp.WorkspaceEdit(changes={document.uri: [text_edit]}))\\r\\n    # ls.show_message_log(f\\"args: {args}\\\\n\\")\\r\\n    return [text_edit]\\r\\n\\r\\n\\r\\n# validation_error = []\\r\\n\\r\\n# def get_validations():\\r\\n#     return validation_error\\r\\n\\r\\n# @json_server.feature(\\r\\n#     lsp.TEXT_DOCUMENT_DIAGNOSTIC,\\r\\n#     lsp.DiagnosticOptions(\\r\\n#         identifier=\\"jsonServer\\",\\r\\n#         inter_file_dependencies=False,\\r\\n#         workspace_diagnostics=False,\\r\\n#     ),\\r\\n# )\\r\\n# def text_document_diagnostic(ls:InlineSqlLangServer,\\r\\n#     params: lsp.DocumentDiagnosticParams,\\r\\n# ) -> lsp.DocumentDiagnosticReport:\\r\\n#     \\"\\"\\"Returns diagnostic report.\\"\\"\\"\\r\\n#     document = json_server.workspace.get_document(params.text_document.uri)\\r\\n#     ls.show_message(f\\"val: {validation_error}\\")\\r\\n#     return lsp.RelatedFullDocumentDiagnosticReport(\\r\\n#         items=get_validations(),\\r\\n#         kind=lsp.DocumentDiagnosticReportKind.Full,\\r\\n#     )\\r\\n\\r\\n# @json_server.feature(lsp.WORKSPACE_DIAGNOSTIC)\\r\\n# def workspace_diagnostic(ls,\\r\\n#     params: lsp.WorkspaceDiagnosticParams,\\r\\n# ) -> lsp.WorkspaceDiagnosticReport:\\r\\n#     \\"\\"\\"Returns diagnostic report.\\"\\"\\"\\r\\n#     first = list(json_server.workspace._docs.keys())[0]\\r\\n#     document = json_server.workspace.get_document(first)\\r\\n#     ls.show_message(f\\"val: {validation_error}\\")\\r\\n#     return lsp.WorkspaceDiagnosticReport(\\r\\n#         items=[\\r\\n#             lsp.WorkspaceFullDocumentDiagnosticReport(\\r\\n#                 uri=document.uri,\\r\\n#                 items=validation_error,\\r\\n#                 kind=lsp.DocumentDiagnosticReportKind.Full,\\r\\n#             )\\r\\n#         ]\\r\\n#     )\\r\\n\\r\\n\\r\\ndef main():\\r\\n    import logging\\r\\n    from pathlib import Path\\r\\n\\r\\n    logging.basicConfig(filename=Path(__file__).parent.joinpath(\\"pygls.log\\"), filemode=\\"w\\", level=logging.DEBUG)\\r\\n    sql_server.start_io()\\r\\n    # sql_server.check_sockets2()\\r\\n    # sql_server.create_sockets2()\\r\\n\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    main()\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.protocol.json_rpc:Sending notification: 'window/logMessage' LogMessageParams(type=<MessageType.Log: 4>, message='connected to IPython')
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"type": 4, "message": "connected to IPython"}, "method": "window/logMessage", "jsonrpc": "2.0"}
DEBUG:pygls.protocol.json_rpc:Sending notification: 'window/logMessage' LogMessageParams(type=<MessageType.Log: 4>, message='ip_python_started = 1')
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"type": 4, "message": "ip_python_started = 1"}, "method": "window/logMessage", "jsonrpc": "2.0"}
INFO:dabbler_lsp:logging started
DEBUG:dabbler_lsp:environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\ryanw\\AppData\\Roaming', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '133538256984029987', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\crashpad_11120_ZWGGCQIFFSMGWBUN', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'RYAN_PC', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EFC_4832': '1', 'ELECTRON_RUN_AS_NODE': '1', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\ryanw', 'IGCCSVC_DB': 'AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAABqpGlJb5dUetvgGYCLeJugQAAAACAAAAAAAQZgAAAAEAACAAAABJWsE+IIYxlcI+Z2PcrKQIycFR2maUUm2dAXAHi7hrNQAAAAAOgAAAAAIAACAAAACW1gQmAIi/rFyY6fp/gtWYnYyva2na3EE7CkA0EqhusWAAAAB+McXYLhWTvIBlmyMw+wtnF/HSDV4ozCNNg4zRWV6xk/pnXyihGs9im0gKc4rHXs646Stqt9ITRZ/TB8gfLi//RFEin6QyhdmA4p9kAQxldISDIIUGh62ryaf9BooXU9dAAAAA9hw56uSHemmq2nCyV+nVFInUQUeMWyeQjw3osF/DVmJC/mESaXBL5O/axP3W7l5f0msLxMLIkHyu3HMz3dQ+nw==', 'LOCALAPPDATA': 'C:\\Users\\ryanw\\AppData\\Local', 'LOGONSERVER': '\\\\RYAN_PC', 'NUMBER_OF_PROCESSORS': '24', 'OCULUSBASE': 'C:\\Program Files\\Oculus\\', 'ONEDRIVE': 'C:\\Users\\ryanw\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\ryanw\\OneDrive', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files\\Oculus\\Support\\oculus-runtime;C:\\Python312\\Scripts\\;C:\\Python312\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\dotnet\\;C:\\Users\\ryanw\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Users\\ryanw\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;c:\\users\\ryanw\\.local\\bin;c:\\users\\ryanw\\appdata\\roaming\\python\\python311\\scripts;C:\\Users\\ryanw\\AppData\\Roaming\\npm', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 183 Stepping 1, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': 'b701', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\ryanw\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\ryanw\\AppData\\Local\\Temp', 'USERDOMAIN': 'RYAN_PC', 'USERDOMAIN_ROAMINGPROFILE': 'RYAN_PC', 'USERNAME': 'ryanw', 'USERPROFILE': 'C:\\Users\\ryanw', 'VSCODE_AMD_ENTRYPOINT': 'vs/workbench/api/node/extensionHostProcess', 'VSCODE_CODE_CACHE_PATH': 'C:\\Users\\ryanw\\AppData\\Roaming\\Code\\CachedData\\5c3e652f63e798a5ac2f31ffd0d863669328dc4c', 'VSCODE_CRASH_REPORTER_PROCESS_TYPE': 'extensionHost', 'VSCODE_CWD': 'C:\\Users\\ryanw\\AppData\\Local\\Programs\\Microsoft VS Code', 'VSCODE_HANDLES_UNCAUGHT_ERRORS': 'true', 'VSCODE_IPC_HOOK': '\\\\.\\pipe\\753082e3-1.88.0-main-sock', 'VSCODE_L10N_BUNDLE_LOCATION': '', 'VSCODE_NLS_CONFIG': '{"locale":"en-us","osLocale":"en-us","availableLanguages":{},"_languagePackSupport":true}', 'VSCODE_PID': '11120', 'WINDIR': 'C:\\Windows', 'ZES_ENABLE_SYSMAN': '1'})
DEBUG:pygls.protocol.json_rpc:Sending notification: 'window/logMessage' LogMessageParams(type=<MessageType.Log: 4>, message='recieved db_data')
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"type": 4, "message": "recieved db_data"}, "method": "window/logMessage", "jsonrpc": "2.0"}
DEBUG:pygls.protocol.json_rpc:Sending notification: 'window/logMessage' LogMessageParams(type=<MessageType.Log: 4>, message='recieved db_data')
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"type": 4, "message": "recieved db_data"}, "method": "window/logMessage", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 312
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 312\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":132},"contentChanges":[{"range":{"start":{"line":142,"character":9},"end":{"line":142,"character":10}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.03154802322387695]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 312
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 312\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":133},"contentChanges":[{"range":{"start":{"line":142,"character":9},"end":{"line":142,"character":9}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.001993894577026367]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":1,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":10},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa\r\n\r\n\r\n\r\n    ", 1258]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa", projection=[('APPENDIX_F_REMOVED', None), ('aa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1258, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 1, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":134},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":10}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0019922256469726562]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":2,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":11},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa\r\n\r\n\r\n\r\n    ", 1259]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa", projection=[('APPENDIX_F_REMOVED', None), ('aaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1259, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 2, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":135},"contentChanges":[{"range":{"start":{"line":142,"character":11},"end":{"line":142,"character":11}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.001995563507080078]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":3,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":12},"context":{"triggerKind":3}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaa\r\n\r\n\r\n\r\n    ", 1260]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1260, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 3, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":136},"contentChanges":[{"range":{"start":{"line":142,"character":12},"end":{"line":142,"character":12}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009984970092773438]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":4,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":13},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaa\r\n\r\n\r\n\r\n    ", 1261]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1261, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 4, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":137},"contentChanges":[{"range":{"start":{"line":142,"character":13},"end":{"line":142,"character":13}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009982585906982422]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":5,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":14},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaa\r\n\r\n\r\n\r\n    ", 1262]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1262, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 5, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":138},"contentChanges":[{"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009961128234863281]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":139},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009949207305908203]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":6,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":16},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa\r\n\r\n\r\n\r\n    ", 1264]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1264, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 6, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":140},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":16}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009922981262207031]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":141},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.003050088882446289]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":16},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa\r\n\r\n\r\n\r\n    ", 1264]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1264, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 7, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":142},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":16}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009965896606445312]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":143},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009963512420654297]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":8,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":16},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa\r\n\r\n\r\n\r\n    ", 1264]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1264, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 8, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":144},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":16}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0010142326354980469]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":145},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0010001659393310547]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 247
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 247\r\n\r\n{"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":16},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa\r\n\r\n\r\n\r\n    ", 1264]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaaaaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaaaaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaaaaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1264, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 9, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":146},"contentChanges":[{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":16}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009930133819580078]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":147},"contentChanges":[{"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":15}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009984970092773438]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":148},"contentChanges":[{"range":{"start":{"line":142,"character":13},"end":{"line":142,"character":14}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009989738464355469]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":149},"contentChanges":[{"range":{"start":{"line":142,"character":12},"end":{"line":142,"character":13}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0019931793212890625]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":150},"contentChanges":[{"range":{"start":{"line":142,"character":11},"end":{"line":142,"character":12}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009965896606445312]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":151},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":11}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009965896606445312]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":152},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":10}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.001992464065551758]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":10,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":11},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa\r\n\r\n\r\n\r\n    ", 1259]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa", projection=[('APPENDIX_F_REMOVED', None), ('aaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1259, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 10, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":153},"contentChanges":[{"range":{"start":{"line":142,"character":11},"end":{"line":142,"character":11}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0019919872283935547]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":11,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":12},"context":{"triggerKind":3}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaa\r\n\r\n\r\n\r\n    ", 1260]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaaa", projection=[('APPENDIX_F_REMOVED', None), ('aaaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1260, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 11, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": []}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":154},"contentChanges":[{"range":{"start":{"line":142,"character":11},"end":{"line":142,"character":12}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009984970092773438]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":155},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":11}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0019919872283935547]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":156},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":10}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009984970092773438]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":12,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":11},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa\r\n\r\n\r\n\r\n    ", 1259]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa", projection=[('APPENDIX_F_REMOVED', None), ('aaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1259, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 12, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":157},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":11}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009989738464355469]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":13,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":10},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa\r\n\r\n\r\n\r\n    ", 1258]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa", projection=[('APPENDIX_F_REMOVED', None), ('aa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1258, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 13, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 314
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 314\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":158},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":10}},"rangeLength":0,"text":"a"}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0009992122650146484]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":14,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":11},"context":{"triggerKind":3}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa\r\n\r\n\r\n\r\n    ", 1259]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aaa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aaa", projection=[('APPENDIX_F_REMOVED', None), ('aaa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1259, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 14, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 313
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 313\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","version":159},"contentChanges":[{"range":{"start":{"line":142,"character":10},"end":{"line":142,"character":11}},"rangeLength":1,"text":""}]}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:['parse time', 0.0019927024841308594]
DEBUG:pygls.protocol.json_rpc:Sending notification: 'textDocument/publishDiagnostics' PublishDiagnosticsParams(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py', diagnostics=[], version=None)
INFO:pygls.protocol.json_rpc:Sending data: {"params": {"uri": "file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py", "diagnostics": []}, "method": "textDocument/publishDiagnostics", "jsonrpc": "2.0"}
DEBUG:pygls.server:Content length: 63
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 63\r\n\r\n{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
WARNING:pygls.protocol.json_rpc:Cancel notification for unknown message id "14"
DEBUG:pygls.server:Content length: 248
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 248\r\n\r\n{"jsonrpc":"2.0","id":15,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"},"position":{"line":142,"character":10},"context":{"triggerKind":1}}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
DEBUG:dabbler_lsp.interactive_parser:['interactive_parse', "    with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa\r\n\r\n\r\n\r\n    ", 1258]
DEBUG:dabbler_lsp.sql_parser:['interactive_parse', Tree('statements', [Tree('select_statement', [Tree(Token('RULE', 'query'), [Tree('cte', [Token('WITH', 'with'), None, Tree('cte_expression', [Token('IDENT', 'aaa'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'CROWN_REMOVAL')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'ENCROACHMENT_OF_ROOT_ZONE')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('true', [Token('TRUE', 'true')])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'ggg'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'z'), Token('STAR', '*'), Tree(Token('RULE', 'exclude'), [Token('EXCLUDE', 'EXCLUDE'), Tree(Token('RULE', 'col_exclude'), [Token('IDENT', 'CROWN_REMOVAL')])]), None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'aaa')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'z')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'xyz'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [None, Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'Issued_Tree_Permits')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'i')]), None, None]), Tree(Token('RULE', 'join'), [Tree(Token('RULE', 'join_type'), [None, None, None]), Token('JOIN', 'join'), Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'ggg')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'g')]), None, None]), Token('ON', 'on'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'g'), Token('IDENT', 'SPECIES')]), Tree(Token('RULE', 'comp'), [Token('EQUAL', '=')]), Tree('col_ref', [Token('IDENT', 'i'), Token('IDENT', 'SPECIES')])])])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't123'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'select'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('case', [Token('CASE', 'CASE'), None, Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%grover%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%gor%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('WHEN', 'when'), Tree('like', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'PERMIT_ADDRESS')]), None, Token('ILIKE', 'ILIKE'), Tree('string', [Token('STRING', "'%oak%'")])]), Token('THEN', 'then'), Tree('string', [Token('STRING', "'grover'")]), Token('ELSE', 'else'), Tree('string', [Token('STRING', "'not grover'")]), Token('END', 'END')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j7')])]), Tree(Token('RULE', 'col_exp'), [Tree(Token('RULE', 'star_options'), [Token('IDENT', 'j'), Token('STAR', '*'), None, None])])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 'xyz')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 'j')]), None, None])])]), Tree(Token('RULE', 'where'), [Token('WHERE', 'WHERE'), Tree('comparison', [Tree('col_ref', [Token('IDENT', 'j'), Token('IDENT', 'ISSUED_DATE')]), Tree(Token('RULE', 'comp'), [Token('GREATER_THAN', '>')]), Tree('string', [Token('STRING', "'2020-01-01'")])])]), None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 't1234'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'j7')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'JURISDICTION')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'Combined_Geo')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'TRUNK_DIAMETER')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_STATUS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_CLASS')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PROJECT_ID')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'PERMIT_NUMBER')]), None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'from'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't123')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), None, None, None, None, None])]), Tree('cte_expression', [Token('IDENT', 'g0a9s8d'), None, None, Tree(Token('RULE', 'query'), [None, Tree(Token('RULE', 'pivot_clause'), [Token('PIVOT', 'pivot'), Tree('table_name', [None, None, Token('IDENT', 't1234')]), Token('ON', 'on'), Tree('col_ref', [None, Token('IDENT', 'j7')]), Token('USING', 'using'), Tree(Token('RULE', 'col_exp'), [Tree('function', [Token('IDENT', 'max'), None, Tree('col_ref', [None, Token('IDENT', 'TRUNK_DIAMETER')]), None, None, None]), None])]), None, None])])]), Tree(Token('RULE', 'from_clause'), [Token('FROM', 'FROM'), Tree(Token('RULE', 'from_ref'), [Tree('db_table', [Tree('table_name', [None, None, Token('IDENT', 't1234')]), Tree(Token('RULE', 'alias'), [Token('IDENT', 't')]), None, None])])]), Tree(Token('RULE', 'select_clause'), [Token('SELECT', 'SELECT'), None, None, None, Tree(Token('RULE', 'col_exps'), [Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [Token('IDENT', 't'), Token('IDENT', 'APPENDIX_F_REMOVED')]), None]), Tree(Token('RULE', 'col_exp'), [Tree('col_ref', [None, Token('IDENT', 'aa')]), None])])]), None, None, None, None, None])])]), ['IDENT', 'expression', 'DOLLAR', 'combine', 'STAR', 'COALESCE', 'INTERVAL', 'NULL', 'TRUE', '_date', '_z9_incomplete_col_ref', 'CAST', 'CASE', 'star_options', 'COLUMNS', 'STRING', 'SIGNED_NUMBER', 'LPAREN', 'NOT', 'EXISTS', 'EXTRACT', 'between', 'NUMBER', '_col_ref', 'parameter', 'columns_exp', 'DATE', 'col_exp', 'FALSE', 'QMARK', 'SEMICOLON', '$END', 'FROM', 'RPAREN', 'EXCEPT', 'RETURNING', 'LIMIT', 'GROUP', 'WHERE', 'INTERSECT', 'HAVING', 'ORDER', 'ON', 'UNION']]
DEBUG:dabbler_lsp.query_output:[Query(ctes=None, sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None)}, start_pos=27, end_pos=256, cte_sibblings={}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'z': FromRef(kind=<FromRefKind.table: 0>, alias='z', name='aaa', sql=None, start_pos=None, projection=None)}, start_pos=278, end_pos=337, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27)}, set_operation=False), Query(ctes=None, sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], from_refs={'i': FromRef(kind=<FromRefKind.table: 0>, alias='i', name='Issued_Tree_Permits', sql=None, start_pos=None, projection=None), 'g': FromRef(kind=<FromRefKind.table: 0>, alias='g', name='ggg', sql=None, start_pos=None, projection=None)}, start_pos=359, end_pos=454, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278)}, set_operation=False), Query(ctes=None, sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], from_refs={'j': FromRef(kind=<FromRefKind.table: 0>, alias='j', name='xyz', sql=None, start_pos=None, projection=None)}, start_pos=478, end_pos=812, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359)}, set_operation=False), Query(ctes=None, sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t123', sql=None, start_pos=None, projection=None)}, start_pos=842, end_pos=1119, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478)}, set_operation=False), Query(ctes=None, sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], from_refs={}, start_pos=1140, end_pos=1183, cte_sibblings={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842)}, set_operation=False), Query(ctes=Ctes(sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))", map={'aaa': Cte(name='aaa', sql='SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true', projection=[('CROWN_REMOVAL', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=27), 'ggg': Cte(name='ggg', sql='SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z', projection=[('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=278), 'xyz': Cte(name='xyz', sql='select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES', projection=[('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('JURISDICTION', 'VARCHAR'), ('SPECIES', 'VARCHAR')], cte_start=4, self_start=359), 't123': Cte(name='t123', sql="select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'", projection=[('j7', 'VARCHAR'), ('PERMIT_NUMBER', 'VARCHAR'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_CLASS', 'VARCHAR'), ('PERMIT_ADDRESS', 'VARCHAR'), ('PROPERTY_ID', 'BIGINT'), ('ISSUED_DATE', 'TIMESTAMP'), ('EXPIRES_DATE', 'TIMESTAMP'), ('PERMIT_STATUS', 'VARCHAR'), ('APPLICATION_TYPE', 'VARCHAR'), ('FEE_REQUIRED', 'BOOLEAN'), ('HERITAGE_TREE', 'BOOLEAN'), ('PUBLIC_TREE', 'BOOLEAN'), ('REMOVAL_OF_REGULATED_TREE', 'BOOLEAN'), ('ENCROACHMENT_OF_ROOT_ZONE', 'BOOLEAN'), ('CROWN_REMOVAL', 'BOOLEAN'), ('SPECIES', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('TREE_CONDITION', 'VARCHAR'), ('REASON_FOR_REQUEST', 'VARCHAR'), ('PROPX', 'DOUBLE'), ('PROPY', 'DOUBLE'), ('LATITUDE', 'DOUBLE'), ('LONGITUDE', 'DOUBLE'), ('COUNCIL_DISTRICT', 'BIGINT'), ('JURISDICTION', 'VARCHAR'), ('LINK_TO_DETAILS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('NON_APPENDIX_F_REMOVED', 'DOUBLE'), ('MITIGATION', 'DOUBLE'), ('Combined_Geo', 'VARCHAR'), ('ENCROACHMENT_OF_ROOT_ZONE_1', 'BOOLEAN'), ('JURISDICTION_1', 'VARCHAR'), ('SPECIES_1', 'VARCHAR')], cte_start=4, self_start=478), 't1234': Cte(name='t1234', sql='SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t', projection=[('j7', 'VARCHAR'), ('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('TRUNK_DIAMETER', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=842), 'g0a9s8d': Cte(name='g0a9s8d', sql='pivot t1234 on j7 using max(TRUNK_DIAMETER)', projection=[('JURISDICTION', 'VARCHAR'), ('Combined_Geo', 'VARCHAR'), ('PERMIT_STATUS', 'VARCHAR'), ('APPENDIX_F_REMOVED', 'DOUBLE'), ('PERMIT_CLASS', 'VARCHAR'), ('APPENDIX_F_REMOVED_1', 'DOUBLE'), ('PROJECT_ID', 'BIGINT'), ('PERMIT_NUMBER', 'VARCHAR')], cte_start=4, self_start=1140)}, start_pos=4, end_pos=1184, parent=None), sql="with aaa as (\r\n        SELECT\r\n            i.CROWN_REMOVAL,\r\n            i.ENCROACHMENT_OF_ROOT_ZONE,\r\n            i.JURISDICTION,\r\n            i.SPECIES\r\n        from Issued_Tree_Permits i\r\n        WHERE\r\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\r\n    ),\r\n    ggg as (SELECT\r\n        z.* EXCLUDE (CROWN_REMOVAL)\r\n    from aaa z\r\n    ),\r\n    xyz as (select \r\n        *\r\n    from Issued_Tree_Permits i\r\n        join ggg g on g.SPECIES = i.SPECIES\r\n    ), t123 as (\r\n    select \r\n        CASE \r\n            when j.PERMIT_ADDRESS ILIKE '%grover%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%gor%' then 'grover'\r\n            when j.PERMIT_ADDRESS ILIKE '%oak%' then 'grover'\r\n            else 'not grover'\r\n        END as j7,\r\n        j.*\r\n    from xyz j\r\n    WHERE j.ISSUED_DATE > '2020-01-01'\r\n    ),\r\n    t1234 as (\r\n    SELECT\r\n        t.j7,\r\n        t.JURISDICTION,\r\n        t.Combined_Geo,\r\n        t.TRUNK_DIAMETER,\r\n        t.PERMIT_STATUS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PERMIT_CLASS,\r\n        t.APPENDIX_F_REMOVED,\r\n        t.PROJECT_ID,\r\n        t.PERMIT_NUMBER,\r\n    from t123 t\r\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\r\n    FROM t1234 t\r\n    SELECT \r\n        t.APPENDIX_F_REMOVED,\r\n        aa", projection=[('APPENDIX_F_REMOVED', None), ('aa', None)], from_refs={'t': FromRef(kind=<FromRefKind.table: 0>, alias='t', name='t1234', sql=None, start_pos=None, projection=None)}, start_pos=4, end_pos=1258, cte_sibblings={}, set_operation=False)]
DEBUG:dabbler_lsp.completer.comp_map:{'root_namespace': [COALESCE, INTERVAL, NULL, TRUE, CAST, CASE, COLUMNS, NOT, EXISTS, EXTRACT, DATE, FALSE, FROM, EXCEPT, RETURNING, LIMIT, GROUP, WHERE, INTERSECT, HAVING, ON, UNION, t, aaa, ggg, xyz, t123, t1234, g0a9s8d, j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 't': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'aaa': [CROWN_REMOVAL, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'ggg': [ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 'xyz': [PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE, JURISDICTION, SPECIES], 't123': [j7, PERMIT_NUMBER, PROJECT_ID, PERMIT_CLASS, PERMIT_ADDRESS, PROPERTY_ID, ISSUED_DATE, EXPIRES_DATE, PERMIT_STATUS, APPLICATION_TYPE, FEE_REQUIRED, HERITAGE_TREE, PUBLIC_TREE, REMOVAL_OF_REGULATED_TREE, ENCROACHMENT_OF_ROOT_ZONE, CROWN_REMOVAL, SPECIES, TRUNK_DIAMETER, TREE_CONDITION, REASON_FOR_REQUEST, PROPX, PROPY, LATITUDE, LONGITUDE, COUNCIL_DISTRICT, JURISDICTION, LINK_TO_DETAILS, APPENDIX_F_REMOVED, NON_APPENDIX_F_REMOVED, MITIGATION, Combined_Geo, ENCROACHMENT_OF_ROOT_ZONE_1, JURISDICTION_1, SPECIES_1], 't1234': [j7, JURISDICTION, Combined_Geo, TRUNK_DIAMETER, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED, PROJECT_ID, PERMIT_NUMBER], 'g0a9s8d': [JURISDICTION, Combined_Geo, PERMIT_STATUS, APPENDIX_F_REMOVED, PERMIT_CLASS, APPENDIX_F_REMOVED_1, PROJECT_ID, PERMIT_NUMBER]}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 15, "jsonrpc": "2.0", "result": {"isIncomplete": true, "items": [{"label": "aaa", "labelDetails": {"description": "cte"}, "kind": 17, "sortText": "1", "filterText": "aaa"}]}}
DEBUG:pygls.server:Content length: 45
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 45\r\n\r\n{"jsonrpc":"2.0","id":16,"method":"shutdown"}'
DEBUG:pygls.protocol.json_rpc:Request message received.
INFO:pygls.protocol.json_rpc:Sending data: {"id": 16, "jsonrpc": "2.0", "result": null}
DEBUG:pygls.server:Content length: 63
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 63\r\n\r\n{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}'
WARNING:pygls.protocol.json_rpc:Server shutting down. No more requests!
