INFO:pygls.server:Starting IO server
DEBUG:pygls.server:Content length: 5868
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 5868\r\n\r\n{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":2820,"clientInfo":{"name":"Visual Studio Code","version":"1.88.0"},"locale":"en","rootPath":"c:\\\\Users\\\\ryanw\\\\python_projects\\\\dabbler\\\\dabbler","rootUri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]},"resolveSupport":{"properties":["location.range"]}},"codeLens":{"refreshSupport":true},"executeCommand":{"dynamicRegistration":true},"didChangeConfiguration":{"dynamicRegistration":true},"workspaceFolders":true,"semanticTokens":{"refreshSupport":true},"fileOperations":{"dynamicRegistration":true,"didCreate":true,"didRename":true,"didDelete":true,"willCreate":true,"willRename":true,"willDelete":true},"inlineValue":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"diagnostics":{"refreshSupport":true}},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]},"codeDescriptionSupport":true,"dataSupport":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]},"insertReplaceSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true},"insertTextMode":2,"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode"]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true},"activeParameterSupport":true},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"tagSupport":{"valueSet":[1]},"labelSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"disabledSupport":true,"dataSupport":true,"resolveSupport":{"properties":["edit"]},"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"honorsChangeAnnotations":false},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1,"honorsChangeAnnotations":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"foldingRange":{"collapsedText":false}},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"formats":["relative"],"requests":{"range":true,"full":{"delta":true}},"multilineTokenSupport":false,"overlappingTokenSupport":false,"serverCancelSupport":true,"augmentsSyntaxTokens":true},"linkedEditingRange":{"dynamicRegistration":true},"typeHierarchy":{"dynamicRegistration":true},"inlineValue":{"dynamicRegistration":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"showDocument":{"support":true},"workDoneProgress":true},"general":{"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]},"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"]},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}}},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler","name":"dabbler"}]}}'
DEBUG:pygls.protocol.json_rpc:Request message received.
INFO:pygls.protocol.language_server:Language server initialized InitializeParams(capabilities=ClientCapabilities(workspace=WorkspaceClientCapabilities(apply_edit=True, workspace_edit=WorkspaceEditClientCapabilities(document_changes=True, resource_operations=[<ResourceOperationKind.Create: 'create'>, <ResourceOperationKind.Rename: 'rename'>, <ResourceOperationKind.Delete: 'delete'>], failure_handling=<FailureHandlingKind.TextOnlyTransactional: 'textOnlyTransactional'>, normalizes_line_endings=True, change_annotation_support=WorkspaceEditClientCapabilitiesChangeAnnotationSupportType(groups_on_label=True)), did_change_configuration=DidChangeConfigurationClientCapabilities(dynamic_registration=True), did_change_watched_files=DidChangeWatchedFilesClientCapabilities(dynamic_registration=True, relative_pattern_support=True), symbol=WorkspaceSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), tag_support=WorkspaceSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), resolve_support=WorkspaceSymbolClientCapabilitiesResolveSupportType(properties=['location.range'])), execute_command=ExecuteCommandClientCapabilities(dynamic_registration=True), workspace_folders=True, configuration=True, semantic_tokens=SemanticTokensWorkspaceClientCapabilities(refresh_support=True), code_lens=CodeLensWorkspaceClientCapabilities(refresh_support=True), file_operations=FileOperationClientCapabilities(dynamic_registration=True, did_create=True, will_create=True, did_rename=True, will_rename=True, did_delete=True, will_delete=True), inline_value=InlineValueWorkspaceClientCapabilities(refresh_support=True), inlay_hint=InlayHintWorkspaceClientCapabilities(refresh_support=True), diagnostics=DiagnosticWorkspaceClientCapabilities(refresh_support=True), folding_range=None), text_document=TextDocumentClientCapabilities(synchronization=TextDocumentSyncClientCapabilities(dynamic_registration=True, will_save=True, will_save_wait_until=True, did_save=True), completion=CompletionClientCapabilities(dynamic_registration=True, completion_item=CompletionClientCapabilitiesCompletionItemType(snippet_support=True, commit_characters_support=True, documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], deprecated_support=True, preselect_support=True, tag_support=CompletionClientCapabilitiesCompletionItemTypeTagSupportType(value_set=[<CompletionItemTag.Deprecated: 1>]), insert_replace_support=True, resolve_support=CompletionClientCapabilitiesCompletionItemTypeResolveSupportType(properties=['documentation', 'detail', 'additionalTextEdits']), insert_text_mode_support=CompletionClientCapabilitiesCompletionItemTypeInsertTextModeSupportType(value_set=[<InsertTextMode.AsIs: 1>, <InsertTextMode.AdjustIndentation: 2>]), label_details_support=True), completion_item_kind=CompletionClientCapabilitiesCompletionItemKindType(value_set=[<CompletionItemKind.Text: 1>, <CompletionItemKind.Method: 2>, <CompletionItemKind.Function: 3>, <CompletionItemKind.Constructor: 4>, <CompletionItemKind.Field: 5>, <CompletionItemKind.Variable: 6>, <CompletionItemKind.Class: 7>, <CompletionItemKind.Interface: 8>, <CompletionItemKind.Module: 9>, <CompletionItemKind.Property: 10>, <CompletionItemKind.Unit: 11>, <CompletionItemKind.Value: 12>, <CompletionItemKind.Enum: 13>, <CompletionItemKind.Keyword: 14>, <CompletionItemKind.Snippet: 15>, <CompletionItemKind.Color: 16>, <CompletionItemKind.File: 17>, <CompletionItemKind.Reference: 18>, <CompletionItemKind.Folder: 19>, <CompletionItemKind.EnumMember: 20>, <CompletionItemKind.Constant: 21>, <CompletionItemKind.Struct: 22>, <CompletionItemKind.Event: 23>, <CompletionItemKind.Operator: 24>, <CompletionItemKind.TypeParameter: 25>]), insert_text_mode=<InsertTextMode.AdjustIndentation: 2>, context_support=True, completion_list=CompletionClientCapabilitiesCompletionListType(item_defaults=['commitCharacters', 'editRange', 'insertTextFormat', 'insertTextMode'])), hover=HoverClientCapabilities(dynamic_registration=True, content_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>]), signature_help=SignatureHelpClientCapabilities(dynamic_registration=True, signature_information=SignatureHelpClientCapabilitiesSignatureInformationType(documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], parameter_information=SignatureHelpClientCapabilitiesSignatureInformationTypeParameterInformationType(label_offset_support=True), active_parameter_support=True), context_support=True), declaration=DeclarationClientCapabilities(dynamic_registration=True, link_support=True), definition=DefinitionClientCapabilities(dynamic_registration=True, link_support=True), type_definition=TypeDefinitionClientCapabilities(dynamic_registration=True, link_support=True), implementation=ImplementationClientCapabilities(dynamic_registration=True, link_support=True), references=ReferenceClientCapabilities(dynamic_registration=True), document_highlight=DocumentHighlightClientCapabilities(dynamic_registration=True), document_symbol=DocumentSymbolClientCapabilities(dynamic_registration=True, symbol_kind=DocumentSymbolClientCapabilitiesSymbolKindType(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), hierarchical_document_symbol_support=True, tag_support=DocumentSymbolClientCapabilitiesTagSupportType(value_set=[<SymbolTag.Deprecated: 1>]), label_support=True), code_action=CodeActionClientCapabilities(dynamic_registration=True, code_action_literal_support=CodeActionClientCapabilitiesCodeActionLiteralSupportType(code_action_kind=CodeActionClientCapabilitiesCodeActionLiteralSupportTypeCodeActionKindType(value_set=['', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 'refactor.rewrite', 'source', 'source.organizeImports'])), is_preferred_support=True, disabled_support=True, data_support=True, resolve_support=CodeActionClientCapabilitiesResolveSupportType(properties=['edit']), honors_change_annotations=False), code_lens=CodeLensClientCapabilities(dynamic_registration=True), document_link=DocumentLinkClientCapabilities(dynamic_registration=True, tooltip_support=True), color_provider=DocumentColorClientCapabilities(dynamic_registration=True), formatting=DocumentFormattingClientCapabilities(dynamic_registration=True), range_formatting=DocumentRangeFormattingClientCapabilities(dynamic_registration=True, ranges_support=None), on_type_formatting=DocumentOnTypeFormattingClientCapabilities(dynamic_registration=True), rename=RenameClientCapabilities(dynamic_registration=True, prepare_support=True, prepare_support_default_behavior=<PrepareSupportDefaultBehavior.Identifier: 1>, honors_change_annotations=True), folding_range=FoldingRangeClientCapabilities(dynamic_registration=True, range_limit=5000, line_folding_only=True, folding_range_kind=FoldingRangeClientCapabilitiesFoldingRangeKindType(value_set=['comment', 'imports', 'region']), folding_range=FoldingRangeClientCapabilitiesFoldingRangeType(collapsed_text=False)), selection_range=SelectionRangeClientCapabilities(dynamic_registration=True), publish_diagnostics=PublishDiagnosticsClientCapabilities(related_information=True, tag_support=PublishDiagnosticsClientCapabilitiesTagSupportType(value_set=[<DiagnosticTag.Unnecessary: 1>, <DiagnosticTag.Deprecated: 2>]), version_support=False, code_description_support=True, data_support=True), call_hierarchy=CallHierarchyClientCapabilities(dynamic_registration=True), semantic_tokens=SemanticTokensClientCapabilities(requests=SemanticTokensClientCapabilitiesRequestsType(range=True, full=SemanticTokensClientCapabilitiesRequestsTypeFullType1(delta=True)), token_types=['namespace', 'type', 'class', 'enum', 'interface', 'struct', 'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 'number', 'regexp', 'operator', 'decorator'], token_modifiers=['declaration', 'definition', 'readonly', 'static', 'deprecated', 'abstract', 'async', 'modification', 'documentation', 'defaultLibrary'], formats=[<TokenFormat.Relative: 'relative'>], dynamic_registration=True, overlapping_token_support=False, multiline_token_support=False, server_cancel_support=True, augments_syntax_tokens=True), linked_editing_range=LinkedEditingRangeClientCapabilities(dynamic_registration=True), moniker=None, type_hierarchy=TypeHierarchyClientCapabilities(dynamic_registration=True), inline_value=InlineValueClientCapabilities(dynamic_registration=True), inlay_hint=InlayHintClientCapabilities(dynamic_registration=True, resolve_support=InlayHintClientCapabilitiesResolveSupportType(properties=['tooltip', 'textEdits', 'label.tooltip', 'label.location', 'label.command'])), diagnostic=DiagnosticClientCapabilities(dynamic_registration=True, related_document_support=False), inline_completion=None), notebook_document=NotebookDocumentClientCapabilities(synchronization=NotebookDocumentSyncClientCapabilities(dynamic_registration=True, execution_summary_support=True)), window=WindowClientCapabilities(work_done_progress=True, show_message=ShowMessageRequestClientCapabilities(message_action_item=ShowMessageRequestClientCapabilitiesMessageActionItemType(additional_properties_support=True)), show_document=ShowDocumentClientCapabilities(support=True)), general=GeneralClientCapabilities(stale_request_support=GeneralClientCapabilitiesStaleRequestSupportType(cancel=True, retry_on_content_modified=['textDocument/semanticTokens/full', 'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta']), regular_expressions=RegularExpressionsClientCapabilities(engine='ECMAScript', version='ES2020'), markdown=MarkdownClientCapabilities(parser='marked', version='1.1.0', allowed_tags=None), position_encodings=['utf-16']), experimental=None), process_id=2820, client_info=InitializeParamsClientInfoType(name='Visual Studio Code', version='1.88.0'), locale='en', root_path='c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler', root_uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler', initialization_options=None, trace=<TraceValues.Off: 'off'>, work_done_token=None, workspace_folders=[WorkspaceFolder(uri='file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler', name='dabbler')])
DEBUG:pygls.protocol.language_server:Server capabilities: {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": false}, "completionProvider": {"triggerCharacters": [":", ".", "/", " "]}, "executeCommandProvider": {"commands": ["sendSqlToDbDabbler", "dbDabblerFormatCurrentStatement"]}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}
INFO:pygls.protocol.json_rpc:Sending data: {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"positionEncoding": "utf-16", "textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": false}, "completionProvider": {"triggerCharacters": [":", ".", "/", " "]}, "executeCommandProvider": {"commands": ["sendSqlToDbDabbler", "dbDabblerFormatCurrentStatement"]}, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}, "serverInfo": {"name": "pygls-json-example", "version": "v0.1"}}}
DEBUG:pygls.server:Content length: 52
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 52\r\n\r\n{"jsonrpc":"2.0","method":"initialized","params":{}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 11991
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 11991\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py","languageId":"python","version":1,"text":"#%%\\r\\nimport sys\\r\\nfrom pathlib import Path\\r\\nimport pandas as pd\\r\\nsys.path.append(str(Path(__file__).parent.parent))\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n# db.execute(\\"set file_search_path to \'C:\\\\\\\\scripts\'\\")\\r\\n###!%load_ext dabbler.ext_debug\\r\\n#!%load_ext dabbler.ext\\r\\n\\r\\ndf1 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\nfiles =  list(Path(\'./../../sample_data/austin\').glob(\\"*.csv\\"))\\r\\nf = files[0]\\r\\nfor f in files:\\r\\n    t_name = f\'{f.name}\'.replace(\'.csv\',\'\').replace(\'-\',\'\')\\r\\n    db.sql(\\r\\n        f\\"\\"\\"--sql\\r\\n        create or replace table {t_name} as\\r\\n        select * from read_csv_auto(\'{f}\',header=true)\\r\\n        \\"\\"\\")\\r\\n\\r\\nfiles =  list(Path(\'./../../sample_data\').glob(\\"*.csv\\"))\\r\\nf = files[0]\\r\\nfor f in files:\\r\\n    t_name = f\'{f.name}\'.replace(\'.csv\',\'\').replace(\'-\',\'\')\\r\\n    db.sql(\\r\\n        f\\"\\"\\"--sql\\r\\n        create or replace table {t_name} as\\r\\n        select * from read_csv_auto(\'{f}\',header=true)\\r\\n        \\"\\"\\")\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\n#%%\\r\\ndf7898 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nselect\\r\\n    *\\r\\nfrom sasdf\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with aaa as (\\r\\n        SELECT\\r\\n            i.CROWN_REMOVAL,\\r\\n            i.ENCROACHMENT_OF_ROOT_ZONE,\\r\\n            i.JURISDICTION,\\r\\n            i.SPECIES\\r\\n        from Issued_Tree_Permits i\\r\\n        WHERE\\r\\n            i.ENCROACHMENT_OF_ROOT_ZONE = true\\r\\n    ),\\r\\n    ggg as (SELECT\\r\\n        z.* EXCLUDE (CROWN_REMOVAL)\\r\\n    from aaa z\\r\\n    ),\\r\\n    xyz as (select \\r\\n        *\\r\\n    from Issued_Tree_Permits i\\r\\n        join ggg g on g.SPECIES = i.SPECIES\\r\\n    ), t123 as (\\r\\n    select \\r\\n        CASE \\r\\n            when j.PERMIT_ADDRESS ILIKE \'%grover%\' then \'grover\'\\r\\n            when j.PERMIT_ADDRESS ILIKE \'%gor%\' then \'grover\'\\r\\n            when j.PERMIT_ADDRESS ILIKE \'%oak%\' then \'grover\'\\r\\n            else \'not grover\'\\r\\n        END as j7,\\r\\n        j.*\\r\\n    from xyz j\\r\\n    WHERE j.ISSUED_DATE > \'2020-01-01\'\\r\\n    ),\\r\\n    t1234 as (\\r\\n    SELECT\\r\\n        t.j7,\\r\\n        t.JURISDICTION,\\r\\n        t.Combined_Geo,\\r\\n        t.TRUNK_DIAMETER,\\r\\n        t.PERMIT_STATUS,\\r\\n        t.APPENDIX_F_REMOVED,\\r\\n        t.PERMIT_CLASS,\\r\\n        t.APPENDIX_F_REMOVED,\\r\\n        t.PROJECT_ID,\\r\\n        t.PERMIT_NUMBER,\\r\\n    from t123 t\\r\\n    ), g0a9s8d as (pivot t1234 on j7 using max(TRUNK_DIAMETER))\\r\\n    from ggg\\r\\n    SELECT *\\r\\n\\r\\n        \\r\\n        \\r\\n\\r\\n\\r\\n\\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE SCHEMA v;\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE TABLE v.t1(\\r\\n    a INTEGER,\\r\\n)\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    CREATE or REPLACE TABLE t1 as\\r\\n    from (VALUES\\r\\n        (\'a\',1),\\r\\n        (\'b\',2),\\r\\n        (\'c\',3),\\r\\n        (\'d\',4),\\r\\n        (\'e\',5),\\r\\n        (NULL,6),\\r\\n        ) as a(c1,c2);\\r\\n    \\r\\n    CREATE OR REPLACE TABLE t2 as\\r\\n    from (VALUES\\r\\n        (\'a\',1),\\r\\n        (\'b\',2),\\r\\n        (\'c\',3),\\r\\n        (\'j\',4),\\r\\n        ) as a(c1,c2);\\r\\n    \\r\\n    from t2 t\\r\\n    SELECT t.c1\\r\\n    WHERE t.c1 not in (SELECT DISTINCT c1 from t1)\\r\\n        \\r\\n    \\"\\"\\"\\r\\n)\\r\\n#%%)\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE SCHEMA v;\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE TABLE v.t1(\\r\\n    a INTEGER,\\r\\n)\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE macro v.t3() as TABLE select \'abc\';\\r\\nCREATE macro v.t2() as \'abc\';\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nSELECT \\r\\n    i.PERMIT_NUMBER,\\r\\n    i.*\\r\\n\\r\\nfrom Issued_Tree_Permits i\\r\\nWHERE i.PERMIT_STATUS in (\'Approved with Conditions\')\\r\\nor i.COUNCIL_DISTRICT = 1\\r\\n\\r\\n\\"\\"\\"\\r\\n)\\r\\n#%%\\r\\n\\r\\ndf77 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nselect\\r\\n    database_name||\'.\'||schema_name as db_scm,\\r\\n    function_name,\\r\\n    function_type,\\r\\nfrom duckdb_functions()\\r\\nWHERE internal = false\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n#%%\\r\\nfrom dabbler.lsp.db_data import make_db, make_completion_map\\r\\nfrom dabbler.db_stuff import get_db_data_new\\r\\n\\r\\n\\r\\ndbd = get_db_data_new(db)\\r\\n\\r\\ndb2 = make_db(dbd)\\r\\n\\r\\ncomp_map = make_completion_map(db2, dbd)\\r\\n\\r\\ndbd[\'functions\']\\r\\n\\r\\n#%%\\r\\n\\r\\nfor i in range(10):\\r\\n    exec(f\\"\\"\\"df7{i} = pd.DataFrame({{\'a\':[1,2+{i},3],\'b\':[4,5,6]}})\\"\\"\\")\\r\\n\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nselect\\r\\n    *\\r\\nfrom df70, df7, df71, df75, df78\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from Issued_Tree_Permits i\\r\\n    SELECT \\r\\n        CASE lower(i.PERMIT_STATUS) \\r\\n            WHEN \'approved\' THEN \'a\' \\r\\n            ELSE \\r\\n                CASE i.PERMIT_ADDRESS\\r\\n                    WHEN \'g\' THEN \'c\' \\r\\n                    ELSE i.PERMIT_STATUS \\r\\n                END \\r\\n        END as a,\\r\\n        i.COUNCIL_DISTRICT as b,\\r\\n        \\r\\n        \\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\nimport logging\\r\\nlog = logging.getLogger(\'test\')\\r\\ntxt = \\"\\"\\"--sql\\r\\n\\r\\n    \\r\\n    \\"\\"\\"\\r\\nfrom dabbler.lsp.parser import interactive_parse\\r\\nfind_txt = \'a as j w\'\\r\\npos = txt.find(find_txt)+len(find_txt)\\r\\ntxt.find(find_txt)\\r\\ntxt[:pos]\\r\\n\\r\\ninteractive_parse(txt,pos,log)\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.execute(\\"force checkpoint\\")\\r\\n\\r\\ndb.execute(\\"\\"\\"--sql\\r\\n    FORCE CHECKPOINT;\\r\\n    DROP VIEW if EXISTS my_view2;\\r\\n    DROP TABLE if EXISTS my_table2;\\r\\n    CREATE OR REPLACE TABLE my_table (\\r\\n        id INTEGER PRIMARY KEY,\\r\\n        wbs VARCHAR UNIQUE,\\r\\n        amt DOUBLE,\\r\\n        description VARCHAR,\\r\\n        gen GENERATED ALWAYS AS (1),\\r\\n        CHECK(amt > 0),\\r\\n    ) ;\\r\\n    INSERT INTO my_table VALUES (1, \'wbs1\', 1.9, \'abc\'), (2, \'wbs2\', 2.9, \'def\');\\r\\n    SELECT * FROM my_table;\\r\\n    CREATE or REPLACE VIEW my_view AS (SELECT * from my_table);\\r\\n    SELECT v.description, v.amt FROM my_view v;\\r\\n    ALTER VIEW my_view RENAME TO my_view2;\\r\\n    CREATE OR REPLACE SEQUENCE my_seq;\\r\\n    CREATE or REPLACE TABLE imdb.main.my_tb (\\r\\n        id INTEGER,\\r\\n        name VARCHAR,\\r\\n    );\\r\\n    CREATE SCHEMA IF NOT EXISTS my_schema;\\r\\n    ALTER TABLE my_table RENAME TO my_table2;\\r\\n    ALTER TABLE my_table2 RENAME id to id2;\\r\\n    ALTER TABLE imdb.main.my_tb ALTER COLUMN id TYPE VARCHAR;\\r\\n    CHECKPOINT;\\r\\n    CHECKPOINT imdb;\\r\\n    SELECT * from Issued_Tree_Permits;\\r\\n\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\ndb.sql(\\"\\"\\"--sql\\r\\n    select * from medicare USING SAMPLE 2\\r\\n    \\r\\n    \\"\\"\\")\\r\\n#%%\\r\\ndb.execute(\\"\\"\\"--sql\\r\\n    create table t_test as select * from \'txtb.csv\';\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ntxt = \\"\\"\\"--sql\\r\\n    \\r\\n\\r\\n    \\r\\n    \\"\\"\\"\\r\\ndb.sql(txt)\\r\\n\\r\\n#%%\\r\\nfrom dabbler.lsp.parser import interactive_parse\\r\\nfind_txt = \'abc s\'\\r\\npos = txt.find(find_txt)+len(find_txt)\\r\\ntxt.find(find_txt)\\r\\ntxt[:pos]\\r\\n\\r\\ninteractive_parse(txt,pos,log)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\n#%%\\r\\nglobals()[\'__vsc_ipynb_file__\']\\r\\n\\r\\n#%%\\r\\n\\r\\nimport os\\r\\nos.chdir(r\'C:\\\\scripts\')\\r\\n\\r\\ndf9 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\ndf10 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from read_csv_auto(\'./rates.csv\',header=true,normalize_names=true) z\\r\\n    select z.oh_ce\\r\\n    \\"\\"\\")\\r\\n#%%\\r\\nfrom urllib.parse import urlparse, unquote\\r\\nuri = \'file:///c%3A/Projects/db_dabbler/src/test_files/tst_load_ext2.py\'\\r\\n\\r\\nunquote(uri)\\r\\n\\r\\n\\r\\npath = Path(unquote(uri[8:]))\\r\\npath.is_file()\\r\\n\\r\\nimport pprint\\r\\npprint.pprint(globals())\\r\\n\\r\\n#%%\\r\\ndb.sql(\\"show tables\\")\\r\\nsql_txt = (\\r\\n     \\"\\"\\"--sql\\r\\n    with cine as (select distinct\\r\\n        c.person_id,\\r\\n        p.name,\\r\\n        c.category,\\r\\n        c.title_id,\\r\\n        t.primary_title,\\r\\n        r.averageRating,\\r\\n        r.numVotes\\r\\n    from imdb.main.crew c\\r\\n        join imdb.main.people p on p.person_id = c.person_id\\r\\n        join imdb.main.titles t on t.title_id = c.title_id\\r\\n        join imdb.main.akas a on a.title_id = t.title_id\\r\\n        join imdb.main.ratings r on r.tconst = t.title_id\\r\\n    where\\r\\n        t.type = \'movie\'\\r\\n        --and a.region = \'US\'\\r\\n        and c.category = \'cinematographer\'\\r\\n    --group by all\\r\\n    --order by title_count desc\\r\\n    ), cc as (\\r\\n    select \\r\\n        c.person_id,\\r\\n        c.name,\\r\\n        c.category,\\r\\n        c.person_id, c.numVotes,\\r\\n        c.person_id,\\r\\n        count() as title_count,\\r\\n        sum(c.numVotes) as total_votes,\\r\\n        avg(c.averageRating) as avg_rating\\r\\n        \\r\\n    from cine c\\r\\n    group by all\\r\\n    order by title_count desc)\\r\\n    select\\r\\n        k.numVotes,\\r\\n        sum(k.averageRating),\\r\\n        k.averageRating,\\r\\n    from cine k \\r\\n    \\"\\"\\")\\r\\n\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with qq as (from athlete_events select *),\\r\\n    qq2 as (from qq select *),\\r\\n    qq3 as (from qq2 select * exclude (Age, Sex, ID, Height))\\r\\n    from qq3 q select q.City, q.Medal, q.NOC\\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with crew_count as (\\r\\n        from imdb.main.crew c\\r\\n        select\\r\\n            c.title_id,\\r\\n            count() as crew_count\\r\\n        group by all\\r\\n    ),\\r\\n    prin_count as (\\r\\n        from imdb.main.principals p\\r\\n        select\\r\\n            p.tconst as title_id,\\r\\n            count() as prin_count\\r\\n        group by all\\r\\n    ),\\r\\n    t_count as (\\r\\n        select * from crew_count\\r\\n        union all\\r\\n        select * from prin_count\\r\\n    )\\r\\n    from imdb.main.titles t\\r\\n        join imdb.main.ratings r on r.tconst = t.title_id\\r\\n        join crew_count c on c.title_id = t.title_id\\r\\n        join prin_count p on p.title_id = t.title_id    \\r\\n    select\\r\\n        t.title_id,\\r\\n        t.primary_title,\\r\\n        r.averageRating,\\r\\n        r.numVotes,\\r\\n        c.crew_count,\\r\\n        c.crew_count,\\r\\n        p.prin_count,\\r\\n        c.crew_count + p.prin_count as total_count\\r\\n    order by r.numVotes desc\\r\\n    \\r\\n    \\"\\"\\")\\r\\n#%%\\r\\ndb.execute(\\"set file_search_path to \'C:\\\\\\\\scripts\'\\")\\r\\ndf7 = pd.DataFrame({\'a\':[1,2,3],\'b\':[4,5,6]})\\r\\ndb.sql(\\"select current_setting(\'file_search_path\')\\").fetchone()[0]\\r\\n#%%\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with exp as (from Issued_Tree_Permits i\\r\\n    select\\r\\n        i.PERMIT_NUMBER,\\r\\n        i.TRUNK_DIAMETER,\\r\\n        unnest(regexp_extract_all(i.TRUNK_DIAMETER,\'\\\\d+([.]\\\\d+)?\'))::DOUBLE as trunk,\\r\\n    ),\\r\\n    tree_info as (\\r\\n        from exp e\\r\\n        select \\r\\n            e.PERMIT_NUMBER,\\r\\n            sum(e.trunk) as total_trees_diameter,\\r\\n            count() as tree_count\\r\\n        group by all\\r\\n    )\\r\\n    from Issued_Tree_Permits i\\r\\n        join tree_info t on t.PERMIT_NUMBER = i.PERMIT_NUMBER\\r\\n    select \\r\\n        t.total_trees_diameter, \\r\\n        t.tree_count,\\r\\n        i.*\\r\\n    order by\\r\\n        t.total_trees_diameter desc\\r\\n        \\r\\n        --regexp_replace(q.trunk,\'(\\\\d+([.]\\\\d)*)\',\'\'),\\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    from (VALUES \\r\\n            (1,2,3),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n            (4,4,5),\\r\\n        ) a(a,b,c)\\r\\n    \\r\\n    \\r\\n    \\"\\"\\")\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\nfrom dabbler.common import KeyFile\\r\\n# %%\\r\\nk = KeyFile()\\r\\n# %%\\r\\nprint(k.file.read_text())\\r\\n#%%\\r\\nimport sys\\r\\nsys.executable == \'c:\\\\\\\\Projects\\\\\\\\db_dabbler\\\\\\\\db_dabbler_env\\\\\\\\Scripts\\\\\\\\python.exe\'"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:dabbler_lsp:key_file {'c:\\Users\\ryanw\\python_projects\\sql_editor': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\sql_editor', 'main_port': 50415, 'handshake_port': 50429, 'server_id': 20841752743661003958279623757821163509, 'client_id': 289039153013225664027765632288045294448}, 'c:\\Users\\ryanw\\python_projects\\qt_plot_test': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\qt_plot_test', 'main_port': 51530, 'handshake_port': 51544, 'server_id': 146518401247648623216606185621065584985, 'client_id': 140988247832029580575691958158698820269}, 'c:\\Users\\ryanw\\python_projects\\qt_data_viz': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\qt_data_viz', 'main_port': 58332, 'handshake_port': 58346, 'server_id': 140587584459631244392314133660810534720, 'client_id': 285692505785895291964299363118935991531}, 'c:\\Users\\ryanw\\python_projects\\file_search': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\file_search', 'main_port': 52980, 'handshake_port': 52994, 'server_id': 335290134155232771256352042037172168343, 'client_id': 260587681759914210952717460315976447844}, 'c:\\Users\\ryanw\\python_projects\\pyside_charts': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\pyside_charts', 'main_port': 52634, 'handshake_port': 52648, 'server_id': 214501652212443245871954900245267983155, 'client_id': 221401047884938047671233825120543528544}, 'c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler': {'workspace_path': 'c:\\Users\\ryanw\\python_projects\\dabbler\\dabbler', 'main_port': 55822, 'handshake_port': 55834, 'server_id': 17795186887515041183290515132613757022, 'client_id': 78260282615363317419461183569758057395}}
DEBUG:pygls.server:Content length: 1826
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 1826\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/channels_working.py","languageId":"python","version":1,"text":"#%%\\r\\nimport zmq\\r\\nfrom pathlib import Path\\r\\n\\r\\n\\r\\nctx = zmq.Context()\\r\\nsocket = ctx.socket(zmq.PAIR)\\r\\nport = socket.bind_to_random_port(\\"tcp://127.0.0.1\\", min_port=55555, max_port=55565)\\r\\nprint(port)\\r\\nsocket.close()\\r\\n\\r\\nsocket = ctx.socket(zmq.PAIR)\\r\\nsocket.bind(\\"tcp://127.0.0.1:55560\\")\\r\\nsocket.close()\\r\\n\\r\\n\\r\\nport\\r\\n#%%\\r\\nglobals()\\r\\n\\r\\n#%%\\r\\n#!%load_ext dabbler.ext\\r\\n#%%\\r\\nip = get_ipython()\\r\\nip.ev(\\"dir()\\")[\'__file__\']\\r\\n\\r\\nip.ev(\'__file__\')\\r\\n\\r\\n#%%\\r\\nimport zmq\\r\\nfrom pathlib import Path\\r\\n\\r\\nctx1 = zmq.Context()\\r\\nctx2 = zmq.Context()\\r\\n\\r\\ns1 = ctx1.socket(zmq.PAIR)\\r\\nc1= ctx2.socket(zmq.PAIR)\\r\\n#%%\\r\\n\\r\\n# s1.bind_to_random_port(\\"tcp://127.0.0.1\\", min_port=55555, max_port=55565)\\r\\ns1.bind(\\"tcp://127.0.0.1:55564\\")\\r\\nc1.connect(\\"tcp://127.0.0.1:55564\\")\\r\\n# %%\\r\\nc1.send(b\'hello\')\\r\\ns1.send(b\'hello\')\\r\\ns1.poll(100)\\r\\n#%%\\r\\ns1.recv()\\r\\n\\r\\n# %%\\r\\ns2.send(b\'hello\',zmq.NOBLOCK)\\r\\n\\r\\n#%%\\r\\ns1.send(b\'hello\')\\r\\n\\r\\n#%%\\r\\ns1.poll(100)\\r\\ns1.recv()\\r\\n\\r\\n\\r\\n#%%\\r\\ns2.poll(100)\\r\\ns2.recv(zmq.NOBLOCK)\\r\\n#%%\\r\\nimport os\\r\\n# for os.environ\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\nimport tempfile\\r\\ntempfile.gettempdir()\\r\\n\\r\\n#%%\\r\\n\\r\\ntry:\\r\\n    s3.bind(\\"tcp://127.0.0.1:55564\\")\\r\\nexcept:\\r\\n    s3.connect(\\"tcp://127.0.0.1:55564\\")\\r\\n    \\r\\n\\r\\n\\r\\n# %%\\r\\ns3.send(b\'hello\')\\r\\n\\r\\n#%%\\r\\ns3.poll(100)\\r\\n\\r\\n#%%\\r\\np = Path(__file__)\\r\\nd = p.parent\\r\\nd2 = d.parent\\r\\n# %%\\r\\np.parents.index()\\r\\n\\r\\n#%%\\r\\nimport os\\r\\nos.getlogin()\\r\\nos.environ.get(\'VIRTUAL_ENV\', None) == \'C:\\\\\\\\Projects\\\\\\\\db_dabbler\\\\\\\\db_dabbler_env\'"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 174
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 174\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/channels_working.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 8868
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 8868\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/parser_working_file3.py","languageId":"python","version":1,"text":"#%%\\r\\nfrom pathlib import Path\\r\\nimport pprint\\r\\nimport time\\r\\nfrom dabbler.lsp.parser import get_parser, SqlParserNew\\r\\nimport duckdb\\r\\nimport re\\r\\nfrom lark import Lark, Token, UnexpectedToken, exceptions as lark_exceptions\\r\\ndb2 = duckdb.connect()\\r\\n\\r\\n\\r\\n\\r\\ndb2.read_csv(\\r\\n    \\"./../../sample_data/austin/Issued_Tree_Permits.csv\\", header=True, normalize_names=True\\r\\n).create(\\"tree_permits\\")\\r\\n\\r\\n\\r\\ndb2.sql(\\"create or replace view tp as select * from tree_permits\\")\\r\\n\\r\\n\\r\\n\\r\\nsql_parser = get_parser()\\r\\nparse2 = sql_parser.parse\\r\\n\\r\\npass_test = 0\\r\\nfail_test = 0\\r\\n\\r\\nstart = time.time()\\r\\n\\r\\ntst_files = list(Path(\\"./sql_tst\\").glob(\\"*.sql\\"))\\r\\n\\r\\nfor f in tst_files[:]:\\r\\n    txt = f.read_text()\\r\\n    # print(f.name, duckdb_parse(txt)[\\"error\\"])\\r\\n    try:\\r\\n        parse2(txt)\\r\\n        pass_test += 1\\r\\n        # print(f\'{time.time() - start:.4f} seconds\')\\r\\n    except Exception as e:\\r\\n        print(f.name,e)\\r\\n        fail_test += 1\\r\\n\\r\\nprint(f\\"pass: {pass_test}, fail: {fail_test}, duration: {time.time() - start:.2f} seconds\\")\\r\\n\\r\\n\\r\\n#%%\\r\\ndef parser_error_handler(e:UnexpectedToken):\\r\\n    assert isinstance(e, UnexpectedToken)\\r\\n    print(e.token,e.token.type)\\r\\n    print(e.accepts)   \\r\\n\\r\\n\\r\\n    \\r\\n    if \'_AS\' in e.accepts and e.token.type == \'RPAREN\':\\r\\n        e.interactive_parser.feed_token(Token(\'_AS\', \'AS\'))\\r\\n        e.interactive_parser.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\n        e.interactive_parser.feed_token(e.token)\\r\\n        print(\'added as name\')    \\r\\n        return True\\r\\n    \\r\\n    if e.token == Token(\'$END\', \'\') and \'NAME\' in e.accepts:\\r\\n        e.interactive_parser.feed_token(Token(\'NAME\', \'xyz\'))\\r\\n        # e.interactive_parser.feed_token(e.token)\\r\\n        print(\'end add name\')\\r\\n        return True\\r\\n\\r\\n    if \'NAME\' in e.accepts:\\r\\n        e.interactive_parser.feed_token(Token(\'NAME\', \'QQ\'))\\r\\n        e.interactive_parser.feed_token(e.token)\\r\\n        print(\'added name\')\\r\\n        return True\\r\\n    \\r\\n\\r\\n    # print(e.token)\\r\\n    # e.interactive_parser.feed_eof() \\r\\n    # e.interactive_parser.feed_token(Token(\'NAME\', \'xyz\'))\\r\\n    # e.interactive_parser.feed_token(e.token)\\r\\n    return False\\r\\n\\r\\n\\r\\n\\r\\nsql_grammer = Path(\\"./../dabbler/lsp/sql3b.lark\\").read_text()\\r\\n\\r\\ntest_parser = Lark(\\r\\n    sql_grammer,\\r\\n    parser=\\"lalr\\",\\r\\n    # cache=str(lark_cache),\\r\\n    propagate_positions=True,\\r\\n    maybe_placeholders=True,\\r\\n    debug=False,\\r\\n)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nsql2 = \\"\\"\\"\\r\\n    from tree_permits t\\r\\n    select\\r\\n        sum(t.abc),\\"\\"\\"\\r\\n\\r\\ntry:\\r\\n    t = test_parser.parse(sql2, on_error=parser_error_handler)\\r\\n    print(t.pretty())\\r\\nexcept Exception as e:\\r\\n    ee = e\\r\\n    print(e)\\r\\n\\r\\n \\r\\n \\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\ncheck_choices = (\\r\\n    (\'RPAREN\', \')\'),\\r\\n    (\'NAME\', \'placeholder\'),\\r\\n)\\r\\n\\r\\n\\r\\ndef find_end(p,cur_token):\\r\\n    choices = list(p.choices().keys())\\r\\n    if \'table_ref\' in choices and cur_token == \'from\':\\r\\n        p.feed_token(Token(\'IDENT\', \'placeholder\'))\\r\\n        choices = list(p.choices().keys())\\r\\n    if \'$END\' in choices:\\r\\n        try:\\r\\n            return p.feed_eof()\\r\\n        except Exception as e:\\r\\n            print(e)\\r\\n    # for typ, value in check_choices:\\r\\n    #     if typ in choices:\\r\\n    #         t = Token(typ, value)\\r\\n    #         print(f\'feeding {t}\')\\r\\n    #         p.feed_token(t)\\r\\n    #         return find_end(p)\\r\\n\\r\\n\\r\\ndef interactive_parse(sql:str,pos:int):\\r\\n\\r\\n    p = test_parser.parse_interactive(sql)\\r\\n    tokens = p.iter_parse()\\r\\n    token_history = []\\r\\n    # tk = next(lex)\\r\\n    choices_pos = None\\r\\n    \\r\\n        \\r\\n    while True:\\r\\n        try:\\r\\n            token = next(tokens)\\r\\n        except StopIteration:\\r\\n            break\\r\\n        except UnexpectedToken as e:\\r\\n            print(\'unexpected token\', e.token, e.token.type)\\r\\n            if e.token == \'$END\':\\r\\n                print(\'end\')\\r\\n                break\\r\\n            choices = p.choices().keys()\\r\\n            if \'col_replace\' in choices and e.token == \')\':\\r\\n                p.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\n                p.feed_token(Token(\'_AS\', \'as\'))\\r\\n                p.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\n                p.feed_token(e.token)\\r\\n                continue\\r\\n            \\r\\n            if \'col_exclude\' in choices and e.token == \')\':\\r\\n                p.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\n                p.feed_token(e.token)\\r\\n                continue\\r\\n            \\r\\n            raise e\\r\\n        except Exception as e:\\r\\n            print(e)\\r\\n            raise e\\r\\n        \\r\\n        if not choices_pos and token.end_pos > pos:\\r\\n            choices_pos = list(p.choices().keys())\\r\\n            print(f\'choices, {token}\')\\r\\n        token_history.append(token)\\r\\n        \\r\\n    tree = find_end(p,cur_token=token)\\r\\n    if not tree and not choices_pos:\\r\\n        choices_pos = list(p.choices().keys())\\r\\n    return tree, choices_pos\\r\\n#%%\\r\\n\\r\\nsql2 = \\"\\"\\"--sql,\\r\\nwith abc as (\\r\\n    select 1 as a, 2 as b\\r\\n)\\r\\nselect \\r\\n    *\\r\\nfrom \\r\\n\\"\\"\\"\\r\\nsql2[67]\\r\\n#%%\\r\\np,c = interactive_parse(sql2,67)\\r\\nc\\r\\nprint(p.pretty())\\r\\n#%%\\r\\nToken(\'RPAREN\', \')\') == \')\'\\r\\n\\r\\n\\r\\nsql2 = \\"\\"\\"--sql\\r\\n    with qq as (\\r\\n    select\\r\\n        t.date, from tree_permits t\\r\\n    where t.a in (from jj j select j.))\\r\\n    select q.*,  from qq q\\r\\n    \\"\\"\\"\\r\\n# sql2 = \'set \'\\r\\n\\r\\n# txt = \'t.date, \'\\r\\npos = sql2.find(txt) + len(txt)\\r\\nsql2[0:pos]\\r\\n\\r\\n\\r\\np,c = interactive_parse(sql2,pos)\\r\\n# if p:\\r\\n    # print(p.pretty())\\r\\n\\r\\n\\r\\nprint(p.pretty())\\r\\nc\\r\\n#%%\\r\\n\\r\\nfrom dabbler.common import check_name\\r\\ncheck_name(\'date\')\\r\\n\\r\\n\\r\\n#%%\\r\\nl = test_parser.lex(sql2)\\r\\ndir(test_parser)\\r\\n\\r\\nt = next(l)\\r\\nprint(t)\\r\\n\\r\\nt.type\\r\\n#%%\\r\\np = test_parser.parse_interactive(sql2)\\r\\ni = p.iter_parse()\\r\\n#%%\\r\\nt = next(i)\\r\\nprint(t)\\r\\nprint(p.choices().keys())\\r\\n#%%\\r\\nt\\r\\ndir(p.pretty())\\r\\np.__dict__\\r\\np.parser.parse_table.end_states\\r\\np.parser.parse_table.start_states\\r\\np.parser.parse_table.states\\r\\n#%%\\r\\np.parser.parse_table.states[192]\\r\\n\\r\\n#%%\\r\\ndir(p.parser.debug)\\r\\ndir(p.parser_state)\\r\\np.parser_state.state_stack\\r\\np.parser_state.value_stack[0]\\r\\n#%%\\r\\np.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\np.feed_token(Token(\'_AS\', \'as\'))\\r\\np.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\np.feed_token(Token(\'RPAREN\', \')\'))\\r\\np.feed_eof()\\r\\n\\r\\n#%%\\r\\nprint(p.pretty())\\r\\nlist(p.choices())\\r\\n\\r\\n\\r\\n#%%\\r\\np.feed_token(Token(\'NAME\', \'placeholder\'))\\r\\nprint(p.pretty())\\r\\n#%%\\r\\nc = p.copy()\\r\\ntree = c.feed_eof()\\r\\nprint(tree.pretty())\\r\\n\\r\\n#%%\\r\\n\\r\\npass_test = 0\\r\\nfail_test = 0\\r\\n\\r\\nstart = time.time()\\r\\n\\r\\ntst_files = list(Path(\\"./sql_tst\\").glob(\\"*.sql\\"))\\r\\n\\r\\nfor f in tst_files[:]:\\r\\n    txt = f.read_text()\\r\\n    # print(f.name, duckdb_parse(txt)[\\"error\\"])\\r\\n    try:\\r\\n        interactive_parser(txt)\\r\\n        pass_test += 1\\r\\n        # print(f\'{time.time() - start:.4f} seconds\')\\r\\n    except Exception as e:\\r\\n        print(f.name,e)\\r\\n        fail_test += 1\\r\\n\\r\\nprint(f\\"pass: {pass_test}, fail: {fail_test}, duration: {time.time() - start:.2f} seconds\\")\\r\\n\\r\\n\\r\\n#%%\\r\\nfrom dabbler.lsp.parser import lark_file\\r\\n#%%\\r\\nfrom pathlib import Path\\r\\nimport re\\r\\ngrammer_txt = (Path(__file__).parent.parent / \'dabbler\' / \'lsp\' / \'sql3b.lark\').read_text()\\r\\nreg = re.compile(r\'\'\'([A-Z_]+)\\\\s*:\\\\s*\\"[A-Z_]+\\"\'\'\')\\r\\ndefined_kw = set(reg.findall(grammer_txt))\\r\\n\\r\\nused_kw_reg = reg = re.compile(r\'\'\'([A-Z_]+)\'\'\')\\r\\nused_kw = set(used_kw_reg.findall(grammer_txt))\\r\\n\\r\\nignore = [\'FACTORIAL\',\\r\\n \'DESCRIBE\',\\r\\n \'KEY\',\\r\\n \'ESCAPED_STRING\',\\r\\n \'BITWISE_OR\',\\r\\n \'AS\',\\r\\n \'LESS_THAN_OR_EQUAL\',\\r\\n \'S\',\\r\\n \'ORDER\',\\r\\n \'BITWISE_SHIFT_LEFT\',\\r\\n \'WS\',\\r\\n \'VIRTUAL\',\\r\\n \'COMMA\',\\r\\n \'EQUAL\',\\r\\n \'_\',\\r\\n \'PLUS\',\\r\\n \'BITWISE_SHIFT_RIGHT\',\\r\\n \'AND_OP\',\\r\\n \'EXPONENT\',\\r\\n \'STAR\',\\r\\n \'LESS_THAN\',\\r\\n \'NUMBER\',\\r\\n \'A\',\\r\\n \'IDENT\',\\r\\n \'DOT\',\\r\\n \'CNAME\',\\r\\n \'SIGNED_NUMBER\',\\r\\n \'COMMENT\',\\r\\n \'BITWISE_AND\',\\r\\n \'DIVIDE\',\\r\\n \'BITWISE_NOT\',\\r\\n \'NOT_EQUALS\',\\r\\n \'STORED\',\\r\\n \'GREATER_THAN\',\\r\\n \'INTEGER_DIVIDE\',\\r\\n \'STRING\',\\r\\n \'ALWAYS\',\\r\\n \'MODULO\',\\r\\n \'MINUS\',\\r\\n \'Z_\',\\r\\n \'CONCAT\',\\r\\n \'LPAREN\',\\r\\n \'RPAREN\',\\r\\n \'GREATER_THAN_OR_EQUAL\',\\r\\n \'CAST_OP\']\\r\\n\\r\\n\\r\\nupdate = [x for x in used_kw if x not in defined_kw and x not in ignore]\\r\\nupdate = [f\'{x}: \\"{x}\\"i\' for x in update]\\r\\nprint(\'\\\\n\'.join(update))\\r\\n# %%\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 178
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 178\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/parser_working_file3.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 1642
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 1642\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/parser_working_new.py","languageId":"python","version":1,"text":"#%%\\r\\nfrom tkinter import N\\r\\nimport duckdb\\r\\nfrom dabbler.lsp.new_parser import interactive_parse_new\\r\\nfrom dabbler.lsp.parser import SqlParserNew\\r\\nfrom dabbler.lsp.server_classes import SqlCompleter\\r\\nfrom dabbler.db_stuff import get_db_data_new\\r\\n\\r\\nfrom pathlib import Path\\r\\nimport logging\\r\\nlogger = logging.getLogger(__name__)\\r\\ndb = duckdb.connect()\\r\\ndb.sql(\\"create or replace table potato(a int, b int, c int)\\")\\r\\n#!%load_ext dabbler.ext_debug\\r\\n\\r\\nsql = \\"\\"\\"--sql\\r\\nwith tst_cte as (\\r\\n    select\\r\\n        p.a,\\r\\n        p.b,\\r\\n        p.c,\\r\\n    from potato p\\r\\n    join zz z on z.a = p.a\\r\\n )\\r\\nfrom tst_cte t\\r\\nSELECT t.a, t.b, t.c \\"\\"\\"\\r\\nsql[len(sql)-1]\\r\\n\\r\\nclass FakeLs:\\r\\n    def __init__(self):\\r\\n        self.logger = logging.getLogger(__name__)\\r\\n        self.db = duckdb.connect()\\r\\n        self.db_data = get_db_data_new(self.db)\\r\\n        self.log = logging.getLogger(__name__)\\r\\n\\r\\nls = FakeLs()\\r\\np = SqlParserNew(db,None,logger,r\'C:\\\\test\')\\r\\ndb_data = get_db_data_new(db)\\r\\ndb_data[\'file_search_path\'] = r\'C:\\\\test\'\\r\\nc = SqlCompleter(db_data,ls)\\r\\n# interactive_parse_new(sql, 121)\\r\\n# %%\\r\\nr = p.parse_sql(sql,127)\\r\\nr[0].queries\\r\\n#%%\\r\\nlen(sql)\\r\\na,b,g = c.get_queries(len(sql)-1,sql)\\r\\nb.queries_list[0].end_pos\\r\\n#%%\\r\\nif b.queries_list[1].ctes:\\r\\n    print(\'yes\')\\r\\n\\r\\nb.queries_list[1].ctes\\r\\n#%%\\r\\nc.parse_sql2(127,sql)\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 176
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 176\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/parser_working_new.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 1725
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 1725\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/playground.py","languageId":"python","version":1,"text":"#%%\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n#!%load_ext dabbler.ext_debug\\r\\n\\r\\n# %%\\r\\n\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nCREATE SCHEMA v;\\r\\nCREATE TABLE v.t (a int, b int);\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ndb.execute(\\r\\n\\"\\"\\"--sql,\\r\\nSELECT *\\r\\nFROM duckdb_keywords() k\\r\\nWHERE k.keyword_name like $1\\r\\n\\r\\n\\"\\"\\",\\r\\n[\'%and%\']\\r\\n).fetchall()\\r\\n\\r\\n\\r\\n#%%\\r\\nimport logging\\r\\nlog = logging.getLogger(\'dabbler\')\\r\\nfrom dabbler.lsp.parser import SqlParserNew\\r\\np = SqlParserNew(db,None,log)\\r\\n\\r\\nsql_txt = (\\r\\n\\"\\"\\"--sql,\\r\\nwith abc as (\\r\\n    select 1 as a, 2 as b\\r\\n)\\r\\nselect\\r\\n    g.a,\\r\\n    g.b,\\r\\nfrom abc g \\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\np.parse_sql(sql_txt,len(sql_txt)-1)\\r\\n#%%\\r\\nimport tempfile\\r\\ntempfile.gettempdir()\\r\\n\\r\\n\\r\\n#%%\\r\\ndb.sql(\\r\\n\\"\\"\\"--sql,\\r\\nwith num as (\\r\\nselect\\r\\n    l.\\"Draw Date\\", unnest(split(l.\\"Winning Numbers\\",\' \')) as numbers\\r\\nfrom \'./../../sample_data/Lottery.csv\' l)\\r\\nselect\\r\\n    numbers,\\r\\n    count(*) as freq,\\r\\n    sum(1) as total,\\r\\n    sum(1) over () as total2,\\r\\n    sum(1) over (partition by numbers) as total3,\\r\\n    sum(1) over (partition by numbers order by numbers) as total4,\\r\\n    sum(1) over (partition by numbers order by numbers rows between 1 preceding and 1 following) as total5\\r\\n    from information_schema.tables\\r\\nfrom num\\r\\nGROUP by AL   \\r\\norder by freq desc\\r\\n\\"\\"\\"\\r\\n)\\r\\n\\r\\n#%%\\r\\ntxt = \\"\\"\\"--sql\\r\\ncreate table abc (\\r\\n    wbs VARCHAR,\\r\\n    name VARCHAR,\\r\\n)\\r\\n\\"\\"\\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#%%"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 168
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 168\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/playground.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 226
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 226\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/t2.py","languageId":"python","version":1,"text":"import re\\r\\n\\r\\n\\r\\n\'\'"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 160
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 160\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/t2.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 3276
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 3276\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/test_load_ext1.py","languageId":"python","version":1,"text":"#%%\\r\\nimport duckdb\\r\\ndb = duckdb.connect()\\r\\n#!%load_ext dabbler.ext_debug\\r\\n#%%\\r\\n\\r\\ndb.execute(\\r\\n    \\"\\"\\"--sql\\r\\n    CREATE or REPLACE TABLE t1 as\\r\\n    from (VALUES\\r\\n        (\'a\',1),\\r\\n        (\'b\',2),\\r\\n        (\'c\',3),\\r\\n        (\'d\',4),\\r\\n    )\\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n\\r\\n#%%\\r\\nimport random\\r\\nfrom faker import Faker\\r\\nfake = Faker()\\r\\n#%%\\r\\nfrom itertools import cycle, count\\r\\n\\r\\nfake_types = {\\r\\n    \'name\':lambda:fake.name(),\\r\\n    \'address\':lambda:fake.address(),\\r\\n    \'value\':lambda:random.random() * random.randint(1,10000),\\r\\n    \'amount\':lambda:random.randint(1,10000),\\r\\n    \'date\':lambda:fake.date(),\\r\\n    \'date2\':lambda:fake.date_time(),\\r\\n    \'phone_number\':lambda:fake.phone_number(),\\r\\n    \'company\':lambda:fake.company(),\\r\\n    \'month_name\':lambda:fake.month_name(),\\r\\n    \'ship\':lambda:fake.military_ship(),\\r\\n    \'mac_address\':lambda:fake.mac_address(),\\r\\n    \'free_email\':lambda:fake.free_email(),\\r\\n    \'email\':lambda:fake.email(),\\r\\n    \'file_ext\':lambda:fake.file_extension(),\\r\\n}\\r\\n\\r\\ncol_keys = cycle(list(fake_types.keys()))\\r\\n\\r\\nnext(col_keys)\\r\\n\\r\\ncc = count()\\r\\nnext(cc)\\r\\n#%%\\r\\nimport datetime\\r\\ndef fmt_type(val):\\r\\n    if isinstance(val,str):\\r\\n        return f\\"\'{val}\'\\"\\r\\n    if isinstance(val,datetime.date):\\r\\n        return f\\"DATE \'{val}\'\\"\\r\\n    if isinstance(val,datetime.datetime):\\r\\n        return f\\"DATE \'{val}\'\\"\\r\\n    return str(val)\\r\\n\\r\\nfrom time import time\\r\\n\\r\\nfor ci in range(20):\\r\\n    start = time()\\r\\n    col_count = random.randint(3,100)\\r\\n    row_count = random.randint(3,200)\\r\\n    \\r\\n    \\r\\n    col_def = []\\r\\n    \\r\\n    \\r\\n    for i in range(col_count):\\r\\n        col = next(col_keys)\\r\\n        func = fake_types[col]\\r\\n        col_def.append([f\'{col}_{i}\',func])\\r\\n\\r\\n    alias = f\\"a({\', \'.join([f\'{col[0]}\' for col in col_def])})\\"\\r\\n    \\r\\n    values = []\\r\\n    \\r\\n    for row in range(row_count):\\r\\n        row_data = []\\r\\n        for col in range(col_count):\\r\\n            txt = f\\"{fmt_type(col_def[col][1]())}\\"\\r\\n            row_data.append(txt)\\r\\n        row_txt = \', \'.join(row_data)\\r\\n        values.append(f\'({row_txt})\')\\r\\n        \\r\\n    values_txt = \',\\\\n\'.join(values)\\r\\n\\r\\n    sql_txt = (\\r\\n    f\\"\\"\\"CREATE or REPLACE TABLE ajj{next(cc)} as\\r\\nfrom (VALUES\\r\\n{values_txt}\\r\\n) {alias}    \\r\\n    \\"\\"\\")\\r\\n    make_fake_table = time() - start\\r\\n    start = time()\\r\\n    # print(sql_txt)\\r\\n    db.execute(sql_txt)   \\r\\n    exe_time = time() - start\\r\\n    print(f\'{ci: >3}: data: {make_fake_table: >5.1f}s      insert:{exe_time: >5.1f}s\')\\r\\n\\r\\n# print(values_txt)\\r\\n# %%\\r\\ndb.execute(\\"set file_search_path to \'C:/scripts\';\\")\\r\\n#%%\\r\\n\\r\\n#%%\\r\\n\\r\\nnext(cc)\\r\\ndb.sql(\\r\\n    \\"\\"\\"--sql\\r\\n    with gg as (from ajj10 a\\r\\n    SELECT a.email_1 as j, a.file_ext_2 as k)\\r\\n    from gg g\\r\\n    SELECT g.j, g.k\\r\\n    ;\\r\\n    FROM ajj16 a\\r\\n    SELECT COLUMNS(c -> c LIKE \'a%\');\\r\\n    from ajj16 a\\r\\n    SELECT a.address_31, a.address_31;\\r\\n    \\"\\"\\"\\r\\n)\\r\\n\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 172
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 172\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/test_load_ext1.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 4601
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 4601\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/scripts/update_functions_data.py","languageId":"python","version":1,"text":"#%%\\r\\nimport requests\\r\\nimport json\\r\\nimport duckdb\\r\\nfrom pathlib import Path\\r\\n\\r\\nurl = \'https://github.com/duckdb/duckdb-web/blob/main/docs/functions.json\'\\r\\n\\r\\ndata = requests.get(url).json()\\r\\ndata = json.loads(\'\\\\n\'.join(data[\'payload\'][\'blob\'][\'rawLines\']))\\r\\n\\r\\n\\r\\n# %%\\r\\n\\r\\nfunctions = {d[\'name\']:d for d in data}\\r\\n\\r\\nall_functions = {}\\r\\nall_functions.update(functions)\\r\\n#%%\\r\\n\\r\\nfor fn in functions:\\r\\n    if \'aliases\' in functions[fn]:\\r\\n        name = functions[fn][\'name\']\\r\\n        aliases = functions[fn][\'aliases\']\\r\\n        for a in aliases:\\r\\n            new_fn = functions[fn].copy()\\r\\n            for k in new_fn:\\r\\n                if type(new_fn[k]) == str:\\r\\n                    new_fn[k] = new_fn[k].replace(name,a)\\r\\n                \\r\\n            all_functions.update({new_fn[\'name\']:new_fn})\\r\\n\\r\\n# %%\\r\\ndb_fn = set([x[0] for x in duckdb.execute(\\"select distinct function_name from duckdb_functions()\\").fetchall()])\\r\\njson_fn = set(all_functions.keys())\\r\\n\\r\\n#%%\\r\\ndb_fn.difference(json_fn)\\r\\n#%%\\r\\nnew_fn\\r\\n\\r\\n#%%\\r\\nall_functions[\'arg_max\']\\r\\n#%%\\r\\nall_functions[\'argmax\']\\r\\n\\r\\n#%%\\r\\n\\r\\ndef function_doc(fn):\\r\\n    name:str = fn.get(\'name\',None)\\r\\n    param:str = fn.get(\'parameters\',None)\\r\\n    param_types:str = fn.get(\'parameter_types\',None)\\r\\n    desc:str = fn.get(\'description\',None)\\r\\n    example:str = fn.get(\'example\',None)\\r\\n    category:str = fn.get(\'category\',None)\\r\\n    result:str = fn.get(\'result\',None)\\r\\n    \\r\\n    \\r\\n        \\r\\n    #markdown\\r\\n    doc = \'\'\\r\\n    # doc += f\'```\\\\n\'\\r\\n    # doc += f\'<code>\\\\n\'\\r\\n    param_str = \', \'.join([p for p in param])\\r\\n    if category:\\r\\n        doc += f\'**{category.capitalize()} function**: \'\\r\\n    # doc += f\'```{name}({param_str}```\\\\n\\\\n\'\\r\\n    # doc += f\'{name}({param_str})\\\\n\'\\r\\n    # doc += f\'`{name}({param_str})`\\\\n\'\\r\\n    # doc += f\'<mark>{name}({param_str})</mark>\\\\n\'\\r\\n    # doc += f\'</code>\\\\n\\\\n\'\\r\\n    # doc += f\'```\\\\n\\\\n\'\\r\\n    if desc:\\r\\n        doc += f\'{desc}\\\\n\\\\n\'\\r\\n    # doc += f\'**Sytnax**\\\\n\\\\n\'\\r\\n    if example:\\r\\n        doc += f\'**Example**\\\\n\\\\n\'\\r\\n        doc += f\'```sql\\\\n\'\\r\\n        doc += f\'{example}\\\\n\'\\r\\n        doc += f\'```\\\\n\\\\n\'\\r\\n        if result:\\r\\n            doc += f\'**Returns**\\\\n\\\\n\'\\r\\n            doc += f\'{result}\\\\n\'\\r\\n    \\r\\n    if param_types:\\r\\n        # doc += f\'**Parameters**\\\\n\\\\n\'\\r\\n        # param_len = max(len(p) for p in param)\\r\\n        doc += \'| Parameter | Type |\\\\n\'\\r\\n        doc += \'| ------------- | ------------ |\\\\n\'\\r\\n        for p,t in zip(param,param_types):\\r\\n            doc += f\'| {p} | {t} |\\\\n\'\\r\\n            # doc += f\'- {p: <{param_len}}  {t}\\\\n\'\\r\\n    \\r\\n\\r\\n    detail = f\'{name}({param_str})\'\\r\\n    \\r\\n    \\r\\n    result = {\\r\\n        \'documentation\':doc,\\r\\n        \'detail\':detail\\r\\n    }\\r\\n    \\r\\n    return result\\r\\n\\r\\n\\r\\nfunction_lookup = {\\r\\n    k:{\\r\\n        \'documentation\':function_doc(v),\\r\\n        \'docstring\':function_doc(v),\\r\\n    }\\r\\n    for k,v in all_functions.items()}\\r\\n\\r\\n# import pandas as pd\\r\\n# pd.da\\r\\n\\r\\ndb_fn = duckdb.execute(\\"select function_name, first(parameters), first(parameter_types), first(description), first(function_type), first(example) from duckdb_functions() where function_name not similar to \'.*\\\\W.*\' group by all \\").fetchall()\\r\\ndb_fn = {x[0]:{\\r\\n    \'name\':x[0],\\r\\n    \'parameters\':x[1],\\r\\n    \'parameter_types\':x[2],\\r\\n    \'description\':x[3],\\r\\n    \'function_type\':x[4],\\r\\n    \'example\':x[5],\\r\\n    } for x in db_fn}\\r\\n\\r\\nitems_to_add = list(set(db_fn.keys()).difference(function_lookup.keys()))\\r\\n\\r\\nitems_to_add = {k:{\\r\\n                   \'documentation\':function_doc(db_fn[k]),\\r\\n                   \'docstring\':function_doc(db_fn[k]),\\r\\n                   } for k in items_to_add}\\r\\n\\r\\nfunction_lookup.update(items_to_add)\\r\\n\\r\\n\\r\\noutput = Path(__file__).parent.parent.joinpath(\'dabbler\').joinpath(\'lsp\').joinpath(\'functions.json\')\\r\\n\\r\\noutput.write_text(json.dumps(function_lookup,indent=4))\\r\\ntxt = function_lookup[\'read_csv\'][\'documentation\'][\'documentation\']\\r\\nPath(__file__).parent.joinpath(\'tst.md\').write_text(txt)\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n#%%\\r\\nprint(function_lookup[\'strftime\'][\'documentation\'][\'documentation\'])\\r\\n\\r\\n# %%\\r\\nfn_lu = json.loads(output.read_text())\\r\\n\\r\\n#%%\\r\\n\\r\\n\\r\\n\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 171
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 171\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/test_files/tst_load_ext2.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 176
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 176\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/scripts/update_functions_data.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 9605
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 9605\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/lsp/db_data.py","languageId":"python","version":1,"text":"from filecmp import cmp\\r\\nfrom lsprotocol.types import (\\r\\n    CompletionItemKind,\\r\\n    MarkupContent,\\r\\n)\\r\\nfrom pathlib import Path\\r\\nfrom dabbler.lsp.sql_utils import CmpItem\\r\\nimport duckdb\\r\\nimport json\\r\\nfrom dabbler.common import check_name\\r\\n\\r\\n\\r\\n\\r\\nget_records_sql = \\"\\"\\"--sql\\r\\n    with\\r\\n        cols as (\\r\\n            select \\r\\n                database_name||\'.\'||schema_name as db_scm,\\r\\n                table_name, \\r\\n                list([column_name, data_type]) as cols\\r\\n            from duckdb_columns()\\r\\n            group by all\\r\\n        ),\\r\\n    tables_views as (\\r\\n        select \\r\\n            database_name||\'.\'||schema_name as db_scm,\\r\\n            table_name, \\r\\n            \'table\' as object_type,\\r\\n            \'table\' as table_type,\\r\\n            case\\r\\n                when not internal then sql\\r\\n                else null\\r\\n            end as sql\\r\\n        from duckdb_tables()\\r\\n        union all\\r\\n        select \\r\\n            database_name||\'.\'||schema_name as db_scm,\\r\\n            view_name, \\r\\n            \'table\' as object_type,\\r\\n            \'view\' as table_type,\\r\\n            case\\r\\n                when not internal then sql\\r\\n                else \'internal\'\\r\\n            end as sql\\r\\n        from duckdb_views()\\r\\n        union all\\r\\n            select distinct\\r\\n            database_name||\'.\'||schema_name as db_scm,\\r\\n            d.function_name,\\r\\n            \'table\' as object_type,\\r\\n            \'table_macro\',\\r\\n            case\\r\\n                when not internal then \'external\'\\r\\n                else \'internal\'\\r\\n            end as sql\\r\\n        from duckdb_functions() d\\r\\n        where d.function_type in (\'table\',\'table_macro\')\\r\\n            --and d.function_name not in (\'force_checkpoint\')\\r\\n        union all\\r\\n        select distinct\\r\\n            database_name||\'.\'||schema_name as db_scm,\\r\\n            d.function_name,\\r\\n            \'function\' as object_type,\\r\\n            d.function_type,\\r\\n            null,\\r\\n        from duckdb_functions() d\\r\\n        where d.function_type in (\'aggregate\',\'macro\',\'scalar\')\\r\\n            and d.function_name not similar to \'.*\\\\W.*\'\\r\\n            and not d.internal\\r\\n            and database_name != \'system\'\\r\\n        group by all\\r\\n        union all\\r\\n        select distinct\\r\\n            null,\\r\\n            d.function_name,\\r\\n            \'function\' as object_type,\\r\\n            d.function_type,\\r\\n            \'internal\',\\r\\n        from duckdb_functions() d\\r\\n        where d.function_type in (\'aggregate\',\'macro\',\'scalar\')\\r\\n            and d.function_name not similar to \'.*\\\\W.*\'\\r\\n            and database_name = \'system\'\\r\\n        group by all\\r\\n    )\\r\\n    select \\r\\n        t.*,\\r\\n        case when object_type = \'table\' then c.cols end as cols\\r\\n    from tables_views t\\r\\n        left join cols c using (db_scm, table_name)\\r\\n    \\"\\"\\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ndef make_db(db_data:dict):\\r\\n    \\"\\"\\"\\r\\n    makes a duckdb in memory database from mirroring the tables \\r\\n    and columns in the IPython database.\\r\\n    \\r\\n    This DB is used by the language server to get column completion items\\r\\n    for subqueries and CTEs.\\r\\n    \\"\\"\\"\\r\\n    db2 = duckdb.connect()\\r\\n    databases = [x[0] for x in db2.execute(\\"select database_name from duckdb_databases()\\").fetchall()]\\r\\n\\r\\n    for db_to_add in db_data[\'databases\']:\\r\\n        if db_to_add not in databases:\\r\\n            db2.execute(f\\"attach \':memory:\' as {db_to_add}\\")\\r\\n\\r\\n    schemas = [x[0] for x in db2.execute(\\"select database_name ||\'.\'|| schema_name from duckdb_schemas()\\").fetchall()]\\r\\n\\r\\n    for schema in db_data[\'schemas\']:\\r\\n        if schema not in schemas:\\r\\n            db2.execute(f\\"create schema {schema}\\")\\r\\n            \\r\\n    db2.execute(f\\"use {db_data[\'current_schema\']};\\")\\r\\n    db2.execute(\'\\\\n\'.join([x[1] for x in db_data[\'dataframes\']]))\\r\\n\\r\\n    for schema, item, sql, cols in db_data[\'data\']:\\r\\n        if not cols:\\r\\n            continue\\r\\n        col_names = []\\r\\n        col_items = []\\r\\n        for c, d in cols:\\r\\n            if c in col_names:\\r\\n                continue\\r\\n            col_names.append(c)\\r\\n            col_items.append([c, d])\\r\\n\\r\\n        col_txt = \',\\\\n\'.join([f\'\\"{c[0]}\\" {c[1]}\' for c in col_items])\\r\\n        sql2 = f\'create table {item}({col_txt})\'\\r\\n        db2.execute(f\'use {schema}; {sql2}\')\\r\\n\\r\\n    db2.execute(f\\"use {db_data[\'current_schema\']};\\")\\r\\n    if db_data[\'file_search_path\']:\\r\\n        db2.execute(f\\"\\"\\"set file_search_path to \'{db_data[\'file_search_path\']}\';\\"\\"\\")\\r\\n    \\r\\n    return db2\\r\\n\\r\\n\\r\\n\\r\\ndef make_completion_map(db:duckdb.DuckDBPyConnection,db_data):\\r\\n    \\"\\"\\"makes a map of completion items for the language server\\"\\"\\"\\r\\n    records = db.execute(get_records_sql).fetchall()\\r\\n    function_docs = json.loads(Path(__file__).parent.joinpath(\'functions.json\').read_text())\\r\\n    kind_map = {\\r\\n        \'table\':CompletionItemKind.File,\\r\\n        \'table_macro\':CompletionItemKind.File,\\r\\n        \'function\':CompletionItemKind.Function,\\r\\n    }\\r\\n\\r\\n    sort_map = {\\r\\n        \'table\':\\"2\\",\\r\\n        \'function\':\\"8\\"\\r\\n    }\\r\\n\\r\\n\\r\\n    item_map:dict[str,list[CmpItem]] = {}\\r\\n    item_map[\'root_namespace\'] = []\\r\\n\\r\\n    for db_scm, fn_name, fn_type in db_data[\'functions\']:\\r\\n        if fn_type == \'table_macro\':\\r\\n            obj_type = \'table_macro\'\\r\\n        else:\\r\\n            obj_type = \'function\'\\r\\n\\r\\n        comp_item = CmpItem(\\r\\n                label=fn_name,\\r\\n                kind=kind_map[obj_type],\\r\\n                detail=None,\\r\\n                typ=\'function\',\\r\\n                sort=\'9\',\\r\\n                obj_type=obj_type,\\r\\n                doc=None)\\r\\n        if db_scm not in item_map:\\r\\n            item_map[db_scm] = []\\r\\n        item_map[db_scm].append(comp_item)\\r\\n\\r\\n    for db_scm, item, obj_type, comp_detial, sql, cols in records:\\r\\n        \\r\\n        if not db_scm:\\r\\n            db_scm = \'root_namespace\'\\r\\n        \\r\\n        if db_scm not in item_map:\\r\\n            item_map[db_scm] = []\\r\\n        \\r\\n        fn_doc = None\\r\\n        fn_detail = None\\r\\n        \\r\\n        sort = sort_map[obj_type]\\r\\n        if sql == \'internal\':\\r\\n            sort = \'9\'\\r\\n        \\r\\n        if obj_type == \'function\' or comp_detial == \'table_macro\':\\r\\n            if item in function_docs:\\r\\n                fn_doc = MarkupContent(\\r\\n                    kind=\'markdown\',\\r\\n                    value=function_docs[item][\'documentation\'][\'documentation\']) \\r\\n                fn_detail = function_docs[item][\'documentation\'][\'detail\'] \\r\\n        \\r\\n        comp_item = CmpItem(\\r\\n                label=item,\\r\\n                kind=kind_map[obj_type],\\r\\n                detail=fn_detail,\\r\\n                typ=comp_detial,\\r\\n                sort=sort,\\r\\n                obj_type=obj_type,\\r\\n                doc=fn_doc)\\r\\n        \\r\\n\\r\\n        item_map[db_scm].append(comp_item)\\r\\n        if db_scm == db_data[\'current_schema\']:\\r\\n            item_map[\'root_namespace\'].append(comp_item)\\r\\n        \\r\\n        \\r\\n        if cols:\\r\\n            col_completions = [CmpItem(\\r\\n                label=c[0],\\r\\n                kind=CompletionItemKind.Field,\\r\\n                detail=None,\\r\\n                typ=c[1],\\r\\n                sort=\'1\',\\r\\n                obj_type=\'column\',\\r\\n                doc=None) for c in cols]\\r\\n            item_map[f\'{db_scm}.{item}\'] = col_completions\\r\\n            if db_scm == db_data[\'current_schema\']:\\r\\n                if item in item_map:\\r\\n                    item_map[item].extend(col_completions)\\r\\n                else:\\r\\n                    item_map[item] = col_completions\\r\\n\\r\\n    cur_db = db_data[\'current_schema\'].split(\'.\')[0]\\r\\n\\r\\n    for cat_schema in db_data[\'schemas\']:\\r\\n        cat, schema = cat_schema.split(\'.\')\\r\\n        cat_comp = CmpItem(\\r\\n            label=cat,\\r\\n            kind=CompletionItemKind.Folder,\\r\\n            detail=None,\\r\\n            typ=\'database\',\\r\\n            sort=\'3\',\\r\\n            obj_type=\'database\',\\r\\n            doc=None)\\r\\n        \\r\\n        schema_comp = CmpItem(\\r\\n            label=schema,\\r\\n            kind=CompletionItemKind.Folder,\\r\\n            detail=None,\\r\\n            typ=\'schema\',\\r\\n            sort=\'3\',\\r\\n            obj_type=\'schema\',\\r\\n            doc=None)\\r\\n        \\r\\n\\r\\n        if cat not in item_map:\\r\\n            item_map[cat] = []\\r\\n            item_map[\'root_namespace\'].append(cat_comp)\\r\\n            \\r\\n        item_map[cat].append(schema_comp)\\r\\n        \\r\\n        root_labels = [x.label for x in item_map[\'root_namespace\']]\\r\\n        item_map[\'root_namespace\'].extend([x for x in item_map[\'system.main\'] if x.label not in root_labels])\\r\\n    \\r\\n    for cat_schema in db_data[\'schemas\']:\\r\\n        cat, schema = cat_schema.split(\'.\')\\r\\n        if cat == cur_db:\\r\\n            if schema not in item_map and schema not in item_map[\'root_namespace\']:\\r\\n                if not cat_schema in item_map:\\r\\n                    item_map[cat_schema] = []\\r\\n                item_map[schema] = item_map[cat_schema]\\r\\n                item_map[\'root_namespace\'].append(schema_comp)\\r\\n    \\r\\n    return item_map\\r\\n\\r\\n\\r\\n        \\r\\n   "}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 7053
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 7053\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/db_stuff.py","languageId":"python","version":1,"text":"#%%\\r\\nimport duckdb\\r\\nimport os\\r\\nfrom IPython import get_ipython\\r\\nfrom dabbler.gui_stuff import check_dataframe_type\\r\\nfrom dabbler.common import check_name\\r\\n\\r\\n\\r\\ndef get_db_data_new(db:duckdb.DuckDBPyConnection, file_search_path:str=None):\\r\\n    \\"\\"\\"gets the data to send to the language server\\"\\"\\"\\r\\n    db_items = db.execute(\\"\\"\\"\\r\\n            with\\r\\n        cols as (\\r\\n            select \\r\\n                database_name||\'.\'||schema_name as db_scm,\\r\\n                table_name, \\r\\n                list([column_name, data_type]) as cols\\r\\n            from duckdb_columns\\r\\n            group by all\\r\\n        ), db_data as (\\r\\n            (select database_name||\'.\'||schema_name as db_scm, table_name, sql from duckdb_tables)\\r\\n            union all\\r\\n            (select database_name||\'.\'||schema_name, view_name, sql from duckdb_views order by view_oid)\\r\\n            union all\\r\\n            (select database_name||\'.\'||schema_name, sequence_name, sql from duckdb_sequences())\\r\\n        )\\r\\n        select\\r\\n            d.*,\\r\\n            c.cols\\r\\n        from db_data d\\r\\n            left join cols c using (db_scm, table_name)\\r\\n        \\"\\"\\").fetchall()\\r\\n\\r\\n    db_functions = db.sql(\\r\\n            \\"\\"\\"--sql,\\r\\n            select\\r\\n                database_name||\'.\'||schema_name as db_scm,\\r\\n                function_name,\\r\\n                function_type,\\r\\n            from duckdb_functions()\\r\\n            WHERE internal = false\\r\\n            \\"\\"\\"\\r\\n            ).fetchall()\\r\\n\\r\\n    taken_table_names = [x[0] for x in db.sql(\\r\\n        \\"\\"\\"\\r\\n        select distinct \\r\\n            table_name \\r\\n        from duckdb_columns() \\r\\n        where \\r\\n            database_name = current_database()\\r\\n            and schema_name = current_schema()\\r\\n            \\r\\n            union all \\r\\n        \\r\\n        select distinct \\r\\n            function_name \\r\\n        from duckdb_functions() \\r\\n        where \\r\\n            function_type = \'table\'\\r\\n            and database_name = current_database()\\r\\n            and schema_name = current_schema()\\r\\n        \\"\\"\\").fetchall()]\\r\\n\\r\\n    dataframes = []\\r\\n    ipython = get_ipython()\\r\\n    for item in (ipython.ev(\'dir()\')):\\r\\n        i_type = str(type(ipython.ev(item)))\\r\\n        df_type = check_dataframe_type(i_type)\\r\\n        \\r\\n        if df_type and item[0] != \'_\' and item not in taken_table_names:\\r\\n            unique_name = f\'my_item_zz_{item}\'\\r\\n            locals().__setitem__(unique_name,ipython.ev(item))\\r\\n            try:\\r\\n                cols = [[x[0],x[1]] for x in  db.sql(f\\"describe select * from {unique_name} limit 1\\").fetchall()]\\r\\n            except:\\r\\n                continue\\r\\n            \\r\\n            sql = f\'CREATE TABLE {item}({\\", \\".join([f\\"{check_name(c[0])} {c[1]}\\" for c in cols])});\'\\r\\n            \\r\\n            dataframes.append([\\r\\n                item,\\r\\n                sql,\\r\\n                cols])\\r\\n\\r\\n\\r\\n    current_schema:str = db.execute(\\"select current_database()||\'.\'||current_schema()\\").fetchone()[0]\\r\\n    databases = [x[0] for x in db.execute(\\"select database_name from duckdb_databases()\\").fetchall()]\\r\\n    schemas = [x[0] for x in db.execute(\\"select database_name ||\'.\'|| schema_name from duckdb_schemas()\\").fetchall()]\\r\\n\\r\\n    db_data = {\'data\':db_items,\\r\\n            \'dataframes\':dataframes,\\r\\n            \'databases\':databases,\\r\\n            \'functions\':db_functions,\\r\\n            \'schemas\':schemas,\\r\\n            \'current_schema\':current_schema,\\r\\n            \'cwd\':os.getcwd(),\\r\\n            \'file_search_path\':file_search_path,\\r\\n            }\\r\\n\\r\\n    return db_data\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n# def get_db_data(db:duckdb.DuckDBPyConnection):\\r\\n#     records = db.execute(\\r\\n#         \\"\\"\\"\\r\\n#         select\\r\\n#             c.table_catalog,\\r\\n#             c.table_schema,\\r\\n#             c.table_name,\\r\\n#             t.table_type,\\r\\n#             list([column_name, data_type]),\\r\\n#             sql\\r\\n#         from duckdb_columns c\\r\\n#             join information_schema.tables t using (table_catalog, table_schema, table_name)\\r\\n#         group by all\\r\\n        \\r\\n#         union all\\r\\n        \\r\\n#         select distinct\\r\\n#             d.database_name,\\r\\n#             d.schema_name,\\r\\n#             d.function_name,\\r\\n#             \'table_function\',\\r\\n#             [],\\r\\n#             null\\r\\n#         from duckdb_functions() d\\r\\n#         where d.function_type in (\'table\',\'table_macro\')\\r\\n#             --and d.function_name not in (\'force_checkpoint\')\\r\\n#         group by all\\r\\n        \\r\\n        \\r\\n#         \\"\\"\\").fetchall()\\r\\n    \\r\\n#     functions = db.execute(\\r\\n#         \\"\\"\\"\\r\\n#         select distinct\\r\\n#             d.database_name,\\r\\n#             d.schema_name,\\r\\n#             d.function_name,\\r\\n#             d.function_type,\\r\\n#             [],\\r\\n#         from duckdb_functions() d\\r\\n#         where d.function_type in (\'aggregate\',\'macro\',\'scalar\')\\r\\n#             and d.function_name not similar to \'.*\\\\W.*\'\\r\\n#             and not d.internal\\r\\n#             and database_name != \'system\'\\r\\n#         group by all\\r\\n        \\r\\n#         union all\\r\\n        \\r\\n#         select distinct\\r\\n#             null,\\r\\n#             null,\\r\\n#             d.function_name,\\r\\n#             d.function_type,\\r\\n#             [],\\r\\n#         from duckdb_functions() d\\r\\n#         where d.function_type in (\'aggregate\',\'macro\',\'scalar\')\\r\\n#             and d.function_name not similar to \'.*\\\\W.*\'\\r\\n#             and database_name = \'system\'\\r\\n#         group by all\\r\\n#         \\"\\"\\").fetchall()\\r\\n\\r\\n#     table_names = [x[2] for x in records]\\r\\n\\r\\n#     ipython = get_ipython()\\r\\n#     for item in (ipython.ev(\'dir()\')):\\r\\n#         i_type = str(type(ipython.ev(item)))\\r\\n        \\r\\n#         if i_type in capture_types and item[0] != \'_\' and item not in table_names:\\r\\n#             locals().__setitem__(item,ipython.ev(item))\\r\\n#             cols = [[x[0],x[1]] for x in  db.sql(\\"describe select * from df limit 1\\").fetchall()]\\r\\n#             records.append([None,None,item,\'python\',cols])\\r\\n\\r\\n#     current_schema = db.execute(\\"select current_schema()\\").fetchone()[0]\\r\\n#     current_db = db.execute(\\"select current_database()\\").fetchone()[0]\\r\\n#     sequences = db.execute(\\"select database_name, schema_name, sequence_name, from duckdb_sequences()\\").fetchall()\\r\\n    \\r\\n#     db_data = {\\r\\n#         \'tbl_col\':records,\\r\\n#         \'sequences\':sequences,\\r\\n#         \'functions\':functions,\\r\\n#         \'current_db\':current_db,\\r\\n#         \'current_schema\':current_schema,\\r\\n#     }\\r\\n    \\r\\n#     return db_data\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#%%\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 163
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 163\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/db_stuff.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 166
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 166\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/lsp/db_data.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 14008
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 14008\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/test_parser_gui.py","languageId":"python","version":1,"text":"#%%\\r\\n\\r\\nfrom qtpy import QtWidgets, QtGui, QtCore\\r\\nfrom txt_util import line_col, move_line, get_idx\\r\\nfrom gui_stuff import gui_style\\r\\nfrom dabbler.lsp.new_parser import interactive_parse_new\\r\\n\\r\\n\\r\\nkey_map = {\\r\\n\\r\\n}\\r\\n\\r\\nclass Shortcut:\\r\\n    def __init__(self, Seq, Parent, target, description:str=None):\\r\\n        pp = f\'{Seq: <10}{description}\'\\r\\n        key_map[Seq] = pp\\r\\n        if not isinstance(Seq, list):\\r\\n            Seq = [Seq]\\r\\n        for i in Seq:\\r\\n            sc = QtGui.QShortcut(QtGui.QKeySequence(i), Parent)\\r\\n            sc.activated.connect(target)\\r\\n\\r\\n\\r\\nclass ShortcutHelp(QtWidgets.QWidget):\\r\\n    def __init__(self, parent:\'SqlEditor\'):\\r\\n        super().__init__()\\r\\n        self.setWindowTitle(\'Shortcuts\')\\r\\n        # self.setGeometry(100, 100, 800, 600)\\r\\n        self.app2 = parent\\r\\n\\r\\n        self.text_edit = QtWidgets.QLabel()\\r\\n        self.text_edit.setText(\'\\\\n\'.join(key_map.values()))\\r\\n\\r\\n        #make always on top\\r\\n        self.setWindowFlags(QtCore.Qt.WindowType.WindowStaysOnTopHint)\\r\\n\\r\\n        self.layout = QtWidgets.QVBoxLayout()\\r\\n        self.layout.addWidget(self.text_edit)\\r\\n        self.setLayout(self.layout)\\r\\n        self.short_keys = [ \\r\\n            Shortcut(\\"Ctrl+H\\", self, self.app2.show_shortcuts, \'Show shortcuts\'),\\r\\n            Shortcut(\\"Ctrl+w\\", self, self.app2.show_shortcuts, \'close window\'),\\r\\n            Shortcut(\\"Ctrl+q\\", self, self.app2.show_shortcuts, \'close window\'),\\r\\n        ]\\r\\n\\r\\nclass SqlTextBox(QtWidgets.QPlainTextEdit):\\r\\n    def __init__(self,parent:\'EditorWindow\'=None):\\r\\n        super().__init__()    \\r\\n        # self.document().contentsChanged.connect(self.txt_change)\\r\\n        # self.textChanged.connect(self.txt_change)\\r\\n        self.editor = parent\\r\\n        self.cursorPositionChanged.connect(self.cursor_move)\\r\\n\\r\\n    def cursor_move(self):\\r\\n        cursor = self.textCursor()\\r\\n        pos = cursor.position()\\r\\n        self.editor.cur_pos.setText(f\'cursor_pos: {pos}\')\\r\\n\\r\\n        result = interactive_parse_new(self.toPlainText(), pos)\\r\\n        if result:\\r\\n            if result.token_history:\\r\\n                self.editor.all_toekns_box.clear()\\r\\n                self.editor.all_toekns_box.addItems(result.token_history)\\r\\n            else:\\r\\n                self.editor.all_toekns_box.clear()\\r\\n\\r\\n            self.editor.tree_text.clear()\\r\\n            if result.tree:\\r\\n                self.editor.tree_text.setPlainText(result.tree.pretty())\\r\\n\\r\\n            if result.choices:\\r\\n                self.editor.choices_box.clear()\\r\\n                self.editor.choices_box.addItems(result.choices)\\r\\n            else:\\r\\n                self.editor.choices_box.clear()\\r\\n\\r\\n            if result.tokens_to_pos:\\r\\n                self.editor.token_history.clear()\\r\\n                self.editor.token_history.addItems(result.tokens_to_pos)\\r\\n            else:                \\r\\n                self.editor.token_history.clear()\\r\\n            if result.duration:\\r\\n                self.editor.duartion.addItem(str(result.duration))\\r\\n\\r\\n        else:\\r\\n            self.editor.choices_box.clear()\\r\\n            self.editor.token_history.clear()\\r\\n            self.editor.all_toekns_box.clear()\\r\\n\\r\\n\\r\\n    def keyPressEvent (self, keyEvent:QtGui.QKeyEvent):\\r\\n        vis = self.editor.comp.popup().isVisible()\\r\\n        # print(keyEvent.key(), keyEvent.nativeModifiers(),f\'popup: {vis}\')\\r\\n        if keyEvent.key() == 16777218 and keyEvent.nativeModifiers() == 513: #shift tab key\\r\\n                        # print(\'tab key\')\\r\\n            keyEvent = QtGui.QKeyEvent(\\r\\n                QtCore.QEvent.Type.KeyPress,\\r\\n                32, #space key\\r\\n                QtCore.Qt.KeyboardModifiers(keyEvent.nativeModifiers())\\r\\n            )\\r\\n            txt = self.toPlainText()\\r\\n            idx = self.textCursor().position()\\r\\n            anchor = self.textCursor().anchor()\\r\\n            row, col = line_col(txt, idx)\\r\\n            arow, acol = line_col(txt, anchor)\\r\\n            lines = txt.split(\'\\\\n\')\\r\\n            start = min(row,arow)\\r\\n            end = max(row,arow)\\r\\n            for i in range(start, end+1):\\r\\n                if lines[i].startswith(\'    \'):\\r\\n                    lines[i] = lines[i][4:]\\r\\n                else:\\r\\n                    lines[i] = lines[i].lstrip()\\r\\n\\r\\n            new_txt = \'\\\\n\'.join(lines)\\r\\n            self.setPlainText(new_txt)\\r\\n            cursor = self.textCursor()\\r\\n            cursor.setPosition(get_idx(new_txt, row, len(lines[row])-1), QtGui.QTextCursor.MoveMode.MoveAnchor)\\r\\n            cursor.setPosition(get_idx(new_txt, arow, len(lines[arow])-1), QtGui.QTextCursor.MoveMode.KeepAnchor)\\r\\n            self.setTextCursor(cursor)\\r\\n            return\\r\\n\\r\\n        if keyEvent.key() == 16777217 and keyEvent.nativeModifiers() == 512: #tab key\\r\\n            # print(\'tab key\')\\r\\n            keyEvent = QtGui.QKeyEvent(\\r\\n                QtCore.QEvent.Type.KeyPress,\\r\\n                32, #space key\\r\\n                QtCore.Qt.KeyboardModifiers(keyEvent.nativeModifiers())\\r\\n            )\\r\\n            txt = self.toPlainText()\\r\\n            idx = self.textCursor().position()\\r\\n            anchor = self.textCursor().anchor()\\r\\n            row, col = line_col(txt, idx)\\r\\n            arow, acol = line_col(txt, anchor)\\r\\n            lines = txt.split(\'\\\\n\')\\r\\n            start = min(row,arow)\\r\\n            end = max(row,arow)\\r\\n            for i in range(start, end+1):\\r\\n                lines[i] = \'    \' + lines[i]\\r\\n\\r\\n            new_txt = \'\\\\n\'.join(lines)\\r\\n            self.setPlainText(new_txt)\\r\\n            cursor = self.textCursor()\\r\\n            cursor.setPosition(get_idx(new_txt, row, col+4), QtGui.QTextCursor.MoveMode.MoveAnchor)\\r\\n            cursor.setPosition(get_idx(new_txt, arow, acol+4), QtGui.QTextCursor.MoveMode.KeepAnchor)\\r\\n\\r\\n            self.setTextCursor(cursor)\\r\\n            return\\r\\n        super().keyPressEvent(keyEvent)\\r\\n\\r\\n\\r\\nclass EditorWindow(QtWidgets.QWidget):\\r\\n    def __init__(self, parent:\'SqlEditor\'):\\r\\n        super().__init__()\\r\\n        self.setWindowTitle(\'SQL Editor\')\\r\\n        self.setGeometry(100, 100, 1600, 900)\\r\\n        self.app2 = parent\\r\\n\\r\\n        self.text_edit = SqlTextBox(self)\\r\\n        self.text_edit.setPlaceholderText(\'Enter your SQL here\')\\r\\n        # self.text_edit.setFont(QtGui.QFont(\'Arial\', 12))\\r\\n\\r\\n\\r\\n        # self.monaco_widget.setLanguage(\'sql\')\\r\\n        self.token_history = QtWidgets.QListWidget()\\r\\n        self.token_history.setFixedWidth(200)\\r\\n        self.choices_box = QtWidgets.QListWidget()\\r\\n        self.choices_box.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.MultiSelection)\\r\\n        self.choices_box.setFixedWidth(200)\\r\\n        self.all_toekns_box = QtWidgets.QListWidget()\\r\\n        self.all_toekns_box.setFixedWidth(200)\\r\\n        self.duartion = QtWidgets.QListWidget()\\r\\n        self.duartion.setFixedWidth(100)\\r\\n\\r\\n        self.cur_pos = QtWidgets.QLabel(\'cursor_pos: 0\')\\r\\n        self.header_label = QtWidgets.QLabel(\'sql editor\')\\r\\n\\r\\n        self.tree_text = QtWidgets.QPlainTextEdit()\\r\\n        self.tree_text.setReadOnly(True)\\r\\n\\r\\n        self.layoutz = QtWidgets.QGridLayout()\\r\\n        self.layoutz.addWidget(self.cur_pos,0,0,QtCore.Qt.AlignmentFlag.AlignRight)\\r\\n        self.layoutz.addWidget(self.text_edit, 1, 0, 2, 1)\\r\\n        self.layoutz.addWidget(QtWidgets.QLabel(\'choices\'),0,1)\\r\\n        self.layoutz.addWidget(self.choices_box,1,1)\\r\\n        self.layoutz.addWidget(QtWidgets.QLabel(\'choices\'),2,1)\\r\\n        self.layoutz.addWidget(QtWidgets.QLabel(\'all tokens\'),0,2)\\r\\n        self.layoutz.addWidget(self.all_toekns_box,1,2)\\r\\n        self.layoutz.addWidget(QtWidgets.QLabel(\'tokens before cursor\'),0,3)\\r\\n        self.layoutz.addWidget(self.token_history,1,3)\\r\\n        self.layoutz.addWidget(QtWidgets.QLabel(\'duration\'),0,4)\\r\\n        self.layoutz.addWidget(self.duartion,1,4)\\r\\n\\r\\n        self.layoutz.addWidget(self.tree_text,1,5)\\r\\n\\r\\n\\r\\n        self.setLayout(self.layoutz)\\r\\n\\r\\n        \\r\\n        self.short_keys = [\\r\\n            Shortcut(\\"Ctrl+H\\", self, self.show_shortcuts, \'show/hide shortcuts\'),\\r\\n            # Shortcut(\\"Alt+Up\\", self, lambda:self.move(-1), \'Move line up\'),\\r\\n            # Shortcut(\\"Alt+Down\\", self, lambda:self.move(1), \'Move line down\'),\\r\\n            Shortcut(\\"Ctrl+N\\", self, self.app2.new_window, \'New window\'),\\r\\n            Shortcut(\\"Ctrl+=\\", self, self.txt_bigger, \'zoom in\'),\\r\\n            Shortcut(\\"Ctrl+-\\", self, self.txt_smaller, \'zoom out\'),\\r\\n            Shortcut(\\"Ctrl+w\\", self, self.close, \'close window\'),\\r\\n            Shortcut(\\"Ctrl+q\\", self, self.close, \'close window\'),\\r\\n            Shortcut(\\"Ctrl+t\\", self, self.test_index, \'test\'),\\r\\n\\r\\n        ]\\r\\n        self.text_edit.setPlainText(\'select\\\\n   *\\\\nfrom potato p\')\\r\\n        self.comp = QtWidgets.QCompleter([\'apple\', \'banana\', \'cherry\',\'lime\'] + [f\'word_{x}\' for x in range(50)], self.text_edit)\\r\\n        self.comp.setCompletionMode(QtWidgets.QCompleter.PopupCompletion)\\r\\n        self.comp.setWidget(self.text_edit)\\r\\n        self.comp_popup = self.comp.popup()\\r\\n        for i in range(4):\\r\\n            self.txt_bigger()\\r\\n\\r\\n \\r\\n\\r\\n    def test_index(self):\\r\\n        pos = self.text_edit.textCursor().position()\\r\\n        qt_row = self.text_edit.textCursor().blockNumber()\\r\\n        qt_col = self.text_edit.textCursor().columnNumber()\\r\\n        char_w = self.text_edit.fontMetrics().width(\'a\')\\r\\n        char_h = self.text_edit.fontMetrics().height()\\r\\n        rect = self.text_edit.cursorRect()\\r\\n        \\r\\n\\r\\n        self.comp.complete(QtCore.QRect((qt_col) * char_w + 3, (qt_row+1) * char_h + 8,  char_w * 40, 1))\\r\\n        # if self.comp.popup().isVisible():\\r\\n        #     self.comp.popup().hide()\\r\\n        # else:\\r\\n        #     self.comp.popup().show()\\r\\n        txt = self.text_edit.toPlainText()\\r\\n        line, col = line_col(txt, pos)\\r\\n        idx = get_idx(txt, line, col)\\r\\n        print(f\'pos: {pos}, rect: {rect}, line: {line}, col: {col}, idx: {idx} qtrow: {qt_row}, qtcol{qt_col}, {char_w}, {char_h}\')\\r\\n\\r\\n    def show_shortcuts(self):\\r\\n        self.app2.show_shortcuts()\\r\\n        self.activateWindow()\\r\\n\\r\\n    # def text_selected(self):\\r\\n    #     cursor = self.text_edit.textCursor()\\r\\n    #     txt = cursor.selectionStart(), cursor.selectionEnd()\\r\\n    #     cursor.setPosition(4, QtGui.QTextCursor.MoveMode.MoveAnchor)\\r\\n    #     cursor.setPosition(8, QtGui.QTextCursor.MoveMode.KeepAnchor)\\r\\n    #     cursor.anchor()\\r\\n    #     cursor.position()\\r\\n    #     self.text_edit.setTextCursor(cursor)\\r\\n    #     print(f\'text selected {txt}\')\\r\\n\\r\\n    def txt_bigger(self):\\r\\n        editor_font = self.text_edit.font()\\r\\n        popup_font = self.comp_popup.font()\\r\\n        new_size = editor_font.pointSize() + 1\\r\\n        editor_font.setPointSize(new_size)\\r\\n        popup_font.setPointSize(new_size)\\r\\n        self.text_edit.setFont(editor_font)\\r\\n        self.comp_popup.setFont(popup_font)\\r\\n        self.choices_box.setFont(editor_font)\\r\\n        self.token_history.setFont(editor_font)\\r\\n        self.all_toekns_box.setFont(editor_font)\\r\\n        \\r\\n    \\r\\n    def txt_smaller(self):\\r\\n        editor_font = self.text_edit.font()\\r\\n        popup_font = self.comp_popup.font()\\r\\n        new_size = editor_font.pointSize() - 1\\r\\n        editor_font.setPointSize(new_size)\\r\\n        popup_font.setPointSize(new_size)\\r\\n        self.text_edit.setFont(editor_font)\\r\\n        self.comp_popup.setFont(popup_font)\\r\\n        self.choices_box.setFont(editor_font)\\r\\n        self.token_history.setFont(editor_font)\\r\\n        self.all_toekns_box.setFont(editor_font)\\r\\n\\r\\n    def tst_move(self):\\r\\n        cursor = self.text_edit.textCursor()\\r\\n        cursor.setPosition(4, QtGui.QTextCursor.MoveMode.MoveAnchor)\\r\\n        self.text_edit.setTextCursor(cursor)\\r\\n\\r\\n    def move(self,direction:int):\\r\\n        txt = self.text_edit.toPlainText()\\r\\n        pos = self.text_edit.textCursor().position()\\r\\n        anchor = self.text_edit.textCursor().anchor()\\r\\n        result = move_line(txt, pos, anchor, direction)\\r\\n        if result:\\r\\n            new_idx, newanchor, new_txt = result\\r\\n            self.text_edit.setPlainText(new_txt)\\r\\n            cursor = self.text_edit.textCursor()\\r\\n            cursor.setPosition(newanchor, QtGui.QTextCursor.MoveMode.MoveAnchor)\\r\\n            cursor.setPosition(new_idx, QtGui.QTextCursor.MoveMode.KeepAnchor)\\r\\n            self.text_edit.setTextCursor(cursor)\\r\\n\\r\\n    def closeEvent(self, a0: None) -> None:\\r\\n        if len(self.app2.windows) == 1:\\r\\n            self.app2.quit()\\r\\n        return super().closeEvent(a0)\\r\\n\\r\\n\\r\\n\\r\\nclass SqlEditor(QtWidgets.QApplication):\\r\\n    def __init__(self):\\r\\n        super().__init__([])\\r\\n        self.windows:list[EditorWindow] = []\\r\\n        self.new_window()\\r\\n        self.shortcut_keys = [\\r\\n        ]\\r\\n        self.popup = ShortcutHelp(self)\\r\\n\\r\\n        \\r\\n        \\r\\n    def new_window(self):\\r\\n        window = EditorWindow(self)\\r\\n        window.show()\\r\\n\\r\\n        \\r\\n\\r\\n        self.windows.append(window)\\r\\n\\r\\n    def run(self):\\r\\n        self.setStyleSheet(gui_style)\\r\\n        self.exec_()\\r\\n\\r\\n    def quit(self):\\r\\n        super().quit()\\r\\n\\r\\n\\r\\n    def show_shortcuts(self):\\r\\n        if self.popup.isVisible():\\r\\n            self.popup.hide()\\r\\n        else:\\r\\n            self.popup.show()\\r\\n\\r\\n\\r\\napp = SqlEditor()\\r\\napp.run()\\r\\n\\r\\n# %%\\r\\n\\r\\n\\r\\n\\r\\n"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 170
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 170\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///c%3A/Users/ryanw/python_projects/dabbler/dabbler/dabbler/test_parser_gui.py"}}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
DEBUG:pygls.server:Content length: 64
DEBUG:pygls.protocol.json_rpc:Received b'Content-Length: 64\r\n\r\n{"jsonrpc":"2.0","method":"$/setTrace","params":{"value":"off"}}'
DEBUG:pygls.protocol.json_rpc:Notification message received.
